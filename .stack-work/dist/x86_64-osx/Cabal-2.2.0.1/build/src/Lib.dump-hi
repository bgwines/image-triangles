
==================== FINAL INTERFACE ====================
2018-11-26 02:51:59.475037 UTC

interface image-triangles-0.1.0.0-BiEiu2CzRvH4EcZBOTYVL9:Lib 8044
  interface hash: 33643c264298ae6b25d5a788ce7294ff
  ABI hash: 6fb4f2cc702329702648ac6557247317
  export-list hash: 1198fb40b23ace4b969977875f5876bf
  orphan hash: d0713249d4fcea932a4784d79a3164e7
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.displayGradGrayImage
module dependencies:
package dependencies: Chart-1.9 Chart-diagrams-1.9
                      JuicyPixels-3.2.9.5 OneTuple-0.2.2 QuickCheck-2.11.3
                      SVGFonts-1.6.0.3 StateVar-1.1.1.1 active-0.2.0.13 adjunctions-4.4
                      array-0.5.2.0 attoparsec-0.13.2.2 attoparsec-binary-0.2
                      base-4.11.1.0 base-orphans-0.7 base64-bytestring-1.0.0.1
                      bifunctors-5.5.3 binary-0.8.5.1 blaze-builder-0.4.1.0
                      blaze-markup-0.8.2.2 blaze-svg-0.3.6.1 bytes-0.15.5
                      bytestring-0.10.8.2 call-stack-0.1.0 cereal-0.5.7.0
                      cereal-vector-0.2.0.1 colour-2.3.4 comonad-5.0.4
                      containers-0.5.11.0 contravariant-1.4.1 data-default-class-0.1.2.0
                      deepseq-1.4.3.0 diagrams-core-1.4.1.1 diagrams-lib-1.4.2.3
                      diagrams-postscript-1.4.1 diagrams-solve-0.1.1 diagrams-svg-1.4.2
                      directory-1.3.1.5 distributive-0.5.3 dlist-0.8.0.5 dual-tree-0.2.2
                      exceptions-0.10.0 filepath-1.4.2 fingertree-0.1.4.1 free-5.0.2
                      ghc-boot-th-8.4.4 ghc-prim-0.5.2.0 hashable-1.2.7.0 hip-1.5.3.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 intervals-0.8.1
                      kan-extensions-5.2 lens-4.16.1 linear-1.20.8 monoid-extras-0.5
                      mtl-2.2.2 netpbm-1.0.2 newtype-generics-0.5.3 operational-0.2.3.5
                      pretty-1.1.3.6 primitive-0.6.3.0 process-1.6.3.0 profunctors-5.2.2
                      random-1.1 reflection-2.1.4 repa-3.4.1.4 scientific-0.3.6.2
                      semigroupoids-5.2.2 split-0.2.3.3 statestack-0.2.0.5 stm-2.4.5.1
                      storable-record-0.0.4 svg-builder-0.1.1 tagged-0.8.5
                      template-haskell-2.13.0.0 temporary-1.3 text-1.2.3.1 tf-random-0.5
                      th-abstraction-0.2.8.0 time-1.8.0.2 transformers-0.5.5.0
                      transformers-base-0.4.5.2 transformers-compat-0.6.2 tuple-0.3.0.2
                      unix-2.7.2.2 unordered-containers-0.2.9.0 vector-0.12.0.1
                      vector-th-unbox-0.2.1.6 xml-1.3.14 zlib-0.6.2
orphans: hip-1.5.3.0:Graphics.Image.Types
         hip-1.5.3.0:Graphics.Image.Interface.Repa.Generic
         repa-3.4.1.4:Data.Array.Repa.Operators.Reduction
         repa-3.4.1.4:Data.Array.Repa.Arbitrary
         hip-1.5.3.0:Graphics.Image.Interface.Vector.Unboxing
         diagrams-lib-1.4.2.3:Diagrams.Animation.Active
         diagrams-lib-1.4.2.3:Diagrams.TwoD.Path
         diagrams-lib-1.4.2.3:Diagrams.TwoD.Segment
         diagrams-lib-1.4.2.3:Diagrams.Trail
         diagrams-lib-1.4.2.3:Diagrams.ThreeD.Types
         diagrams-lib-1.4.2.3:Diagrams.TwoD.Types
         diagrams-core-1.4.1.1:Diagrams.Core.Types
         monoid-extras-0.5:Data.Monoid.MList
         diagrams-core-1.4.1.1:Diagrams.Core.Points
         time-1.8.0.2:Data.Time.Clock.TAI linear-1.20.8:Linear.Instances
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         cereal-vector-0.2.0.1:Data.Vector.Serialize
         Chart-1.9:Graphics.Rendering.Chart.Axis.Int
         Chart-1.9:Graphics.Rendering.Chart.Axis.Floating
         Chart-1.9:Graphics.Rendering.Chart.Axis.Time
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         Chart-1.9:Graphics.Rendering.Chart.Axis.Unit
         colour-2.3.4:Data.Colour reflection-2.1.4:Data.Reflection
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show stm-2.4.5.1:Control.Monad.STM
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: JuicyPixels-3.2.9.5:Codec.Picture.Tga
                         JuicyPixels-3.2.9.5:Codec.Picture.Tiff
                         JuicyPixels-3.2.9.5:Codec.Picture.Types
                         SVGFonts-1.6.0.3:Graphics.SVGFonts.ReadFont
                         active-0.2.0.13:Data.Active adjunctions-4.4:Data.Functor.Rep
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         diagrams-core-1.4.1.1:Diagrams.Core.Envelope
                         diagrams-core-1.4.1.1:Diagrams.Core.Measure
                         diagrams-core-1.4.1.1:Diagrams.Core.Names
                         diagrams-core-1.4.1.1:Diagrams.Core.Points
                         diagrams-core-1.4.1.1:Diagrams.Core.Query
                         diagrams-core-1.4.1.1:Diagrams.Core.Style
                         diagrams-core-1.4.1.1:Diagrams.Core.Trace
                         diagrams-core-1.4.1.1:Diagrams.Core.Transform
                         diagrams-core-1.4.1.1:Diagrams.Core.Types
                         diagrams-core-1.4.1.1:Diagrams.Core.V
                         diagrams-lib-1.4.2.3:Diagrams.Angle
                         diagrams-lib-1.4.2.3:Diagrams.Animation.Active
                         diagrams-lib-1.4.2.3:Diagrams.BoundingBox
                         diagrams-lib-1.4.2.3:Diagrams.Coordinates
                         diagrams-lib-1.4.2.3:Diagrams.Direction
                         diagrams-lib-1.4.2.3:Diagrams.Located
                         diagrams-lib-1.4.2.3:Diagrams.Path
                         diagrams-lib-1.4.2.3:Diagrams.Segment
                         diagrams-lib-1.4.2.3:Diagrams.Size
                         diagrams-lib-1.4.2.3:Diagrams.Tangent
                         diagrams-lib-1.4.2.3:Diagrams.ThreeD.Camera
                         diagrams-lib-1.4.2.3:Diagrams.ThreeD.Light
                         diagrams-lib-1.4.2.3:Diagrams.ThreeD.Shapes
                         diagrams-lib-1.4.2.3:Diagrams.ThreeD.Types
                         diagrams-lib-1.4.2.3:Diagrams.Trail
                         diagrams-lib-1.4.2.3:Diagrams.TwoD.Attributes
                         diagrams-lib-1.4.2.3:Diagrams.TwoD.Image
                         diagrams-lib-1.4.2.3:Diagrams.TwoD.Path
                         diagrams-lib-1.4.2.3:Diagrams.TwoD.Segment.Bernstein
                         diagrams-lib-1.4.2.3:Diagrams.TwoD.Text
                         diagrams-lib-1.4.2.3:Diagrams.TwoD.Types
                         diagrams-postscript-1.4.1:Diagrams.Backend.Postscript
                         diagrams-svg-1.4.2:Diagrams.Backend.SVG dlist-0.8.0.5:Data.DList
                         dual-tree-0.2.2:Data.Tree.DUAL.Internal
                         fingertree-0.1.4.1:Data.FingerTree
                         free-5.0.2:Control.Comonad.Cofree
                         free-5.0.2:Control.Comonad.Trans.Cofree
                         free-5.0.2:Control.Monad.Free free-5.0.2:Control.Monad.Trans.Free
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         hip-1.5.3.0:Graphics.Image.ColorSpace.Binary
                         hip-1.5.3.0:Graphics.Image.ColorSpace.CMYK
                         hip-1.5.3.0:Graphics.Image.ColorSpace.HSI
                         hip-1.5.3.0:Graphics.Image.ColorSpace.RGB
                         hip-1.5.3.0:Graphics.Image.ColorSpace.X
                         hip-1.5.3.0:Graphics.Image.ColorSpace.Y
                         hip-1.5.3.0:Graphics.Image.ColorSpace.YCbCr
                         hip-1.5.3.0:Graphics.Image.IO.Formats
                         hip-1.5.3.0:Graphics.Image.IO.Formats.JuicyPixels
                         hip-1.5.3.0:Graphics.Image.IO.Formats.Netpbm
                         hip-1.5.3.0:Graphics.Image.Interface.Repa.Storable
                         hip-1.5.3.0:Graphics.Image.Interface.Repa.Unboxed
                         hip-1.5.3.0:Graphics.Image.Interface.Vector.Storable
                         hip-1.5.3.0:Graphics.Image.Interface.Vector.Unboxed
                         hip-1.5.3.0:Graphics.Image.Interface.Vector.Unboxing
                         intervals-0.8.1:Numeric.Interval.Kaucher
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.16.1:Control.Lens.At
                         lens-4.16.1:Control.Lens.Internal.Indexed
                         lens-4.16.1:Control.Lens.Reified lens-4.16.1:Control.Lens.Tuple
                         lens-4.16.1:Control.Lens.Wrapped lens-4.16.1:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4 netpbm-1.0.2:Graphics.Netpbm
                         newtype-generics-0.5.3:Control.Newtype.Generics
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         profunctors-5.2.2:Data.Profunctor.Composition
                         profunctors-5.2.2:Data.Profunctor.Rep
                         repa-3.4.1.4:Data.Array.Repa.Operators.Mapping
                         repa-3.4.1.4:Data.Array.Repa.Repr.ByteString
                         repa-3.4.1.4:Data.Array.Repa.Repr.Cursored
                         repa-3.4.1.4:Data.Array.Repa.Repr.Delayed
                         repa-3.4.1.4:Data.Array.Repa.Repr.ForeignPtr
                         repa-3.4.1.4:Data.Array.Repa.Repr.HintInterleave
                         repa-3.4.1.4:Data.Array.Repa.Repr.HintSmall
                         repa-3.4.1.4:Data.Array.Repa.Repr.Partitioned
                         repa-3.4.1.4:Data.Array.Repa.Repr.Unboxed
                         repa-3.4.1.4:Data.Array.Repa.Repr.Undefined
                         repa-3.4.1.4:Data.Array.Repa.Repr.Vector
                         repa-3.4.1.4:Data.Array.Repa.Slice tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  hip-1.5.3.0:Graphics.Image c7701b5a4a99da53bde706b94ae8c6da
import  -/  hip-1.5.3.0:Graphics.Image.ColorSpace.Y ea3218baad6fb086a7e72a090abbc9ea
import  -/  hip-1.5.3.0:Graphics.Image.IO 53929f4097e7e274654c2b42f039217a
import  -/  hip-1.5.3.0:Graphics.Image.Interface a2cf21a2e25c96be57317ccfd4b39a8b
import  -/  hip-1.5.3.0:Graphics.Image.Interface.Repa.Unboxed fb3c548eb052b18232f1249bdd5b5ce1
35cdd9184d2a3378b9271cd9c5be1ea4
  $s$fArrayRPUcse ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.Image.Interface.Repa.Unboxed.RPU
                  @ Graphics.Image.ColorSpace.Y.Y
                  @ GHC.Types.Double
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                    `cast`
                  (Data.Vector.Generic.Base.Vector
                     (Sym (Graphics.Image.Interface.Vector.Unboxed.D:R:VectorVU[0]) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:VectorRPU[0]))
                     <Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_N)_R
                  (Graphics.Image.Interface.Vector.Unboxed.$fMArrayVUcse
                     @ Graphics.Image.ColorSpace.Y.Y
                     @ GHC.Types.Double
                     (Graphics.Image.Interface.Vector.Unboxed.$fBaseArrayVUcse
                        @ Graphics.Image.ColorSpace.Y.Y
                        @ GHC.Types.Double
                        (Lib.$s$fArrayRPUcse_$s$fColorSpaceYe,
                         Data.Vector.Unboxed.Base.$fUnboxDouble
                           `cast`
                         (Data.Vector.Unboxed.Base.Unbox
                            (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                      <GHC.Types.Double>_N)))_R)
                          `cast`
                        (Sub (Sym (Graphics.Image.Interface.Vector.Unboxed.D:R:SuperClassVUcse[0]
                                       <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)))))
                    `cast`
                  (Graphics.Image.Interface.MArray
                     (Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ManifestRPU[0]))
                     <Graphics.Image.ColorSpace.Y.Y>_N
                     <GHC.Types.Double>_N)_R
                  Lib.$s$fArrayRPUcse_$s$fBaseArrayRPUcse
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cmakeImage
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cmakeImageWindowed
                  (\ (x :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   Graphics.Image.Interface.Repa.Generic.$WRDImage
                     @ Data.Array.Repa.Repr.Unboxed.U
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     (Data.Array.Repa.Repr.Delayed.$WADelayed
                        @ ((Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                           Data.Array.Repa.Index.:. GHC.Types.Int)
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        (Data.Array.Repa.Index.$W:.
                           @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                           @ GHC.Types.Int
                           (Data.Array.Repa.Index.$W:.
                              @ Data.Array.Repa.Index.Z
                              @ GHC.Types.Int
                              Data.Array.Repa.Index.Z
                              (GHC.Types.I# 1#))
                           (GHC.Types.I# 1#))
                        (\ (ds :: (Data.Array.Repa.Index.Z
                                   Data.Array.Repa.Index.:. GHC.Types.Int)
                                  Data.Array.Repa.Index.:. GHC.Types.Int) ->
                         x)))
                    `cast`
                  (<Graphics.Image.Interface.Pixel
                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                   ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                 <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cindex00
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cmap
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cimap
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$czipWith
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cizipWith
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctraverse
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctraverse2
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctranspose
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cbackpermute
                  (\ (x :: [[Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]]) ->
                   let {
                     ds :: (GHC.Types.Int, GHC.Types.Int)
                     = let {
                         m :: GHC.Types.Int
                         = GHC.Base.foldr
                             @ [Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]
                             @ (GHC.Types.Int -> GHC.Types.Int)
                             (GHC.List.lengthFB
                                @ [Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double])
                             GHC.List.idLength
                             x
                             (GHC.Types.I# 0#)
                       } in
                       let {
                         n :: GHC.Types.Int
                         = case GHC.Base.foldr
                                  @ [Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]
                                  @ (GHC.Base.Maybe
                                       [Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double])
                                  (\ (x1 :: [Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double])
                                     (ds1 :: GHC.Base.Maybe
                                               [Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y
                                                  GHC.Types.Double])[OneShot] ->
                                   GHC.Base.Just
                                     @ [Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]
                                     x1)
                                  (GHC.Base.Nothing
                                     @ [Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double])
                                  x of wild {
                             GHC.Base.Nothing -> GHC.Types.I# 0#
                             GHC.Base.Just x1
                             -> GHC.Base.foldr
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  @ (GHC.Types.Int -> GHC.Types.Int)
                                  (GHC.List.lengthFB
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                  GHC.List.idLength
                                  x1
                                  (GHC.Types.I# 0#) }
                       } in
                       let {
                         wild :: (GHC.Types.Int, GHC.Types.Int) = (m, n)
                       } in
                       let {
                         $j1 :: (GHC.Types.Int, GHC.Types.Int) <join 0>
                         = GHC.Err.error
                             @ 'GHC.Types.LiftedRep
                             @ (GHC.Types.Int, GHC.Types.Int)
                             Graphics.Image.Interface.checkDims1
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n1 :: b)[OneShot] ->
                                 GHC.Base.foldr
                                   @ GHC.Types.Char
                                   @ b
                                   c
                                   n1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Show.showLitString
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1 ->
                                             GHC.CString.unpackFoldrCString# @ b1 "fromListsRepa"#))
                                         GHC.Show.$fShow[]1)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      ": dimensions are expected to be positive: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShow(,)_$cshowsPrec
                                      @ GHC.Types.Int
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShow(,)1
                                      wild
                                      (GHC.Types.[] @ GHC.Types.Char))))
                       } in
                       case GHC.Classes.leInt m (GHC.Types.I# 0#) of wild1 {
                         GHC.Types.False
                         -> case GHC.Classes.leInt n (GHC.Types.I# 0#) of wild2 {
                              GHC.Types.False -> wild GHC.Types.True -> $j1 }
                         GHC.Types.True -> $j1 }
                   } in
                   let {
                     n :: GHC.Types.Int = case ds of wild { (,) m n1 -> n1 }
                   } in
                   case ds of ds1 { (,) ipv ipv1 ->
                   case (GHC.Base.foldr
                           @ [Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]
                           @ Data.Semigroup.Internal.All
                           (GHC.Base.mapFB
                              @ GHC.Types.Int
                              @ Data.Semigroup.Internal.All
                              @ [Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]
                              (\ (x1 :: GHC.Types.Int) ->
                               let {
                                 ds2 :: GHC.Types.Bool = GHC.Classes.eqInt x1 n
                               } in
                               (\ (x2 :: GHC.Types.Bool) ->
                                case ds2 of wild {
                                  GHC.Types.False -> GHC.Types.False GHC.Types.True -> x2 })
                                 `cast`
                               (Sym (Data.Semigroup.Internal.N:All[0])
                                ->_R Sym (Data.Semigroup.Internal.N:All[0])))
                              (GHC.List.length
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)))
                           GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:All[0]))
                           x)
                          `cast`
                        (Data.Semigroup.Internal.N:All[0]) of wild {
                     GHC.Types.False
                     -> (GHC.Err.error
                           @ 'GHC.Types.LiftedRep
                           @ (Graphics.Image.Interface.Repa.Generic.RImage
                                Data.Array.Repa.Repr.Unboxed.U
                                (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                           (GHC.Stack.Types.PushCallStack
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                              (GHC.Stack.Types.SrcLoc
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "hip-1.5.3.0-6W0kwpuK1By8h7TKiprsj5"#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "Graphics.Image.Interface.Repa.Generic"#))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "src/Graphics/Image/Interface/Repa/Generic.hs"#))
                                 (GHC.Types.I# 314#)
                                 (GHC.Types.I# 10#)
                                 (GHC.Types.I# 314#)
                                 (GHC.Types.I# 77#))
                              GHC.Stack.Types.EmptyCallStack)
                             `cast`
                           (Sym (GHC.Classes.N:IP[0]
                                     <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                           (GHC.Base.build
                              @ GHC.Types.Char
                              (\ @ b ->
                               GHC.CString.unpackFoldrCString#
                                 @ b
                                 "fromListsRepa: Inner lists do not all have an equal length."#)))
                          `cast`
                        (Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                     GHC.Types.True
                     -> (Graphics.Image.Interface.Repa.Generic.$WRTImage
                           @ Data.Array.Repa.Repr.Unboxed.U
                           @ (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                           (Data.Array.Repa.Eval.Target.fromList
                              @ ((Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                                 Data.Array.Repa.Index.:. GHC.Types.Int)
                              @ Data.Array.Repa.Repr.Unboxed.U
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                              Lib.$s$fArrayRPUcse_$s$fTargetUe
                              (Data.Array.Repa.Index.$W:.
                                 @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                                 @ GHC.Types.Int
                                 (Data.Array.Repa.Index.$W:.
                                    @ Data.Array.Repa.Index.Z
                                    @ GHC.Types.Int
                                    Data.Array.Repa.Index.Z
                                    ipv)
                                 n)
                              (GHC.Base.build
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 (\ @ b
                                    (c :: Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                                          -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.Base.foldr
                                    @ [Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]
                                    @ b
                                    (\ (x1 :: [Graphics.Image.Interface.Pixel
                                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double])
                                       (y :: b)[OneShot] ->
                                     GHC.Base.foldr
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       @ b
                                       c
                                       y
                                       x1)
                                    n1
                                    x))))
                          `cast`
                        (Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) } })
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$c|*|
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cfold
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cfoldIx
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ceq
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ccompute
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctoManifest
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctoVector
                  Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cfromVector -}
2c0fb72b8e84b7e8c5326f1c6d54c61b
  $s$fArrayRPUcse1 ::
    (Graphics.Image.Interface.ColorSpace
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double,
     Data.Array.Repa.Eval.Elt.Elt GHC.Types.Double,
     Data.Array.Repa.Eval.Elt.Elt
       (Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Strictness: m,
     Unfolding: ((Lib.$s$fArrayRPUcse_$s$fColorSpaceYe,
                  Data.Array.Repa.Eval.Elt.$fEltDouble,
                  Lib.$s$fArrayRPUcse_$s$fEltPixel)) -}
fb62267b3085980b9880ddb684eee475
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cbackpermute ::
    (GHC.Types.Int, GHC.Types.Int)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int))
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 3,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,C(U(1*U(U),1*U(U)))><S,1*U>m2,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (sz :: (GHC.Types.Int, GHC.Types.Int))
                   (g :: (GHC.Types.Int, GHC.Types.Int)
                         -> (GHC.Types.Int, GHC.Types.Int))
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case sz of sz1 { (,) ipv ipv1 ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of img1 { DEFAULT ->
                 let {
                   $j1 :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double
                     <join 0>
                   = case GHC.Err.error
                            @ 'GHC.Types.LiftedRep
                            @ (GHC.Types.Int, GHC.Types.Int)
                            Graphics.Image.Interface.checkDims1
                              `cast`
                            (Sym (GHC.Classes.N:IP[0]
                                      <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                            (GHC.Base.augment
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n1 :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ GHC.Types.Char
                                  @ b
                                  c
                                  n1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b1 ->
                                            GHC.CString.unpackFoldrCString# @ b1 "backpermuteR"#))
                                        GHC.Show.$fShow[]1)))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n1 :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     ": dimensions are expected to be positive: "#
                                     c
                                     n1)
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShow(,)1
                                     sz1
                                     (GHC.Types.[] @ GHC.Types.Char))))
                     ret_ty (Graphics.Image.Interface.Image
                               Graphics.Image.Interface.Repa.Unboxed.RPU
                               Graphics.Image.ColorSpace.Y.Y
                               GHC.Types.Double)
                     of {}
                 } in
                 case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild1 {
                   GHC.Types.False
                   -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild2 {
                        GHC.Types.False
                        -> (Graphics.Image.Interface.Repa.Generic.$WRDImage
                              @ Data.Array.Repa.Repr.Unboxed.U
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              (Data.Array.Repa.Operators.IndexSpace.backpermute
                                 @ Data.Array.Repa.Repr.Delayed.D
                                 @ Data.Array.Repa.Index.DIM2
                                 @ Data.Array.Repa.Index.DIM2
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                                 (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                 (Data.Array.Repa.Index.$W:.
                                    @ (Data.Array.Repa.Index.Z
                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                    @ GHC.Types.Int
                                    (Data.Array.Repa.Index.$W:.
                                       @ Data.Array.Repa.Index.Z
                                       @ GHC.Types.Int
                                       Data.Array.Repa.Index.Z
                                       ipv)
                                    ipv1)
                                 (\ (x :: Data.Array.Repa.Index.DIM2) ->
                                  case g (Graphics.Image.Interface.Repa.Generic.sh2ix
                                            x) of wild { (,) i j ->
                                  Data.Array.Repa.Index.$W:.
                                    @ (Data.Array.Repa.Index.Z
                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                    @ GHC.Types.Int
                                    (Data.Array.Repa.Index.$W:.
                                       @ Data.Array.Repa.Index.Z
                                       @ GHC.Types.Int
                                       Data.Array.Repa.Index.Z
                                       i)
                                    j })
                                 (case img1 of wild {
                                    Graphics.Image.Interface.Repa.Generic.RTImage arr
                                    -> case arr
                                              `cast`
                                            (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                                                                              GHC.Types.Double>_N) of wild4 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds1 ->
                                       Data.Array.Repa.Repr.Delayed.$WADelayed
                                         @ Data.Array.Repa.Index.DIM2
                                         @ (Graphics.Image.Interface.Pixel
                                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                         sh2
                                         (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                                          Data.Vector.Generic.unsafeIndex
                                            @ Data.Vector.Unboxed.Base.Vector
                                            @ (Graphics.Image.Interface.Pixel
                                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                            Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                                            ds1
                                            (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                               @ (Data.Array.Repa.Index.DIM0
                                                  Data.Array.Repa.Index.:. GHC.Types.Int)
                                               Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                               sh2
                                               ix)) }
                                    Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr })))
                             `cast`
                           (Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                     <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                        GHC.Types.True -> $j1 }
                   GHC.Types.True -> $j1 } } }) -}
dceaa1ab7d882eb362f6603ea0db3e72
  $s$fArrayRPUcse_$s$fArrayRPUcse_$ccompute ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of wild1 {
                   Graphics.Image.Interface.Repa.Generic.RTImage ipv -> wild1
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> case (Data.Array.Repa.Eval.suspendedComputeP
                              @ Data.Array.Repa.Repr.Delayed.D
                              @ Data.Array.Repa.Index.DIM2
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              @ Data.Array.Repa.Repr.Unboxed.U
                              (Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                              Lib.$s$fArrayRPUcse_$s$fTargetUe
                              arr)
                             `cast`
                           (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 vec ->
                      Graphics.Image.Interface.Repa.Generic.$WRTImage
                        @ Data.Array.Repa.Repr.Unboxed.U
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        wild
                          `cast`
                        (Sym (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                GHC.Types.Double>_N) } })
                  `cast`
                (<Graphics.Image.Interface.Image
                    Graphics.Image.Interface.Repa.Unboxed.RPU
                    Graphics.Image.ColorSpace.Y.Y
                    GHC.Types.Double>_R
                 ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                               <Graphics.Image.ColorSpace.Y.Y>_N
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) -}
acb0cb73ee206db6419b10f3bf1e5a83
  $s$fArrayRPUcse_$s$fArrayRPUcse_$ceq ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double)
                   (ds1 :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU
                             Graphics.Image.ColorSpace.Y.Y
                             GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of img4 { DEFAULT ->
                 case ds1
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of img5 { DEFAULT ->
                 let {
                   karg :: (GHC.Types.Int, GHC.Types.Int)
                   = case img5 of wild1 {
                       Graphics.Image.Interface.Repa.Generic.RTImage arr
                       -> case arr
                                 `cast`
                               (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                                 GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                          case sh2 of wild2 { Data.Array.Repa.Index.:. ds3 j ->
                          case ds3 of wild3 { Data.Array.Repa.Index.:. ds4 i -> (i, j) } } }
                       Graphics.Image.Interface.Repa.Generic.RDImage arr
                       -> case arr
                                 `cast`
                               (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                                 GHC.Types.Double>_N) of wild2 { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds2 ->
                          case sh2 of wild3 { Data.Array.Repa.Index.:. ds3 j ->
                          case ds3 of wild4 { Data.Array.Repa.Index.:. ds4 i ->
                          (i, j) } } } }
                 } in
                 let {
                   $j1 :: GHC.Types.Bool <join 0>
                   = case Data.Array.Repa.Operators.Reduction.foldAllP
                            @ Data.Array.Repa.Index.DIM2
                            @ Data.Array.Repa.Repr.Delayed.D
                            @ GHC.Types.Bool
                            @ GHC.Base.Maybe
                            Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                            (Data.Array.Repa.Repr.Delayed.$fSourceDa @ GHC.Types.Bool)
                            Data.Vector.Unboxed.Base.$fUnboxBool
                            GHC.Base.$fMonadMaybe
                            GHC.Classes.&&
                            GHC.Types.True
                            (Data.Array.Repa.Operators.Mapping.zipWith
                               @ Data.Array.Repa.Index.DIM2
                               @ Data.Array.Repa.Repr.Delayed.D
                               @ (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                               @ Data.Array.Repa.Repr.Delayed.D
                               @ (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                               @ GHC.Types.Bool
                               Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                               (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                               (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                               GHC.Classes.eqDouble
                                 `cast`
                               ((Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                                ->_R (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                                ->_R <GHC.Types.Bool>_R)
                               (case img4 of wild1 {
                                  Graphics.Image.Interface.Repa.Generic.RTImage arr
                                  -> case arr
                                            `cast`
                                          (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                                                            GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                                     Data.Array.Repa.Repr.Delayed.$WADelayed
                                       @ Data.Array.Repa.Index.DIM2
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       sh2
                                       (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                                        Data.Vector.Generic.unsafeIndex
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                          Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                                          ds2
                                          (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                             @ (Data.Array.Repa.Index.DIM0
                                                Data.Array.Repa.Index.:. GHC.Types.Int)
                                             Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                             sh2
                                             ix)) }
                                  Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr })
                               (case img5 of wild1 {
                                  Graphics.Image.Interface.Repa.Generic.RTImage arr
                                  -> case arr
                                            `cast`
                                          (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                                                            GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                                     Data.Array.Repa.Repr.Delayed.$WADelayed
                                       @ Data.Array.Repa.Index.DIM2
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       sh2
                                       (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                                        Data.Vector.Generic.unsafeIndex
                                          @ Data.Vector.Unboxed.Base.Vector
                                          @ (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                          Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                                          ds2
                                          (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                             @ (Data.Array.Repa.Index.DIM0
                                                Data.Array.Repa.Index.:. GHC.Types.Int)
                                             Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                             sh2
                                             ix)) }
                                  Graphics.Image.Interface.Repa.Generic.RDImage arr
                                  -> arr })) of wild1 {
                       GHC.Base.Nothing
                       -> Graphics.Image.Interface.Repa.Generic.errorR
                            @ GHC.Types.Bool
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b -> GHC.CString.unpackFoldrCString# @ b "eqR"#))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b ->
                                GHC.CString.unpackFoldrCString# @ b "impossible happened"#))
                       GHC.Base.Just res -> res }
                 } in
                 case img4 of wild1 {
                   Graphics.Image.Interface.Repa.Generic.RTImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                      case sh2 of wild2 { Data.Array.Repa.Index.:. ds3 j ->
                      case ds3 of wild3 { Data.Array.Repa.Index.:. ds4 i ->
                      case GHC.Classes.$fEq(,)_$c==
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Classes.$fEqInt
                             GHC.Classes.$fEqInt
                             (i, j)
                             karg of wild4 {
                        GHC.Types.False -> GHC.Types.False GHC.Types.True -> $j1 } } } }
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild2 { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds2 ->
                      case sh2 of wild3 { Data.Array.Repa.Index.:. ds3 j ->
                      case ds3 of wild4 { Data.Array.Repa.Index.:. ds4 i ->
                      case GHC.Classes.$fEq(,)_$c==
                             @ GHC.Types.Int
                             @ GHC.Types.Int
                             GHC.Classes.$fEqInt
                             GHC.Classes.$fEqInt
                             (i, j)
                             karg of wild5 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True -> $j1 } } } } } } }) -}
4b8898ffb5a1ad25f32da38d11c6de44
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cfold ::
    (Graphics.Image.Interface.Pixel
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 3, Strictness: <L,C(C1(U(U)))><S,1*U(U)><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (f :: Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (px0 :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0
                        `cast`
                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N) of nt { GHC.Types.D# ipv ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of img1 { DEFAULT ->
                 case Data.Array.Repa.Operators.Reduction.foldAllP
                        @ Data.Array.Repa.Index.DIM2
                        @ Data.Array.Repa.Repr.Unboxed.U
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        @ GHC.Base.Maybe
                        Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                        Lib.$s$fArrayRPUcse_$s$fSourceUa
                        Lib.$s$fArrayRPUcse_$s$fUnboxPixel
                        GHC.Base.$fMonadMaybe
                        f
                        nt
                          `cast`
                        (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                        (case img1 of wild1 {
                           Graphics.Image.Interface.Repa.Generic.RTImage ipv1 -> ipv1
                           Graphics.Image.Interface.Repa.Generic.RDImage arr
                           -> case (Data.Array.Repa.Eval.suspendedComputeP
                                      @ Data.Array.Repa.Repr.Delayed.D
                                      @ Data.Array.Repa.Index.DIM2
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      @ Data.Array.Repa.Repr.Unboxed.U
                                      (Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe
                                         @ (Graphics.Image.Interface.Pixel
                                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                      Lib.$s$fArrayRPUcse_$s$fTargetUe
                                      arr)
                                     `cast`
                                   (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                                     GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 vec ->
                              case Graphics.Image.Interface.Repa.Generic.$WRTImage
                                     @ Data.Array.Repa.Repr.Unboxed.U
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     wild
                                       `cast`
                                     (Sym (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                                             GHC.Types.Double>_N) of wild2 {
                                Graphics.Image.Interface.Repa.Generic.RTImage arr1 -> arr1
                                Graphics.Image.Interface.Repa.Generic.RDImage ipv1
                                -> case Control.Exception.Base.irrefutPatError
                                          @ 'GHC.Types.LiftedRep
                                          @ (Data.Array.Repa.Base.Array
                                               Data.Array.Repa.Repr.Unboxed.U
                                               Data.Array.Repa.Index.DIM2
                                               (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                          "src/Graphics/Image/Interface/Repa/Generic.hs:356:7-41|RTImage arr"#
                                   ret_ty (Data.Array.Repa.Base.Array
                                             Data.Array.Repa.Repr.Unboxed.U
                                             Data.Array.Repa.Index.DIM2
                                             (Graphics.Image.Interface.Pixel
                                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                   of {} } } }) of wild1 {
                   GHC.Base.Nothing
                   -> Graphics.Image.Interface.Repa.Generic.errorR
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b -> GHC.CString.unpackFoldrCString# @ b "foldPR"#))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b ->
                            GHC.CString.unpackFoldrCString# @ b "impossible happened."#))
                   GHC.Base.Just e1 -> e1 } } }) -}
e2263359b68f61a943bcaefdb9fc6eea
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cfoldIx ::
    (Graphics.Image.Interface.Pixel
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> (GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 3, Strictness: <L,C(C1(C1(U(U))))><S,1*U(U)><S,1*U>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (f :: Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> (GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (px0 :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0
                        `cast`
                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N) of nt { GHC.Types.D# ipv ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of img1 { DEFAULT ->
                 let {
                   $j1 :: Data.Array.Repa.Index.DIM2
                          -> (Data.Array.Repa.Index.DIM2
                              -> Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          -> Data.Array.Repa.Repr.Delayed.R:ArrayDsha
                               Data.Array.Repa.Index.DIM2
                               (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                     <join 3> {- Arity: 3 -}
                   = \ (ipv1 :: Data.Array.Repa.Index.DIM2)[OneShot]
                       (ipv2 :: Data.Array.Repa.Index.DIM2
                                -> Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)[OneShot]
                       (nt1 :: Data.Array.Repa.Repr.Delayed.R:ArrayDsha
                                 Data.Array.Repa.Index.DIM2
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))[OneShot] ->
                     case (Data.Array.Repa.Repr.Delayed.$WADelayed
                             @ Data.Array.Repa.Index.DIM2
                             @ GHC.Types.Int
                             ipv1
                             (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                @ (Data.Array.Repa.Index.DIM0
                                   Data.Array.Repa.Index.:. GHC.Types.Int)
                                Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                ipv1))
                            `cast`
                          (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <GHC.Types.Int>_N) of nt2 { Data.Array.Repa.Repr.Delayed.ADelayed ipv3 ipv4 ->
                     case (Data.Array.Repa.Operators.Mapping.zipWith
                             @ Data.Array.Repa.Index.DIM2
                             @ Data.Array.Repa.Repr.Delayed.D
                             @ GHC.Types.Int
                             @ Data.Array.Repa.Repr.Delayed.D
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             @ (GHC.Types.Int,
                                Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                             (Data.Array.Repa.Repr.Delayed.$fSourceDa @ GHC.Types.Int)
                             (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                             (GHC.Tuple.(,)
                                @ GHC.Types.Int
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                             nt2
                               `cast`
                             (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <GHC.Types.Int>_N)
                             nt1
                               `cast`
                             (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                                     GHC.Types.Double>_N))
                            `cast`
                          (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <(GHC.Types.Int,
                                                                                                           Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double)>_N) of nt3 { Data.Array.Repa.Repr.Delayed.ADelayed ipv5 ipv6 ->
                     let {
                       n :: GHC.Types.Int
                       = case ipv5 of wild { Data.Array.Repa.Index.:. ds1 n1 -> n1 }
                     } in
                     let {
                       accumWithIx :: (GHC.Types.Int,
                                       Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      -> (GHC.Types.Int,
                                          Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      -> (GHC.Types.Int,
                                          Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         {- Arity: 2, Inline: (sat-args=2),
                            Unfolding: InlineRule (2, False, False)
                                       (\ (ds1 :: (GHC.Types.Int,
                                                   Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y
                                                     GHC.Types.Double))
                                          (ds2 :: (GHC.Types.Int,
                                                   Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y
                                                     GHC.Types.Double)) ->
                                        case ds1 of wild { (,) ds3 acc ->
                                        case ds3 of wild1 { GHC.Types.I# ds4 ->
                                        case ds4 of ds5 {
                                          DEFAULT
                                          -> case ds2 of wild2 { (,) ds6 acc1 ->
                                             case ds6 of wild3 { GHC.Types.I# ds7 ->
                                             case ds7 of ds8 {
                                               DEFAULT
                                               -> Graphics.Image.Interface.Repa.Generic.errorR
                                                    @ (GHC.Types.Int,
                                                       Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double)
                                                    (GHC.Base.build
                                                       @ GHC.Types.Char
                                                       (\ @ b1 ->
                                                        GHC.CString.unpackFoldrCString#
                                                          @ b1
                                                          "accumWithx"#))
                                                    (GHC.Base.augment
                                                       @ GHC.Types.Char
                                                       (\ @ b1
                                                          (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                                          (n1 :: b1)[OneShot] ->
                                                        GHC.CString.unpackFoldrCString#
                                                          @ b1
                                                          "Impossible happened. Received: "#
                                                          c
                                                          n1)
                                                       (GHC.Base.augment
                                                          @ GHC.Types.Char
                                                          (\ @ b1
                                                             (c :: GHC.Types.Char
                                                                   -> b1 -> b1)[OneShot]
                                                             (n1 :: b1)[OneShot] ->
                                                           GHC.Base.foldr
                                                             @ GHC.Types.Char
                                                             @ b1
                                                             c
                                                             n1
                                                             (GHC.Show.showSignedInt
                                                                GHC.Show.$fShow(,)1
                                                                wild1
                                                                (GHC.Types.[] @ GHC.Types.Char)))
                                                          (GHC.Base.augment
                                                             @ GHC.Types.Char
                                                             (\ @ b1
                                                                (c :: GHC.Types.Char
                                                                      -> b1 -> b1)[OneShot]
                                                                (n1 :: b1)[OneShot] ->
                                                              GHC.CString.unpackFoldrCString#
                                                                @ b1
                                                                " "#
                                                                c
                                                                n1)
                                                             (GHC.Show.showSignedInt
                                                                GHC.Show.$fShow(,)1
                                                                wild3
                                                                (GHC.Types.[] @ GHC.Types.Char)))))
                                               -1#
                                               -> (GHC.Types.I# -1#,
                                                   f acc1
                                                     (case n of n1 { GHC.Types.I# ipv7 ->
                                                      GHC.Real.$fIntegralInt_$cdivMod wild1 n1 })
                                                     acc) } } }
                                          -1#
                                          -> case ds2 of wild2 { (,) k px ->
                                             (GHC.Types.I# -1#,
                                              f acc
                                                (Graphics.Image.Interface.toIx n k)
                                                px) } } } }) -}
                       = \ (ds1 :: (GHC.Types.Int,
                                    Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                           (ds2 :: (GHC.Types.Int,
                                    Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                         case ds1 of wild { (,) ds3 acc ->
                         case ds3 of wild1 { GHC.Types.I# ds4 ->
                         case ds4 of ds5 {
                           DEFAULT
                           -> case ds2 of wild2 { (,) ds6 acc1 ->
                              case ds6 of wild3 { GHC.Types.I# ds7 ->
                              case ds7 of ds8 {
                                DEFAULT
                                -> Graphics.Image.Interface.Repa.Generic.errorR
                                     @ (GHC.Types.Int,
                                        Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b1 ->
                                         GHC.CString.unpackFoldrCString# @ b1 "accumWithx"#))
                                     (GHC.Base.augment
                                        @ GHC.Types.Char
                                        (\ @ b1
                                           (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                           (n1 :: b1)[OneShot] ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b1
                                           "Impossible happened. Received: "#
                                           c
                                           n1)
                                        (GHC.Base.augment
                                           @ GHC.Types.Char
                                           (\ @ b1
                                              (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                              (n1 :: b1)[OneShot] ->
                                            GHC.Base.foldr
                                              @ GHC.Types.Char
                                              @ b1
                                              c
                                              n1
                                              (GHC.Show.showSignedInt
                                                 GHC.Show.$fShow(,)1
                                                 wild1
                                                 (GHC.Types.[] @ GHC.Types.Char)))
                                           (GHC.Base.augment
                                              @ GHC.Types.Char
                                              (\ @ b1
                                                 (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                                 (n1 :: b1)[OneShot] ->
                                               GHC.CString.unpackFoldrCString# @ b1 " "# c n1)
                                              (GHC.Show.showSignedInt
                                                 GHC.Show.$fShow(,)1
                                                 wild3
                                                 (GHC.Types.[] @ GHC.Types.Char)))))
                                -1#
                                -> (GHC.Types.I# -1#,
                                    f acc1
                                      (case n of n1 { GHC.Types.I# ipv7 ->
                                       GHC.Real.$fIntegralInt_$cdivMod wild1 n1 })
                                      acc) } } }
                           -1#
                           -> case ds2 of wild2 { (,) k px ->
                              (GHC.Types.I# -1#,
                               f acc (Graphics.Image.Interface.toIx n k) px) } } } }
                     } in
                     case Data.Array.Repa.Operators.Reduction.foldAllP
                            @ Data.Array.Repa.Index.DIM2
                            @ Data.Array.Repa.Repr.Delayed.D
                            @ (GHC.Types.Int,
                               Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            @ GHC.Base.Maybe
                            Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                            (Data.Array.Repa.Repr.Delayed.$fSourceDa
                               @ (GHC.Types.Int,
                                  Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            Lib.$s$fArrayRPUcse_$s$fUnbox(,)
                            GHC.Base.$fMonadMaybe
                            accumWithIx
                            (GHC.Types.I# -1#,
                             nt
                               `cast`
                             (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                       <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N))
                            nt3
                              `cast`
                            (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <(GHC.Types.Int,
                                                                                                                   Graphics.Image.Interface.Pixel
                                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                                     GHC.Types.Double)>_N) of wild1 {
                       GHC.Base.Nothing
                       -> GHC.Err.error
                            @ 'GHC.Types.LiftedRep
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            (GHC.Stack.Types.PushCallStack
                               (GHC.Base.build
                                  @ GHC.Types.Char
                                  (\ @ b1 -> GHC.CString.unpackFoldrCString# @ b1 "error"#))
                               (GHC.Stack.Types.SrcLoc
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b1 ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b1
                                        "hip-1.5.3.0-6W0kwpuK1By8h7TKiprsj5"#))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b1 ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b1
                                        "Graphics.Image.Interface.Repa.Generic"#))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b1 ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b1
                                        "src/Graphics/Image/Interface/Repa/Generic.hs"#))
                                  (GHC.Types.I# 383#)
                                  (GHC.Types.I# 26#)
                                  (GHC.Types.I# 383#)
                                  (GHC.Types.I# 66#))
                               GHC.Stack.Types.EmptyCallStack)
                              `cast`
                            (Sym (GHC.Classes.N:IP[0]
                                      <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                            (GHC.Base.build
                               @ GHC.Types.Char
                               (\ @ b1 ->
                                GHC.CString.unpackFoldrCString#
                                  @ b1
                                  "foldIxPR: impossible happened."#))
                       GHC.Base.Just ds1 -> case ds1 of wild2 { (,) ds2 acc -> acc } } } }
                 } in
                 case img1 of wild {
                   Graphics.Image.Interface.Repa.Generic.RTImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds1 ->
                      case (Data.Array.Repa.Repr.Delayed.$WADelayed
                              @ Data.Array.Repa.Index.DIM2
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              sh2
                              (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                               Data.Vector.Generic.unsafeIndex
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                                 ds1
                                 (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                    @ (Data.Array.Repa.Index.DIM0
                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                    Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                    sh2
                                    ix)))
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of nt1 { Data.Array.Repa.Repr.Delayed.ADelayed ipv1 ipv2 ->
                      $j1 ipv1 ipv2 nt1 } }
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of nt1 { Data.Array.Repa.Repr.Delayed.ADelayed ipv1 ipv2 ->
                      $j1 ipv1 ipv2 nt1 } } } }) -}
f7578e4b270c4fdd81dc7b171d850694
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cfromVector ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Graphics.Image.Interface.Vector
         Graphics.Image.Interface.Repa.Unboxed.RPU
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SS),1*U(1*U(U),1*U(U))><S,1*U(U,U,U)>m1,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (sz :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case sz of sz1 { (,) ipv ipv1 ->
                 let {
                   g :: (Data.Array.Repa.Index.Z
                         Data.Array.Repa.Index.:. GHC.Types.Int)
                        Data.Array.Repa.Index.:. GHC.Types.Int
                   = Data.Array.Repa.Index.$W:.
                       @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                       @ GHC.Types.Int
                       (Data.Array.Repa.Index.$W:.
                          @ Data.Array.Repa.Index.Z
                          @ GHC.Types.Int
                          Data.Array.Repa.Index.Z
                          ipv)
                       ipv1
                 } in
                 (\ (x :: Data.Vector.Unboxed.Base.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                  Graphics.Image.Interface.Repa.Generic.$WRTImage
                    @ Data.Array.Repa.Repr.Unboxed.U
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (Data.Array.Repa.Repr.Unboxed.$WAUnboxed
                       @ Data.Array.Repa.Index.DIM2
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       g
                       x))
                   `cast`
                 ((Sub (Sym (Graphics.Image.Interface.Vector.Unboxed.D:R:VectorVU[0])) ; Sub (Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:VectorRPU[0]))) <Graphics.Image.Interface.Pixel
                                                                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                GHC.Types.Double>_N
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) }) -}
a3f45b53dd2409a91a10311dfc58563a
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cimap ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Repa.Unboxed.RPU cs' e' =>
    ((GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Image.Interface.Pixel cs' e'
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU cs' e'
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,U(U(A,A,A,C(U(U)),A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U))><S,1*U>m2,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ cs'
                   @ e'
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Repa.Unboxed.RPU cs' e') ->
                 let {
                   $dMArray :: Graphics.Image.Interface.MArray
                                 (Graphics.Image.Interface.Manifest
                                    Graphics.Image.Interface.Repa.Unboxed.RPU)
                                 cs'
                                 e'
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs'
                       @ e'
                       $dArray
                 } in
                 let {
                   $dBaseArray1 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs'
                                     e'
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs'
                       @ e'
                       $dMArray
                 } in
                 let {
                   $dColorSpace :: Graphics.Image.Interface.ColorSpace cs' e'
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs'
                       @ e'
                       $dBaseArray1
                 } in
                 let {
                   $dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                (Graphics.Image.Interface.Pixel cs' e')
                   = Graphics.Image.Interface.Vector.Unboxing.$fUnboxPixel
                       @ cs'
                       @ e'
                       $dColorSpace
                 } in
                 let {
                   $dSource :: Data.Array.Repa.Base.Source
                                 Data.Array.Repa.Repr.Unboxed.U
                                 (Graphics.Image.Interface.Pixel cs' e')
                   = Data.Array.Repa.Repr.Unboxed.$fSourceUa
                       @ (Graphics.Image.Interface.Pixel cs' e')
                       $dUnbox
                 } in
                 (\ (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel cs' e'
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU cs' e') ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs'>_N <e'>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                       <cs'>_N
                                                                                                       <e'>_N) of wild {
                    Graphics.Image.Interface.Repa.Generic.RTImage arr
                    -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                         @ Data.Array.Repa.Repr.Unboxed.U
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (Data.Array.Repa.Operators.Traversal.traverse
                            @ Data.Array.Repa.Repr.Unboxed.U
                            @ Data.Array.Repa.Index.DIM2
                            @ Data.Array.Repa.Index.DIM2
                            @ (Graphics.Image.Interface.Pixel cs' e')
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            $dSource
                            Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                            arr
                            (GHC.Base.id @ Data.Array.Repa.Index.DIM2)
                            (\ (getPx :: Data.Array.Repa.Index.DIM2
                                         -> Graphics.Image.Interface.Pixel cs' e')[OneShot]
                               (sh :: Data.Array.Repa.Index.DIM2) ->
                             case sh of sh2 { Data.Array.Repa.Index.:. ipv ipv1 ->
                             f (case ipv of wild1 { Data.Array.Repa.Index.:. ds1 i ->
                                (i, ipv1) })
                               (getPx sh2) }))
                    Graphics.Image.Interface.Repa.Generic.RDImage arr
                    -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                         @ Data.Array.Repa.Repr.Unboxed.U
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (Data.Array.Repa.Operators.Traversal.traverse
                            @ Data.Array.Repa.Repr.Delayed.D
                            @ Data.Array.Repa.Index.DIM2
                            @ Data.Array.Repa.Index.DIM2
                            @ (Graphics.Image.Interface.Pixel cs' e')
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            (Data.Array.Repa.Repr.Delayed.$fSourceDa
                               @ (Graphics.Image.Interface.Pixel cs' e'))
                            Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                            arr
                            (GHC.Base.id @ Data.Array.Repa.Index.DIM2)
                            (\ (getPx :: Data.Array.Repa.Index.DIM2
                                         -> Graphics.Image.Interface.Pixel cs' e')[OneShot]
                               (sh :: Data.Array.Repa.Index.DIM2) ->
                             case sh of sh2 { Data.Array.Repa.Index.:. ipv ipv1 ->
                             f (case ipv of wild1 { Data.Array.Repa.Index.:. ds1 i ->
                                (i, ipv1) })
                               (getPx sh2) })) })
                   `cast`
                 (<(GHC.Types.Int, GHC.Types.Int)
                   -> Graphics.Image.Interface.Pixel cs' e'
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Repa.Unboxed.RPU cs' e'>_R
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
fc577fb2548bc541594959c18e9b805c
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cindex00 ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of wild {
                   Graphics.Image.Interface.Repa.Generic.RTImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed ds1 vec ->
                      Data.Vector.Generic.!
                        @ Data.Vector.Unboxed.Base.Vector
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                        vec
                        (Data.Array.Repa.Index.$fShape:._$ctoIndex
                           @ (Data.Array.Repa.Index.DIM0
                              Data.Array.Repa.Index.:. GHC.Types.Int)
                           Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                           ds1
                           (Data.Array.Repa.Index.$W:.
                              @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                              @ GHC.Types.Int
                              (Data.Array.Repa.Index.$W:.
                                 @ Data.Array.Repa.Index.Z
                                 @ GHC.Types.Int
                                 Data.Array.Repa.Index.Z
                                 (GHC.Types.I# 0#))
                              (GHC.Types.I# 0#))) }
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild1 { Data.Array.Repa.Repr.Delayed.ADelayed ds1 f1 ->
                      f1
                        (Data.Array.Repa.Index.$W:.
                           @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                           @ GHC.Types.Int
                           (Data.Array.Repa.Index.$W:.
                              @ Data.Array.Repa.Index.Z
                              @ GHC.Types.Int
                              Data.Array.Repa.Index.Z
                              (GHC.Types.I# 0#))
                           (GHC.Types.I# 0#)) } }) -}
fac23ff3ec640bc4b153e079c3a87dbd
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cizipWith ::
    (Graphics.Image.Interface.Array
       Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1,
     Graphics.Image.Interface.Array
       Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) =>
    ((GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Image.Interface.Pixel cs1 e1
     -> Graphics.Image.Interface.Pixel cs2 e2
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 5,
     Strictness: <L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(C1(U(U))))><S,1*U><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ cs1
                   @ e1
                   @ cs2
                   @ e2
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1)
                   ($dArray1 :: Graphics.Image.Interface.Array
                                  Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) ->
                 let {
                   $dMArray :: Graphics.Image.Interface.MArray
                                 (Graphics.Image.Interface.Manifest
                                    Graphics.Image.Interface.Repa.Unboxed.RPU)
                                 cs2
                                 e2
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs2
                       @ e2
                       $dArray1
                 } in
                 let {
                   $dBaseArray1 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs2
                                     e2
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs2
                       @ e2
                       $dMArray
                 } in
                 let {
                   $dColorSpace :: Graphics.Image.Interface.ColorSpace cs2 e2
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs2
                       @ e2
                       $dBaseArray1
                 } in
                 let {
                   $dMArray1 :: Graphics.Image.Interface.MArray
                                  (Graphics.Image.Interface.Manifest
                                     Graphics.Image.Interface.Repa.Unboxed.RPU)
                                  cs1
                                  e1
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs1
                       @ e1
                       $dArray
                 } in
                 let {
                   $dBaseArray2 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs1
                                     e1
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs1
                       @ e1
                       $dMArray1
                 } in
                 let {
                   $dColorSpace1 :: Graphics.Image.Interface.ColorSpace cs1 e1
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs1
                       @ e1
                       $dBaseArray2
                 } in
                 (\ (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel cs1 e1
                          -> Graphics.Image.Interface.Pixel cs2 e2
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1)
                    (ds1 :: Graphics.Image.Interface.Image
                              Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs1>_N <e1>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                       <cs1>_N
                                                                                                       <e1>_N) of img4 { DEFAULT ->
                  case ds1
                         `cast`
                       (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                       <cs2>_N
                                                                                                       <e2>_N) of img5 { DEFAULT ->
                  let {
                    arr1 :: Data.Array.Repa.Base.Array
                              Data.Array.Repa.Repr.Delayed.D
                              Data.Array.Repa.Index.DIM2
                              (Graphics.Image.Interface.Pixel cs1 e1)
                    = case img4 of wild {
                        Graphics.Image.Interface.Repa.Generic.RTImage arr
                        -> case arr
                                  `cast`
                                (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                  cs1
                                                                                                                  e1>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                           Data.Array.Repa.Repr.Delayed.$WADelayed
                             @ Data.Array.Repa.Index.DIM2
                             @ (Graphics.Image.Interface.Pixel cs1 e1)
                             sh2
                             (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                              Data.Vector.Generic.unsafeIndex
                                @ Data.Vector.Unboxed.Base.Vector
                                @ (Graphics.Image.Interface.Pixel cs1 e1)
                                (Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel
                                   @ cs1
                                   @ e1
                                   $dColorSpace1)
                                ds2
                                (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                   @ (Data.Array.Repa.Index.DIM0
                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                   Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                   sh2
                                   ix)) }
                        Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr }
                  } in
                  let {
                    arr2 :: Data.Array.Repa.Base.Array
                              Data.Array.Repa.Repr.Delayed.D
                              Data.Array.Repa.Index.DIM2
                              (Graphics.Image.Interface.Pixel cs2 e2)
                    = case img5 of wild {
                        Graphics.Image.Interface.Repa.Generic.RTImage arr
                        -> case arr
                                  `cast`
                                (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                  cs2
                                                                                                                  e2>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                           Data.Array.Repa.Repr.Delayed.$WADelayed
                             @ Data.Array.Repa.Index.DIM2
                             @ (Graphics.Image.Interface.Pixel cs2 e2)
                             sh2
                             (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                              Data.Vector.Generic.unsafeIndex
                                @ Data.Vector.Unboxed.Base.Vector
                                @ (Graphics.Image.Interface.Pixel cs2 e2)
                                (Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel
                                   @ cs2
                                   @ e2
                                   $dColorSpace)
                                ds2
                                (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                   @ (Data.Array.Repa.Index.DIM0
                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                   Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                   sh2
                                   ix)) }
                        Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr }
                  } in
                  let {
                    ds2 :: Data.Array.Repa.Index.DIM1
                           Data.Array.Repa.Index.:. GHC.Types.Int
                    = case arr1
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             cs1
                                                                                                             e1>_N) of wild { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds3 ->
                      sh2 }
                  } in
                  let {
                    ds3 :: Data.Array.Repa.Index.DIM2
                    = case arr2
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             cs2
                                                                                                             e2>_N) of wild { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds4 ->
                      sh2 }
                  } in
                  let {
                    fail :: GHC.Prim.Void#
                            -> Graphics.Image.Interface.Repa.Generic.RImage
                                 Data.Array.Repa.Repr.Unboxed.U
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 1> {- Arity: 1 -}
                    = \ (ds4 :: GHC.Prim.Void#)[OneShot] ->
                      let {
                        fail1 :: GHC.Prim.Void#
                                 -> Graphics.Image.Interface.Repa.Generic.RImage
                                      Data.Array.Repa.Repr.Unboxed.U
                                      (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          <join 1> {- Arity: 1 -}
                        = \ (ds5 :: GHC.Prim.Void#)[OneShot] ->
                          case ds2 of wild { Data.Array.Repa.Index.:. ds6 n1 ->
                          case ds6 of wild1 { Data.Array.Repa.Index.:. ds7 m1 ->
                          case ds3 of wild2 { Data.Array.Repa.Index.:. ds8 n2 ->
                          case ds8 of wild3 { Data.Array.Repa.Index.:. ds9 m2 ->
                          let {
                            getNewPx :: (Data.Array.Repa.Index.DIM2
                                         -> Graphics.Image.Interface.Pixel cs1 e1)
                                        -> (Data.Array.Repa.Index.DIM2
                                            -> Graphics.Image.Interface.Pixel cs2 e2)
                                        -> Data.Array.Repa.Index.DIM2
                                        -> Graphics.Image.Interface.Pixel
                                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                              {- Arity: 3, Inline: (sat-args=3),
                                 Unfolding: InlineRule (3, False, False)
                                            (\ (getPx1 :: Data.Array.Repa.Index.DIM2
                                                          -> Graphics.Image.Interface.Pixel cs1 e1)
                                               (getPx2 :: Data.Array.Repa.Index.DIM2
                                                          -> Graphics.Image.Interface.Pixel cs2 e2)
                                               (sh :: Data.Array.Repa.Index.DIM2) ->
                                             case sh of sh2 { Data.Array.Repa.Index.:. ipv ipv1 ->
                                             f (case ipv of wild4 { Data.Array.Repa.Index.:. ds10 i ->
                                                (i, ipv1) })
                                               (getPx1 sh2)
                                               (getPx2 sh2) }) -}
                            = \ (getPx1 :: Data.Array.Repa.Index.DIM2
                                           -> Graphics.Image.Interface.Pixel cs1 e1)
                                (getPx2 :: Data.Array.Repa.Index.DIM2
                                           -> Graphics.Image.Interface.Pixel cs2 e2)
                                (sh :: Data.Array.Repa.Index.DIM2) ->
                              case sh of sh2 { Data.Array.Repa.Index.:. ipv ipv1 ->
                              f (case ipv of wild4 { Data.Array.Repa.Index.:. ds10 i ->
                                 (i, ipv1) })
                                (getPx1 sh2)
                                (getPx2 sh2) }
                          } in
                          let {
                            getNewDims :: Data.Array.Repa.Index.DIM2
                                          -> Data.Array.Repa.Index.DIM2
                                          -> (Data.Array.Repa.Index.Z
                                              Data.Array.Repa.Index.:. GHC.Types.Int)
                                             Data.Array.Repa.Index.:. GHC.Types.Int
                              {- Arity: 2, Inline: (sat-args=2),
                                 Unfolding: InlineRule (2, False, False)
                                            (\ (ds10 :: Data.Array.Repa.Index.DIM2)
                                               (ds11 :: Data.Array.Repa.Index.DIM2) ->
                                             case m1 of wild4 { GHC.Types.I# x1 ->
                                             case m2 of wild5 { GHC.Types.I# y1 ->
                                             case GHC.Prim.<=# x1 y1 of lwild {
                                               DEFAULT
                                               -> case n1 of wild6 { GHC.Types.I# x2 ->
                                                  case n2 of wild7 { GHC.Types.I# y2 ->
                                                  case GHC.Prim.<=# x2 y2 of lwild1 {
                                                    DEFAULT
                                                    -> Data.Array.Repa.Index.$W:.
                                                         @ (Data.Array.Repa.Index.Z
                                                            Data.Array.Repa.Index.:. GHC.Types.Int)
                                                         @ GHC.Types.Int
                                                         (Data.Array.Repa.Index.$W:.
                                                            @ Data.Array.Repa.Index.Z
                                                            @ GHC.Types.Int
                                                            Data.Array.Repa.Index.Z
                                                            wild5)
                                                         wild7
                                                    1#
                                                    -> Data.Array.Repa.Index.$W:.
                                                         @ (Data.Array.Repa.Index.Z
                                                            Data.Array.Repa.Index.:. GHC.Types.Int)
                                                         @ GHC.Types.Int
                                                         (Data.Array.Repa.Index.$W:.
                                                            @ Data.Array.Repa.Index.Z
                                                            @ GHC.Types.Int
                                                            Data.Array.Repa.Index.Z
                                                            wild5)
                                                         wild6 } } }
                                               1#
                                               -> case n1 of wild6 { GHC.Types.I# x2 ->
                                                  case n2 of wild7 { GHC.Types.I# y2 ->
                                                  case GHC.Prim.<=# x2 y2 of lwild1 {
                                                    DEFAULT
                                                    -> Data.Array.Repa.Index.$W:.
                                                         @ (Data.Array.Repa.Index.Z
                                                            Data.Array.Repa.Index.:. GHC.Types.Int)
                                                         @ GHC.Types.Int
                                                         (Data.Array.Repa.Index.$W:.
                                                            @ Data.Array.Repa.Index.Z
                                                            @ GHC.Types.Int
                                                            Data.Array.Repa.Index.Z
                                                            wild4)
                                                         wild7
                                                    1#
                                                    -> Data.Array.Repa.Index.$W:.
                                                         @ (Data.Array.Repa.Index.Z
                                                            Data.Array.Repa.Index.:. GHC.Types.Int)
                                                         @ GHC.Types.Int
                                                         (Data.Array.Repa.Index.$W:.
                                                            @ Data.Array.Repa.Index.Z
                                                            @ GHC.Types.Int
                                                            Data.Array.Repa.Index.Z
                                                            wild4)
                                                         wild6 } } } } } }) -}
                            = \ (ds10 :: Data.Array.Repa.Index.DIM2)
                                (ds11 :: Data.Array.Repa.Index.DIM2) ->
                              case m1 of wild4 { GHC.Types.I# x1 ->
                              case m2 of wild5 { GHC.Types.I# y1 ->
                              case GHC.Prim.<=# x1 y1 of lwild {
                                DEFAULT
                                -> case n1 of wild6 { GHC.Types.I# x2 ->
                                   case n2 of wild7 { GHC.Types.I# y2 ->
                                   case GHC.Prim.<=# x2 y2 of lwild1 {
                                     DEFAULT
                                     -> Data.Array.Repa.Index.$W:.
                                          @ (Data.Array.Repa.Index.Z
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          @ GHC.Types.Int
                                          (Data.Array.Repa.Index.$W:.
                                             @ Data.Array.Repa.Index.Z
                                             @ GHC.Types.Int
                                             Data.Array.Repa.Index.Z
                                             wild5)
                                          wild7
                                     1#
                                     -> Data.Array.Repa.Index.$W:.
                                          @ (Data.Array.Repa.Index.Z
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          @ GHC.Types.Int
                                          (Data.Array.Repa.Index.$W:.
                                             @ Data.Array.Repa.Index.Z
                                             @ GHC.Types.Int
                                             Data.Array.Repa.Index.Z
                                             wild5)
                                          wild6 } } }
                                1#
                                -> case n1 of wild6 { GHC.Types.I# x2 ->
                                   case n2 of wild7 { GHC.Types.I# y2 ->
                                   case GHC.Prim.<=# x2 y2 of lwild1 {
                                     DEFAULT
                                     -> Data.Array.Repa.Index.$W:.
                                          @ (Data.Array.Repa.Index.Z
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          @ GHC.Types.Int
                                          (Data.Array.Repa.Index.$W:.
                                             @ Data.Array.Repa.Index.Z
                                             @ GHC.Types.Int
                                             Data.Array.Repa.Index.Z
                                             wild4)
                                          wild7
                                     1#
                                     -> Data.Array.Repa.Index.$W:.
                                          @ (Data.Array.Repa.Index.Z
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          @ GHC.Types.Int
                                          (Data.Array.Repa.Index.$W:.
                                             @ Data.Array.Repa.Index.Z
                                             @ GHC.Types.Int
                                             Data.Array.Repa.Index.Z
                                             wild4)
                                          wild6 } } } } } }
                          } in
                          Graphics.Image.Interface.Repa.Generic.$WRDImage
                            @ Data.Array.Repa.Repr.Unboxed.U
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            (Data.Array.Repa.Operators.Traversal.traverse2
                               @ Data.Array.Repa.Repr.Delayed.D
                               @ Data.Array.Repa.Repr.Delayed.D
                               @ Data.Array.Repa.Index.DIM2
                               @ Data.Array.Repa.Index.DIM2
                               @ ((Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                                  Data.Array.Repa.Index.:. GHC.Types.Int)
                               @ (Graphics.Image.Interface.Pixel cs1 e1)
                               @ (Graphics.Image.Interface.Pixel cs2 e2)
                               @ (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                               (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                  @ (Graphics.Image.Interface.Pixel cs1 e1))
                               (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                  @ (Graphics.Image.Interface.Pixel cs2 e2))
                               Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                               Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                               arr1
                               arr2
                               getNewDims
                               getNewPx) } } } }
                      } in
                      case ds3 of wild { Data.Array.Repa.Index.:. ds5 ds6 ->
                      case ds5 of wild1 { Data.Array.Repa.Index.:. ds7 ds8 ->
                      case ds8 of wild2 { GHC.Types.I# ds9 ->
                      case ds9 of ds10 {
                        DEFAULT -> fail1 GHC.Prim.void#
                        1#
                        -> case ds6 of wild3 { GHC.Types.I# ds11 ->
                           case ds11 of ds12 {
                             DEFAULT -> fail1 GHC.Prim.void#
                             1#
                             -> case arr1
                                       `cast`
                                     (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                       cs1
                                                                                                                       e1>_N) of nt { Data.Array.Repa.Repr.Delayed.ADelayed ipv ipv1 ->
                                Graphics.Image.Interface.Repa.Generic.$WRDImage
                                  @ Data.Array.Repa.Repr.Unboxed.U
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  (Data.Array.Repa.Operators.Traversal.traverse
                                     @ Data.Array.Repa.Repr.Delayed.D
                                     @ Data.Array.Repa.Index.DIM2
                                     @ Data.Array.Repa.Index.DIM2
                                     @ (Graphics.Image.Interface.Pixel cs1 e1)
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                        @ (Graphics.Image.Interface.Pixel cs1 e1))
                                     Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                                     nt
                                       `cast`
                                     (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                             cs1
                                                                                                                             e1>_N)
                                     (GHC.Base.id @ Data.Array.Repa.Index.DIM2)
                                     (\ (getPx :: Data.Array.Repa.Index.DIM2
                                                  -> Graphics.Image.Interface.Pixel cs1 e1)[OneShot]
                                        (sh :: Data.Array.Repa.Index.DIM2) ->
                                      case sh of sh2 { Data.Array.Repa.Index.:. ipv2 ipv3 ->
                                      case getPx sh2 of px1 { DEFAULT ->
                                      f (case ipv2 of wild4 { Data.Array.Repa.Index.:. ds13 i ->
                                         (i, ipv3) })
                                        px1
                                        (case arr2
                                                `cast`
                                              (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                cs2
                                                                                                                                e2>_N) of wild4 { Data.Array.Repa.Repr.Delayed.ADelayed sh3 f2 ->
                                         f2
                                           (Data.Array.Repa.Index.$fShape:._$cfromIndex
                                              @ (Data.Array.Repa.Index.DIM0
                                                 Data.Array.Repa.Index.:. GHC.Types.Int)
                                              Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                              sh3
                                              (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                                 @ (Data.Array.Repa.Index.DIM0
                                                    Data.Array.Repa.Index.:. GHC.Types.Int)
                                                 Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                                 sh3
                                                 (Data.Array.Repa.Index.$W:.
                                                    @ (Data.Array.Repa.Index.Z
                                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                                    @ GHC.Types.Int
                                                    (Data.Array.Repa.Index.$W:.
                                                       @ Data.Array.Repa.Index.Z
                                                       @ GHC.Types.Int
                                                       Data.Array.Repa.Index.Z
                                                       (GHC.Types.I# 0#))
                                                    (GHC.Types.I# 0#)))) }) } })) } } } } } } }
                  } in
                  case ds2 of wild { Data.Array.Repa.Index.:. ds4 ds5 ->
                  case ds4 of wild1 { Data.Array.Repa.Index.:. ds6 ds7 ->
                  case ds7 of wild2 { GHC.Types.I# ds8 ->
                  case ds8 of ds9 {
                    DEFAULT -> fail GHC.Prim.void#
                    1#
                    -> case ds5 of wild3 { GHC.Types.I# ds10 ->
                       case ds10 of ds11 {
                         DEFAULT -> fail GHC.Prim.void#
                         1#
                         -> case arr2
                                   `cast`
                                 (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                   cs2
                                                                                                                   e2>_N) of nt { Data.Array.Repa.Repr.Delayed.ADelayed ipv ipv1 ->
                            Graphics.Image.Interface.Repa.Generic.$WRDImage
                              @ Data.Array.Repa.Repr.Unboxed.U
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              (Data.Array.Repa.Operators.Traversal.traverse
                                 @ Data.Array.Repa.Repr.Delayed.D
                                 @ Data.Array.Repa.Index.DIM2
                                 @ Data.Array.Repa.Index.DIM2
                                 @ (Graphics.Image.Interface.Pixel cs2 e2)
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                    @ (Graphics.Image.Interface.Pixel cs2 e2))
                                 Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                                 nt
                                   `cast`
                                 (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                         cs2
                                                                                                                         e2>_N)
                                 (GHC.Base.id @ Data.Array.Repa.Index.DIM2)
                                 (\ (getPx :: Data.Array.Repa.Index.DIM2
                                              -> Graphics.Image.Interface.Pixel cs2 e2)[OneShot]
                                    (sh :: Data.Array.Repa.Index.DIM2) ->
                                  case sh of sh2 { Data.Array.Repa.Index.:. ipv2 ipv3 ->
                                  f (case ipv2 of wild4 { Data.Array.Repa.Index.:. ds12 i ->
                                     (i, ipv3) })
                                    (case arr1
                                            `cast`
                                          (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                            cs1
                                                                                                                            e1>_N) of wild4 { Data.Array.Repa.Repr.Delayed.ADelayed sh3 f2 ->
                                     f2
                                       (Data.Array.Repa.Index.$fShape:._$cfromIndex
                                          @ (Data.Array.Repa.Index.DIM0
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                          sh3
                                          (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                             @ (Data.Array.Repa.Index.DIM0
                                                Data.Array.Repa.Index.:. GHC.Types.Int)
                                             Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                             sh3
                                             (Data.Array.Repa.Index.$W:.
                                                @ (Data.Array.Repa.Index.Z
                                                   Data.Array.Repa.Index.:. GHC.Types.Int)
                                                @ GHC.Types.Int
                                                (Data.Array.Repa.Index.$W:.
                                                   @ Data.Array.Repa.Index.Z
                                                   @ GHC.Types.Int
                                                   Data.Array.Repa.Index.Z
                                                   (GHC.Types.I# 0#))
                                                (GHC.Types.I# 0#)))) })
                                    (getPx sh2) })) } } } } } } } } })
                   `cast`
                 (<(GHC.Types.Int, GHC.Types.Int)
                   -> Graphics.Image.Interface.Pixel cs1 e1
                   -> Graphics.Image.Interface.Pixel cs2 e2
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2>_R
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
50815b17255a2e79e188ef881852af1d
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cmakeImage ::
    (GHC.Types.Int, GHC.Types.Int)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 2,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,C(U)>m2,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (sz :: (GHC.Types.Int, GHC.Types.Int))
                   (f :: (GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case sz of sz1 { (,) ipv ipv1 ->
                 let {
                   $j1 :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double
                     <join 0>
                   = case GHC.Err.error
                            @ 'GHC.Types.LiftedRep
                            @ (GHC.Types.Int, GHC.Types.Int)
                            Graphics.Image.Interface.checkDims1
                              `cast`
                            (Sym (GHC.Classes.N:IP[0]
                                      <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                            (GHC.Base.augment
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n1 :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ GHC.Types.Char
                                  @ b
                                  c
                                  n1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b1
                                              (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                              (n2 :: b1)[OneShot] ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b1
                                              "Graphics.Image.Interface.Repa.Generic.makeImageR"#
                                              c1
                                              n2))
                                        GHC.Show.$fShow[]1)))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n1 :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     ": dimensions are expected to be positive: "#
                                     c
                                     n1)
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShow(,)1
                                     sz1
                                     (GHC.Types.[] @ GHC.Types.Char))))
                     ret_ty (Graphics.Image.Interface.Image
                               Graphics.Image.Interface.Repa.Unboxed.RPU
                               Graphics.Image.ColorSpace.Y.Y
                               GHC.Types.Double)
                     of {}
                 } in
                 case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild1 {
                   GHC.Types.False
                   -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild2 {
                        GHC.Types.False
                        -> (Graphics.Image.Interface.Repa.Generic.$WRDImage
                              @ Data.Array.Repa.Repr.Unboxed.U
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              (Data.Array.Repa.Repr.Delayed.$WADelayed
                                 @ Data.Array.Repa.Index.DIM2
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 (Data.Array.Repa.Index.$W:.
                                    @ (Data.Array.Repa.Index.Z
                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                    @ GHC.Types.Int
                                    (Data.Array.Repa.Index.$W:.
                                       @ Data.Array.Repa.Index.Z
                                       @ GHC.Types.Int
                                       Data.Array.Repa.Index.Z
                                       ipv)
                                    ipv1)
                                 (\ (x :: Data.Array.Repa.Index.DIM2) ->
                                  f (Graphics.Image.Interface.Repa.Generic.sh2ix x))))
                             `cast`
                           (Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                     <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                        GHC.Types.True -> $j1 }
                   GHC.Types.True -> $j1 } }) -}
b366b7517f7e6a3525109c977c3f91ee
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cmakeImageWindowed ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 5,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,C(U)><L,C(U)>m2,
     Inline: (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ (sz :: (GHC.Types.Int, GHC.Types.Int))
                   (wIx :: (GHC.Types.Int, GHC.Types.Int))
                   (wSz :: (GHC.Types.Int, GHC.Types.Int))
                   (f :: (GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case sz of sz1 { (,) ipv ipv1 ->
                 case wIx of wIx1 { (,) ipv2 ipv3 ->
                 case wSz of wSz1 { (,) ipv4 ipv5 ->
                 (\ (x :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                  let {
                    $j1 :: Graphics.Image.Interface.Repa.Generic.RImage
                             Data.Array.Repa.Repr.Unboxed.U
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 0>
                    = case GHC.Err.error
                             @ 'GHC.Types.LiftedRep
                             @ (GHC.Types.Int, GHC.Types.Int)
                             Graphics.Image.Interface.checkDims1
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n1 :: b)[OneShot] ->
                                 GHC.Base.foldr
                                   @ GHC.Types.Char
                                   @ b
                                   c
                                   n1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Show.showLitString
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1
                                               (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                               (n :: b1)[OneShot] ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b1
                                               "Graphics.Image.Interface.Repa.Generic.makeImageWindowedR"#
                                               c1
                                               n))
                                         GHC.Show.$fShow[]1)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      ": dimensions are expected to be positive: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShow(,)_$cshowsPrec
                                      @ GHC.Types.Int
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShow(,)1
                                      sz1
                                      (GHC.Types.[] @ GHC.Types.Char))))
                      ret_ty (Graphics.Image.Interface.Repa.Generic.RImage
                                Data.Array.Repa.Repr.Unboxed.U
                                (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      of {}
                  } in
                  case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild1 {
                    GHC.Types.False
                    -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild2 {
                         GHC.Types.False
                         -> case Data.Array.Repa.Index.$W:.
                                   @ (Data.Array.Repa.Index.Z
                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                   @ GHC.Types.Int
                                   (Data.Array.Repa.Index.$W:.
                                      @ Data.Array.Repa.Index.Z
                                      @ GHC.Types.Int
                                      Data.Array.Repa.Index.Z
                                      ipv)
                                   ipv1 of sh { Data.Array.Repa.Index.:. ipv6 ipv7 ->
                            let {
                              arrBorder :: Data.Array.Repa.Base.Array
                                             Data.Array.Repa.Repr.Delayed.D
                                             Data.Array.Repa.Index.DIM2
                                             (Graphics.Image.Interface.Pixel
                                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              = Data.Array.Repa.Repr.Delayed.$WADelayed
                                  @ Data.Array.Repa.Index.DIM2
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  sh
                                  (\ (x1 :: Data.Array.Repa.Index.DIM2) ->
                                   x (Graphics.Image.Interface.Repa.Generic.sh2ix x1))
                            } in
                            case ipv6 of wild { Data.Array.Repa.Index.:. ds m ->
                            let {
                              ds1 :: GHC.Types.Int
                              = case ipv4 of wild4 { GHC.Types.I# x1 ->
                                case ipv2 of wild5 { GHC.Types.I# y ->
                                GHC.Types.I# (GHC.Prim.+# x1 y) } }
                            } in
                            let {
                              ds2 :: GHC.Types.Int
                              = case ipv5 of wild4 { GHC.Types.I# x1 ->
                                case ipv3 of wild5 { GHC.Types.I# y ->
                                GHC.Types.I# (GHC.Prim.+# x1 y) } }
                            } in
                            let {
                              inInternal :: ((Data.Array.Repa.Index.Z
                                              Data.Array.Repa.Index.:. GHC.Types.Int)
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                            -> GHC.Types.Bool
                                {- Arity: 1, Inline: (sat-args=1),
                                   Unfolding: InlineRule (1, False, False)
                                              (\ (ds3 :: (Data.Array.Repa.Index.Z
                                                          Data.Array.Repa.Index.:. GHC.Types.Int)
                                                         Data.Array.Repa.Index.:. GHC.Types.Int) ->
                                               case ds3 of wild4 { Data.Array.Repa.Index.:. ds4 j ->
                                               case ds4 of wild5 { Data.Array.Repa.Index.:. ds5 i ->
                                               case GHC.Classes.geInt i ipv2 of wild6 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> case GHC.Classes.ltInt i ds1 of wild7 {
                                                      GHC.Types.False -> GHC.Types.False
                                                      GHC.Types.True
                                                      -> case GHC.Classes.geInt j ipv3 of wild8 {
                                                           GHC.Types.False -> GHC.Types.False
                                                           GHC.Types.True
                                                           -> GHC.Classes.ltInt j ds2 } } } } }) -}
                              = \ (ds3 :: (Data.Array.Repa.Index.Z
                                           Data.Array.Repa.Index.:. GHC.Types.Int)
                                          Data.Array.Repa.Index.:. GHC.Types.Int) ->
                                case ds3 of wild4 { Data.Array.Repa.Index.:. ds4 j ->
                                case ds4 of wild5 { Data.Array.Repa.Index.:. ds5 i ->
                                case GHC.Classes.geInt i ipv2 of wild6 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Classes.ltInt i ds1 of wild7 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case GHC.Classes.geInt j ipv3 of wild8 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True -> GHC.Classes.ltInt j ds2 } } } } }
                            } in
                            let {
                              inBorder :: ((Data.Array.Repa.Index.Z
                                            Data.Array.Repa.Index.:. GHC.Types.Int)
                                           Data.Array.Repa.Index.:. GHC.Types.Int)
                                          -> GHC.Types.Bool
                                {- Arity: 1, Inline: (sat-args=0),
                                   Unfolding: InlineRule (0, False, False)
                                              (\ (x1 :: (Data.Array.Repa.Index.Z
                                                         Data.Array.Repa.Index.:. GHC.Types.Int)
                                                        Data.Array.Repa.Index.:. GHC.Types.Int) ->
                                               case x1 of wild4 { Data.Array.Repa.Index.:. ds3 j ->
                                               case ds3 of wild5 { Data.Array.Repa.Index.:. ds4 i ->
                                               case GHC.Classes.geInt i ipv2 of wild6 {
                                                 GHC.Types.False -> GHC.Types.True
                                                 GHC.Types.True
                                                 -> case GHC.Classes.ltInt i ds1 of wild7 {
                                                      GHC.Types.False -> GHC.Types.True
                                                      GHC.Types.True
                                                      -> case GHC.Classes.geInt j ipv3 of wild8 {
                                                           GHC.Types.False -> GHC.Types.True
                                                           GHC.Types.True
                                                           -> case GHC.Classes.ltInt
                                                                     j
                                                                     ds2 of wild9 {
                                                                GHC.Types.False -> GHC.Types.True
                                                                GHC.Types.True
                                                                -> GHC.Types.False } } } } } }) -}
                              = \ (x1 :: (Data.Array.Repa.Index.Z
                                          Data.Array.Repa.Index.:. GHC.Types.Int)
                                         Data.Array.Repa.Index.:. GHC.Types.Int) ->
                                case x1 of wild4 { Data.Array.Repa.Index.:. ds3 j ->
                                case ds3 of wild5 { Data.Array.Repa.Index.:. ds4 i ->
                                case GHC.Classes.geInt i ipv2 of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True
                                  -> case GHC.Classes.ltInt i ds1 of wild7 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True
                                       -> case GHC.Classes.geInt j ipv3 of wild8 {
                                            GHC.Types.False -> GHC.Types.True
                                            GHC.Types.True
                                            -> case GHC.Classes.ltInt j ds2 of wild9 {
                                                 GHC.Types.False -> GHC.Types.True
                                                 GHC.Types.True -> GHC.Types.False } } } } } }
                            } in
                            case ipv7 of wild4 { GHC.Types.I# x1 ->
                            case ds2 of wild5 { GHC.Types.I# y ->
                            case m of wild6 { GHC.Types.I# x2 ->
                            case ds1 of wild7 { GHC.Types.I# y1 ->
                            case (Data.Array.Repa.Repr.Partitioned.$WAPart
                                    @ Data.Array.Repa.Repr.Delayed.D
                                    @ (Data.Array.Repa.Repr.Partitioned.P
                                         Data.Array.Repa.Repr.Delayed.D
                                         (Data.Array.Repa.Repr.Partitioned.P
                                            Data.Array.Repa.Repr.Delayed.D
                                            (Data.Array.Repa.Repr.Partitioned.P
                                               Data.Array.Repa.Repr.Delayed.D
                                               (Data.Array.Repa.Repr.Partitioned.P
                                                  Data.Array.Repa.Repr.Delayed.D
                                                  Data.Array.Repa.Repr.Undefined.X))))
                                    @ Data.Array.Repa.Index.DIM2
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    sh
                                    (Data.Array.Repa.Repr.Partitioned.$WRange
                                       @ ((Data.Array.Repa.Index.Z
                                           Data.Array.Repa.Index.:. GHC.Types.Int)
                                          Data.Array.Repa.Index.:. GHC.Types.Int)
                                       (Data.Array.Repa.Index.$W:.
                                          @ (Data.Array.Repa.Index.Z
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          @ GHC.Types.Int
                                          (Data.Array.Repa.Index.$W:.
                                             @ Data.Array.Repa.Index.Z
                                             @ GHC.Types.Int
                                             Data.Array.Repa.Index.Z
                                             ipv2)
                                          ipv3)
                                       (Data.Array.Repa.Index.$W:.
                                          @ (Data.Array.Repa.Index.Z
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          @ GHC.Types.Int
                                          (Data.Array.Repa.Index.$W:.
                                             @ Data.Array.Repa.Index.Z
                                             @ GHC.Types.Int
                                             Data.Array.Repa.Index.Z
                                             ipv4)
                                          ipv5)
                                       inInternal)
                                    (Data.Array.Repa.Repr.Delayed.$WADelayed
                                       @ Data.Array.Repa.Index.DIM2
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       sh
                                       (\ (x3 :: Data.Array.Repa.Index.DIM2) ->
                                        f (Graphics.Image.Interface.Repa.Generic.sh2ix x3)))
                                    (Data.Array.Repa.Repr.Partitioned.$WAPart
                                       @ Data.Array.Repa.Repr.Delayed.D
                                       @ (Data.Array.Repa.Repr.Partitioned.P
                                            Data.Array.Repa.Repr.Delayed.D
                                            (Data.Array.Repa.Repr.Partitioned.P
                                               Data.Array.Repa.Repr.Delayed.D
                                               (Data.Array.Repa.Repr.Partitioned.P
                                                  Data.Array.Repa.Repr.Delayed.D
                                                  Data.Array.Repa.Repr.Undefined.X)))
                                       @ Data.Array.Repa.Index.DIM2
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       sh
                                       (Data.Array.Repa.Repr.Partitioned.$WRange
                                          @ ((Data.Array.Repa.Index.Z
                                              Data.Array.Repa.Index.:. GHC.Types.Int)
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          (Data.Array.Repa.Index.$W:.
                                             @ (Data.Array.Repa.Index.Z
                                                Data.Array.Repa.Index.:. GHC.Types.Int)
                                             @ GHC.Types.Int
                                             (Data.Array.Repa.Index.$W:.
                                                @ Data.Array.Repa.Index.Z
                                                @ GHC.Types.Int
                                                Data.Array.Repa.Index.Z
                                                (GHC.Types.I# 0#))
                                             (GHC.Types.I# 0#))
                                          (Data.Array.Repa.Index.$W:.
                                             @ (Data.Array.Repa.Index.Z
                                                Data.Array.Repa.Index.:. GHC.Types.Int)
                                             @ GHC.Types.Int
                                             (Data.Array.Repa.Index.$W:.
                                                @ Data.Array.Repa.Index.Z
                                                @ GHC.Types.Int
                                                Data.Array.Repa.Index.Z
                                                ipv2)
                                             wild4)
                                          inBorder)
                                       arrBorder
                                       (Data.Array.Repa.Repr.Partitioned.$WAPart
                                          @ Data.Array.Repa.Repr.Delayed.D
                                          @ (Data.Array.Repa.Repr.Partitioned.P
                                               Data.Array.Repa.Repr.Delayed.D
                                               (Data.Array.Repa.Repr.Partitioned.P
                                                  Data.Array.Repa.Repr.Delayed.D
                                                  Data.Array.Repa.Repr.Undefined.X))
                                          @ Data.Array.Repa.Index.DIM2
                                          @ (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                          sh
                                          (Data.Array.Repa.Repr.Partitioned.$WRange
                                             @ ((Data.Array.Repa.Index.Z
                                                 Data.Array.Repa.Index.:. GHC.Types.Int)
                                                Data.Array.Repa.Index.:. GHC.Types.Int)
                                             (Data.Array.Repa.Index.$W:.
                                                @ (Data.Array.Repa.Index.Z
                                                   Data.Array.Repa.Index.:. GHC.Types.Int)
                                                @ GHC.Types.Int
                                                (Data.Array.Repa.Index.$W:.
                                                   @ Data.Array.Repa.Index.Z
                                                   @ GHC.Types.Int
                                                   Data.Array.Repa.Index.Z
                                                   ipv2)
                                                (GHC.Types.I# 0#))
                                             (Data.Array.Repa.Index.$W:.
                                                @ (Data.Array.Repa.Index.Z
                                                   Data.Array.Repa.Index.:. GHC.Types.Int)
                                                @ GHC.Types.Int
                                                (Data.Array.Repa.Index.$W:.
                                                   @ Data.Array.Repa.Index.Z
                                                   @ GHC.Types.Int
                                                   Data.Array.Repa.Index.Z
                                                   ipv4)
                                                ipv3)
                                             inBorder)
                                          arrBorder
                                          (Data.Array.Repa.Repr.Partitioned.$WAPart
                                             @ Data.Array.Repa.Repr.Delayed.D
                                             @ (Data.Array.Repa.Repr.Partitioned.P
                                                  Data.Array.Repa.Repr.Delayed.D
                                                  Data.Array.Repa.Repr.Undefined.X)
                                             @ Data.Array.Repa.Index.DIM2
                                             @ (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                             sh
                                             (Data.Array.Repa.Repr.Partitioned.$WRange
                                                @ ((Data.Array.Repa.Index.Z
                                                    Data.Array.Repa.Index.:. GHC.Types.Int)
                                                   Data.Array.Repa.Index.:. GHC.Types.Int)
                                                (Data.Array.Repa.Index.$W:.
                                                   @ (Data.Array.Repa.Index.Z
                                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                                   @ GHC.Types.Int
                                                   (Data.Array.Repa.Index.$W:.
                                                      @ Data.Array.Repa.Index.Z
                                                      @ GHC.Types.Int
                                                      Data.Array.Repa.Index.Z
                                                      ipv2)
                                                   wild5)
                                                (Data.Array.Repa.Index.$W:.
                                                   @ (Data.Array.Repa.Index.Z
                                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                                   @ GHC.Types.Int
                                                   (Data.Array.Repa.Index.$W:.
                                                      @ Data.Array.Repa.Index.Z
                                                      @ GHC.Types.Int
                                                      Data.Array.Repa.Index.Z
                                                      ipv4)
                                                   (GHC.Types.I# (GHC.Prim.-# x1 y)))
                                                inBorder)
                                             arrBorder
                                             (Data.Array.Repa.Repr.Partitioned.$WAPart
                                                @ Data.Array.Repa.Repr.Delayed.D
                                                @ Data.Array.Repa.Repr.Undefined.X
                                                @ Data.Array.Repa.Index.DIM2
                                                @ (Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                                sh
                                                (Data.Array.Repa.Repr.Partitioned.$WRange
                                                   @ ((Data.Array.Repa.Index.Z
                                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                                   (Data.Array.Repa.Index.$W:.
                                                      @ (Data.Array.Repa.Index.Z
                                                         Data.Array.Repa.Index.:. GHC.Types.Int)
                                                      @ GHC.Types.Int
                                                      (Data.Array.Repa.Index.$W:.
                                                         @ Data.Array.Repa.Index.Z
                                                         @ GHC.Types.Int
                                                         Data.Array.Repa.Index.Z
                                                         wild7)
                                                      (GHC.Types.I# 0#))
                                                   (Data.Array.Repa.Index.$W:.
                                                      @ (Data.Array.Repa.Index.Z
                                                         Data.Array.Repa.Index.:. GHC.Types.Int)
                                                      @ GHC.Types.Int
                                                      (Data.Array.Repa.Index.$W:.
                                                         @ Data.Array.Repa.Index.Z
                                                         @ GHC.Types.Int
                                                         Data.Array.Repa.Index.Z
                                                         (GHC.Types.I# (GHC.Prim.-# x2 y1)))
                                                      wild4)
                                                   inBorder)
                                                arrBorder
                                                (Data.Array.Repa.Repr.Undefined.$WAUndefined
                                                   @ Data.Array.Repa.Index.DIM2
                                                   @ (Graphics.Image.Interface.Pixel
                                                        Graphics.Image.ColorSpace.Y.Y
                                                        GHC.Types.Double)
                                                   sh))))))
                                   `cast`
                                 (Data.Array.Repa.Repr.Partitioned.D:R:ArrayPshe0[0]
                                      <Data.Array.Repa.Repr.Delayed.D>_N
                                      <Data.Array.Repa.Repr.Partitioned.P
                                         Data.Array.Repa.Repr.Delayed.D
                                         (Data.Array.Repa.Repr.Partitioned.P
                                            Data.Array.Repa.Repr.Delayed.D
                                            (Data.Array.Repa.Repr.Partitioned.P
                                               Data.Array.Repa.Repr.Delayed.D
                                               (Data.Array.Repa.Repr.Partitioned.P
                                                  Data.Array.Repa.Repr.Delayed.D
                                                  Data.Array.Repa.Repr.Undefined.X)))>_N <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                                                                           GHC.Types.Double>_N) of wild8 { Data.Array.Repa.Repr.Partitioned.APart sh2 dt4 dt5 dt6 ds3 ds4 ->
                            Graphics.Image.Interface.Repa.Generic.$WRDImage
                              @ Data.Array.Repa.Repr.Unboxed.U
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              (Data.Array.Repa.Repr.Delayed.$WADelayed
                                 @ Data.Array.Repa.Index.DIM2
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 sh2
                                 (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                                  let {
                                    ix1 :: Data.Array.Repa.Index.DIM2
                                    = Data.Array.Repa.Index.$fShape:._$cfromIndex
                                        @ (Data.Array.Repa.Index.DIM0
                                           Data.Array.Repa.Index.:. GHC.Types.Int)
                                        Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                        sh2
                                        (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                           @ (Data.Array.Repa.Index.DIM0
                                              Data.Array.Repa.Index.:. GHC.Types.Int)
                                           Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                           sh2
                                           ix)
                                  } in
                                  case dt6 ix1 of wild9 {
                                    GHC.Types.False
                                    -> case ds4
                                              `cast`
                                            (Data.Array.Repa.Repr.Partitioned.D:R:ArrayPshe0[0]
                                                 <Data.Array.Repa.Repr.Delayed.D>_N
                                                 <Data.Array.Repa.Repr.Partitioned.P
                                                    Data.Array.Repa.Repr.Delayed.D
                                                    (Data.Array.Repa.Repr.Partitioned.P
                                                       Data.Array.Repa.Repr.Delayed.D
                                                       (Data.Array.Repa.Repr.Partitioned.P
                                                          Data.Array.Repa.Repr.Delayed.D
                                                          Data.Array.Repa.Repr.Undefined.X))>_N <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                                                  GHC.Types.Double>_N) of wild10 { Data.Array.Repa.Repr.Partitioned.APart ds5 dt7 dt8 dt9 arr1 arr2 ->
                                       case dt9 ix1 of wild11 {
                                         GHC.Types.False
                                         -> case arr2
                                                   `cast`
                                                 (Data.Array.Repa.Repr.Partitioned.D:R:ArrayPshe0[0]
                                                      <Data.Array.Repa.Repr.Delayed.D>_N
                                                      <Data.Array.Repa.Repr.Partitioned.P
                                                         Data.Array.Repa.Repr.Delayed.D
                                                         (Data.Array.Repa.Repr.Partitioned.P
                                                            Data.Array.Repa.Repr.Delayed.D
                                                            Data.Array.Repa.Repr.Undefined.X)>_N <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                                                   GHC.Types.Double>_N) of wild12 { Data.Array.Repa.Repr.Partitioned.APart ds6 dt10 dt11 dt12 arr4 arr5 ->
                                            case dt12 ix1 of wild13 {
                                              GHC.Types.False
                                              -> case arr5
                                                        `cast`
                                                      (Data.Array.Repa.Repr.Partitioned.D:R:ArrayPshe0[0]
                                                           <Data.Array.Repa.Repr.Delayed.D>_N
                                                           <Data.Array.Repa.Repr.Partitioned.P
                                                              Data.Array.Repa.Repr.Delayed.D
                                                              Data.Array.Repa.Repr.Undefined.X>_N <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                                                    GHC.Types.Double>_N) of wild14 { Data.Array.Repa.Repr.Partitioned.APart ds7 dt13 dt14 dt15 arr6 arr7 ->
                                                 case dt15 ix1 of wild15 {
                                                   GHC.Types.False
                                                   -> case arr7
                                                             `cast`
                                                           (Data.Array.Repa.Repr.Partitioned.D:R:ArrayPshe0[0]
                                                                <Data.Array.Repa.Repr.Delayed.D>_N
                                                                <Data.Array.Repa.Repr.Undefined.X>_N <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                                                                                       GHC.Types.Double>_N) of wild16 { Data.Array.Repa.Repr.Partitioned.APart ds8 dt16 dt17 dt18 arr8 arr9 ->
                                                      case dt18 ix1 of wild17 {
                                                        GHC.Types.False
                                                        -> GHC.Err.error
                                                             @ 'GHC.Types.LiftedRep
                                                             @ (Graphics.Image.Interface.Pixel
                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                  GHC.Types.Double)
                                                             (GHC.Stack.Types.PushCallStack
                                                                (GHC.Base.build
                                                                   @ GHC.Types.Char
                                                                   (\ @ b ->
                                                                    GHC.CString.unpackFoldrCString#
                                                                      @ b
                                                                      "error"#))
                                                                (GHC.Stack.Types.SrcLoc
                                                                   (GHC.Base.build
                                                                      @ GHC.Types.Char
                                                                      (\ @ b ->
                                                                       GHC.CString.unpackFoldrCString#
                                                                         @ b
                                                                         "repa-3.4.1.4-IalckuCIRr8IxyCNFyzcPj"#))
                                                                   (GHC.Base.build
                                                                      @ GHC.Types.Char
                                                                      (\ @ b ->
                                                                       GHC.CString.unpackFoldrCString#
                                                                         @ b
                                                                         "Data.Array.Repa.Repr.Undefined"#))
                                                                   (GHC.Base.build
                                                                      @ GHC.Types.Char
                                                                      (\ @ b ->
                                                                       GHC.CString.unpackFoldrCString#
                                                                         @ b
                                                                         "./Data/Array/Repa/Repr/Undefined.hs"#))
                                                                   (GHC.Types.I# 32#)
                                                                   (GHC.Types.I# 11#)
                                                                   (GHC.Types.I# 32#)
                                                                   (GHC.Types.I# 54#))
                                                                GHC.Stack.Types.EmptyCallStack)
                                                               `cast`
                                                             (Sym (GHC.Classes.N:IP[0]
                                                                       <"callStack">_N
                                                                       <GHC.Stack.Types.CallStack>_N))
                                                             (GHC.Base.build
                                                                @ GHC.Types.Char
                                                                (\ @ b ->
                                                                 GHC.CString.unpackFoldrCString#
                                                                   @ b
                                                                   "Repa: array element is undefined."#))
                                                        GHC.Types.True
                                                        -> case arr8
                                                                  `cast`
                                                                (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                  GHC.Types.Double>_N) of wild18 { Data.Array.Repa.Repr.Delayed.ADelayed ds9 f1 ->
                                                           f1 ix1 } } }
                                                   GHC.Types.True
                                                   -> case arr6
                                                             `cast`
                                                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                                                             GHC.Types.Double>_N) of wild16 { Data.Array.Repa.Repr.Delayed.ADelayed ds8 f1 ->
                                                      f1 ix1 } } }
                                              GHC.Types.True
                                              -> case arr4
                                                        `cast`
                                                      (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                        Graphics.Image.ColorSpace.Y.Y
                                                                                                                                        GHC.Types.Double>_N) of wild14 { Data.Array.Repa.Repr.Delayed.ADelayed ds7 f1 ->
                                                 f1 ix1 } } }
                                         GHC.Types.True
                                         -> case arr1
                                                   `cast`
                                                 (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                                                   GHC.Types.Double>_N) of wild12 { Data.Array.Repa.Repr.Delayed.ADelayed ds6 f1 ->
                                            f1 ix1 } } }
                                    GHC.Types.True
                                    -> case ds3
                                              `cast`
                                            (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                                                                              GHC.Types.Double>_N) of wild10 { Data.Array.Repa.Repr.Delayed.ADelayed ds5 f1 ->
                                       f1 ix1 } })) } } } } } } }
                         GHC.Types.True -> $j1 }
                    GHC.Types.True -> $j1 })
                   `cast`
                 (<(GHC.Types.Int, GHC.Types.Int)
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) } } }) -}
67255fbb41bdfbdcf944e267fb681023
  $s$fArrayRPUcse_$s$fArrayRPUcse_$cmap ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Repa.Unboxed.RPU cs' e' =>
    (Graphics.Image.Interface.Pixel cs' e'
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU cs' e'
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 3,
     Strictness: <L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(U)><S,1*U>m2,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ cs'
                   @ e'
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Repa.Unboxed.RPU cs' e') ->
                 let {
                   $dMArray :: Graphics.Image.Interface.MArray
                                 (Graphics.Image.Interface.Manifest
                                    Graphics.Image.Interface.Repa.Unboxed.RPU)
                                 cs'
                                 e'
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs'
                       @ e'
                       $dArray
                 } in
                 let {
                   $dBaseArray1 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs'
                                     e'
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs'
                       @ e'
                       $dMArray
                 } in
                 let {
                   $dColorSpace :: Graphics.Image.Interface.ColorSpace cs' e'
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs'
                       @ e'
                       $dBaseArray1
                 } in
                 let {
                   $dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                (Graphics.Image.Interface.Pixel cs' e')
                   = Graphics.Image.Interface.Vector.Unboxing.$fUnboxPixel
                       @ cs'
                       @ e'
                       $dColorSpace
                 } in
                 let {
                   $dSource :: Data.Array.Repa.Base.Source
                                 Data.Array.Repa.Repr.Unboxed.U
                                 (Graphics.Image.Interface.Pixel cs' e')
                   = Data.Array.Repa.Repr.Unboxed.$fSourceUa
                       @ (Graphics.Image.Interface.Pixel cs' e')
                       $dUnbox
                 } in
                 (\ (f :: Graphics.Image.Interface.Pixel cs' e'
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU cs' e') ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs'>_N <e'>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                       <cs'>_N
                                                                                                       <e'>_N) of wild {
                    Graphics.Image.Interface.Repa.Generic.RTImage arr
                    -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                         @ Data.Array.Repa.Repr.Unboxed.U
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (Data.Array.Repa.Operators.Mapping.map
                            @ Data.Array.Repa.Index.DIM2
                            @ Data.Array.Repa.Repr.Unboxed.U
                            @ (Graphics.Image.Interface.Pixel cs' e')
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                            $dSource
                            f
                            arr)
                    Graphics.Image.Interface.Repa.Generic.RDImage arr
                    -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                         @ Data.Array.Repa.Repr.Unboxed.U
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (Data.Array.Repa.Operators.Mapping.map
                            @ Data.Array.Repa.Index.DIM2
                            @ Data.Array.Repa.Repr.Delayed.D
                            @ (Graphics.Image.Interface.Pixel cs' e')
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                            (Data.Array.Repa.Repr.Delayed.$fSourceDa
                               @ (Graphics.Image.Interface.Pixel cs' e'))
                            f
                            arr) })
                   `cast`
                 (<Graphics.Image.Interface.Pixel cs' e'
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Repa.Unboxed.RPU cs' e'>_R
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
82f21c390ac49ea162d7c20c2641c019
  $s$fArrayRPUcse_$s$fArrayRPUcse_$ctoManifest ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         (Graphics.Image.Interface.Manifest
            Graphics.Image.Interface.Repa.Unboxed.RPU)
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 1, Strictness: <S,U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 let {
                   $j1 :: GHC.Types.Int
                          -> GHC.Types.Int
                          -> Graphics.Image.Interface.Image
                               (Graphics.Image.Interface.Manifest
                                  Graphics.Image.Interface.Repa.Unboxed.RPU)
                               Graphics.Image.ColorSpace.Y.Y
                               GHC.Types.Double
                     <join 2> {- Arity: 2 -}
                   = \ (ipv :: GHC.Types.Int)[OneShot]
                       (ipv1 :: GHC.Types.Int)[OneShot] ->
                     let {
                       $j2 :: Data.Vector.Unboxed.Base.Vector
                                (Graphics.Image.Interface.Components
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              -> Graphics.Image.Interface.Image
                                   (Graphics.Image.Interface.Manifest
                                      Graphics.Image.Interface.Repa.Unboxed.RPU)
                                   Graphics.Image.ColorSpace.Y.Y
                                   GHC.Types.Double
                         <join 1> {- Arity: 1 -}
                       = \ (nt :: Data.Vector.Unboxed.Base.Vector
                                    (Graphics.Image.Interface.Components
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))[OneShot] ->
                         case ipv of wild1 { GHC.Types.I# x1 ->
                         case ipv1 of wild2 { GHC.Types.I# y ->
                         case GHC.Classes.eqInt
                                (GHC.Types.I# (GHC.Prim.*# x1 y))
                                (Data.Vector.Fusion.Bundle.Monadic.length
                                   @ Data.Vector.Fusion.Util.Id
                                   @ Data.Vector.Unboxed.Base.Vector
                                   @ (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                      @ Data.Vector.Fusion.Util.Id
                                      @ Data.Vector.Unboxed.Base.Vector
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      Data.Vector.Fusion.Util.$fMonadId
                                      Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                                      nt
                                        `cast`
                                      (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                 <GHC.Types.Double>_N))))
                                  `cast`
                                (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R) of wild3 {
                           GHC.Types.False
                           -> (Graphics.Image.Interface.Vector.Generic.errorVG
                                 @ (Graphics.Image.Interface.Vector.Generic.VGImage
                                      Data.Vector.Unboxed.Base.Vector
                                      (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "fromVectorVG"#))
                                 (GHC.Base.augment
                                    @ GHC.Types.Char
                                    (\ @ b
                                       (c :: GHC.Types.Char -> b -> b)[OneShot]
                                       (n1 :: b)[OneShot] ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       " image dimensions do not match the length of a vector: "#
                                       c
                                       n1)
                                    (GHC.Base.augment
                                       @ GHC.Types.Char
                                       (\ @ b
                                          (c :: GHC.Types.Char -> b -> b)[OneShot]
                                          (n1 :: b)[OneShot] ->
                                        GHC.Base.foldr
                                          @ GHC.Types.Char
                                          @ b
                                          c
                                          n1
                                          (GHC.Show.showSignedInt
                                             GHC.Show.$fShow(,)1
                                             wild1
                                             (GHC.Types.[] @ GHC.Types.Char)))
                                       (GHC.Base.augment
                                          @ GHC.Types.Char
                                          (\ @ b
                                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                                             (n1 :: b)[OneShot] ->
                                           GHC.CString.unpackFoldrCString# @ b " * "# c n1)
                                          (GHC.Base.augment
                                             @ GHC.Types.Char
                                             (\ @ b
                                                (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                (n1 :: b)[OneShot] ->
                                              GHC.Base.foldr
                                                @ GHC.Types.Char
                                                @ b
                                                c
                                                n1
                                                (GHC.Show.showSignedInt
                                                   GHC.Show.$fShow(,)1
                                                   wild2
                                                   (GHC.Types.[] @ GHC.Types.Char)))
                                             (GHC.Base.augment
                                                @ GHC.Types.Char
                                                (\ @ b
                                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                   (n1 :: b)[OneShot] ->
                                                 GHC.CString.unpackFoldrCString# @ b " /= "# c n1)
                                                (GHC.Show.showSignedInt
                                                   GHC.Show.$fShow(,)1
                                                   (Data.Vector.Fusion.Bundle.Monadic.length
                                                      @ Data.Vector.Fusion.Util.Id
                                                      @ Data.Vector.Unboxed.Base.Vector
                                                      @ (Graphics.Image.Interface.Pixel
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double)
                                                      Data.Vector.Fusion.Util.$fMonadId
                                                      (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                         @ Data.Vector.Fusion.Util.Id
                                                         @ Data.Vector.Unboxed.Base.Vector
                                                         @ (Graphics.Image.Interface.Pixel
                                                              Graphics.Image.ColorSpace.Y.Y
                                                              GHC.Types.Double)
                                                         Data.Vector.Fusion.Util.$fMonadId
                                                         Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                                                         nt
                                                           `cast`
                                                         (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                   <Graphics.Image.ColorSpace.Y.Y>_N
                                                                   <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                    <GHC.Types.Double>_N))))
                                                     `cast`
                                                   (Data.Vector.Fusion.Util.N:Id[0]
                                                        <GHC.Types.Int>_R)
                                                   (GHC.Types.[] @ GHC.Types.Char))))))))
                                `cast`
                              (Sym (Graphics.Image.Interface.Vector.Unboxed.N:R:ImageVUcse[0]
                                        <Graphics.Image.ColorSpace.Y.Y>_N
                                        <GHC.Types.Double>_N) ; (Sym (Graphics.Image.Interface.Vector.Unboxed.D:R:ImageVUcse0[0]) ; (Graphics.Image.Interface.Image
                                                                                                                                       (Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ManifestRPU[0])))_R) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                           GHC.Types.True
                           -> (Graphics.Image.Interface.Vector.Generic.$WVGImage
                                 @ Data.Vector.Unboxed.Base.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 wild1
                                 wild2
                                 nt
                                   `cast`
                                 (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                           <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                            <Graphics.Image.ColorSpace.Y.Y>_N
                                                                            <GHC.Types.Double>_N)))
                                `cast`
                              (Sym (Graphics.Image.Interface.Vector.Unboxed.N:R:ImageVUcse[0]
                                        <Graphics.Image.ColorSpace.Y.Y>_N
                                        <GHC.Types.Double>_N) ; (Sym (Graphics.Image.Interface.Vector.Unboxed.D:R:ImageVUcse0[0]) ; (Graphics.Image.Interface.Image
                                                                                                                                       (Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ManifestRPU[0])))_R) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) } } }
                     } in
                     case ds
                            `cast`
                          (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                  <GHC.Types.Double>_N) of wild1 {
                       Graphics.Image.Interface.Repa.Generic.RTImage ipv2
                       -> case ipv2
                                 `cast`
                               (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                                 GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed ds1 vec ->
                          $j2
                            vec
                              `cast`
                            (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                 <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                            <Graphics.Image.ColorSpace.Y.Y>_N
                                                            <GHC.Types.Double>_N) }
                       Graphics.Image.Interface.Repa.Generic.RDImage arr
                       -> case Data.Array.Repa.Eval.computeP
                                 @ Data.Array.Repa.Repr.Delayed.D
                                 @ Data.Array.Repa.Index.DIM2
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 @ Data.Array.Repa.Repr.Unboxed.U
                                 @ GHC.Base.Maybe
                                 (Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                 Lib.$s$fArrayRPUcse_$s$fTargetUe
                                 Lib.$s$fArrayRPUcse_$s$fSourceUa
                                 GHC.Base.$fMonadMaybe
                                 arr of wild2 {
                            GHC.Base.Nothing
                            -> case Graphics.Image.Interface.Repa.Generic.errorR
                                      @ (Data.Array.Repa.Base.Array
                                           Data.Array.Repa.Repr.Unboxed.U
                                           Data.Array.Repa.Index.DIM2
                                           (Graphics.Image.Interface.Pixel
                                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString# @ b "toVectorR"#))
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "impossible happened"#))
                               ret_ty (Graphics.Image.Interface.Image
                                         (Graphics.Image.Interface.Manifest
                                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                                         Graphics.Image.ColorSpace.Y.Y
                                         GHC.Types.Double)
                               of {}
                            GHC.Base.Just res
                            -> case res
                                      `cast`
                                    (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                      GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed ds1 vec ->
                               $j2
                                 vec
                                   `cast`
                                 (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                      <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                                                 <GHC.Types.Double>_N) } } }
                 } in
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of wild {
                   Graphics.Image.Interface.Repa.Generic.RTImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds1 ->
                      case sh2 of wild2 { Data.Array.Repa.Index.:. ds2 j ->
                      case ds2 of wild3 { Data.Array.Repa.Index.:. ds3 i -> $j1 i j } } }
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild1 { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds1 ->
                      case sh2 of wild2 { Data.Array.Repa.Index.:. ds2 j ->
                      case ds2 of wild3 { Data.Array.Repa.Index.:. ds3 i ->
                      $j1 i j } } } }) -}
e781c5724b125c4598e9352b8d90d45a
  $s$fArrayRPUcse_$s$fArrayRPUcse_$ctoVector ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Vector
         Graphics.Image.Interface.Repa.Unboxed.RPU
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 1, Strictness: <S,1*U>m, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of wild1 {
                   Graphics.Image.Interface.Repa.Generic.RTImage ipv
                   -> case ipv
                             `cast`
                           (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed ds1 vec ->
                      vec }
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> case Data.Array.Repa.Eval.computeP
                             @ Data.Array.Repa.Repr.Delayed.D
                             @ Data.Array.Repa.Index.DIM2
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             @ Data.Array.Repa.Repr.Unboxed.U
                             @ GHC.Base.Maybe
                             (Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                             Lib.$s$fArrayRPUcse_$s$fTargetUe
                             Lib.$s$fArrayRPUcse_$s$fSourceUa
                             GHC.Base.$fMonadMaybe
                             arr of wild2 {
                        GHC.Base.Nothing
                        -> case Graphics.Image.Interface.Repa.Generic.errorR
                                  @ (Data.Array.Repa.Base.Array
                                       Data.Array.Repa.Repr.Unboxed.U
                                       Data.Array.Repa.Index.DIM2
                                       (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "toVectorR"#))
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b ->
                                      GHC.CString.unpackFoldrCString# @ b "impossible happened"#))
                           ret_ty (Data.Vector.Unboxed.Base.Vector
                                     (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                           of {}
                        GHC.Base.Just res
                        -> case res
                                  `cast`
                                (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                                  GHC.Types.Double>_N) of wild { Data.Array.Repa.Repr.Unboxed.AUnboxed ds1 vec ->
                           vec } } })
                  `cast`
                (<Graphics.Image.Interface.Image
                    Graphics.Image.Interface.Repa.Unboxed.RPU
                    Graphics.Image.ColorSpace.Y.Y
                    GHC.Types.Double>_R
                 ->_R (Sub (Sym (Graphics.Image.Interface.Vector.Unboxed.D:R:VectorVU[0])) ; Sub (Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:VectorRPU[0]))) <Graphics.Image.Interface.Pixel
                                                                                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                    GHC.Types.Double>_N) -}
4714aaa2fac650900799944ef737cd23
  $s$fArrayRPUcse_$s$fArrayRPUcse_$ctranspose ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of wild {
                   Graphics.Image.Interface.Repa.Generic.RTImage arr
                   -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                        @ Data.Array.Repa.Repr.Unboxed.U
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        (Data.Array.Repa.Operators.IndexSpace.transpose
                           @ Data.Array.Repa.Index.DIM0
                           @ Data.Array.Repa.Repr.Unboxed.U
                           @ (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                           Data.Array.Repa.Index.$fShapeZ
                           Lib.$s$fArrayRPUcse_$s$fSourceUa
                           arr)
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                        @ Data.Array.Repa.Repr.Unboxed.U
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        (Data.Array.Repa.Operators.IndexSpace.transpose
                           @ Data.Array.Repa.Index.DIM0
                           @ Data.Array.Repa.Repr.Delayed.D
                           @ (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                           Data.Array.Repa.Index.$fShapeZ
                           (Data.Array.Repa.Repr.Delayed.$fSourceDa
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                           arr) })
                  `cast`
                (<Graphics.Image.Interface.Image
                    Graphics.Image.Interface.Repa.Unboxed.RPU
                    Graphics.Image.ColorSpace.Y.Y
                    GHC.Types.Double>_R
                 ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                               <Graphics.Image.ColorSpace.Y.Y>_N
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) -}
769af8a15a5e5e779e96d945dc0e6dc4
  $s$fArrayRPUcse_$s$fArrayRPUcse_$ctraverse ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Repa.Unboxed.RPU cs' e' =>
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU cs' e'
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int))
    -> (((GHC.Types.Int, GHC.Types.Int)
         -> Graphics.Image.Interface.Pixel cs' e')
        -> (GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 4,
     Strictness: <L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U><C(S(S(S)S(S))),1*C1(U(1*U(U),1*U(U)))><L,1*C1(C(U))>m2,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ cs'
                   @ e'
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Repa.Unboxed.RPU cs' e') ->
                 let {
                   $dMArray :: Graphics.Image.Interface.MArray
                                 (Graphics.Image.Interface.Manifest
                                    Graphics.Image.Interface.Repa.Unboxed.RPU)
                                 cs'
                                 e'
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs'
                       @ e'
                       $dArray
                 } in
                 let {
                   $dBaseArray1 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs'
                                     e'
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs'
                       @ e'
                       $dMArray
                 } in
                 let {
                   $dColorSpace :: Graphics.Image.Interface.ColorSpace cs' e'
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs'
                       @ e'
                       $dBaseArray1
                 } in
                 (\ (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU cs' e')
                    (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> (GHC.Types.Int, GHC.Types.Int))
                    (g :: ((GHC.Types.Int, GHC.Types.Int)
                           -> Graphics.Image.Interface.Pixel cs' e')
                          -> (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                  Graphics.Image.Interface.Repa.Generic.$WRDImage
                    @ Data.Array.Repa.Repr.Unboxed.U
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (Data.Array.Repa.Operators.Traversal.traverse
                       @ Data.Array.Repa.Repr.Delayed.D
                       @ Data.Array.Repa.Index.DIM2
                       @ Data.Array.Repa.Index.DIM2
                       @ (Graphics.Image.Interface.Pixel cs' e')
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       (Data.Array.Repa.Repr.Delayed.$fSourceDa
                          @ (Graphics.Image.Interface.Pixel cs' e'))
                       Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                       (case ds
                               `cast`
                             (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs'>_N <e'>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                             <cs'>_N
                                                                                                             <e'>_N) of wild {
                          Graphics.Image.Interface.Repa.Generic.RTImage arr
                          -> case arr
                                    `cast`
                                  (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                    cs'
                                                                                                                    e'>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds1 ->
                             Data.Array.Repa.Repr.Delayed.$WADelayed
                               @ Data.Array.Repa.Index.DIM2
                               @ (Graphics.Image.Interface.Pixel cs' e')
                               sh2
                               (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                                Data.Vector.Generic.unsafeIndex
                                  @ Data.Vector.Unboxed.Base.Vector
                                  @ (Graphics.Image.Interface.Pixel cs' e')
                                  (Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel
                                     @ cs'
                                     @ e'
                                     $dColorSpace)
                                  ds1
                                  (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                     @ (Data.Array.Repa.Index.DIM0
                                        Data.Array.Repa.Index.:. GHC.Types.Int)
                                     Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                     sh2
                                     ix)) }
                          Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr })
                       (\ (x :: Data.Array.Repa.Index.DIM2)[OneShot] ->
                        case f (Graphics.Image.Interface.Repa.Generic.sh2ix
                                  x) of wild { (,) m n ->
                        let {
                          $j1 :: (Data.Array.Repa.Index.Z
                                  Data.Array.Repa.Index.:. GHC.Types.Int)
                                 Data.Array.Repa.Index.:. GHC.Types.Int
                            <join 0>
                          = case GHC.Err.error
                                   @ 'GHC.Types.LiftedRep
                                   @ (GHC.Types.Int, GHC.Types.Int)
                                   Graphics.Image.Interface.checkDims1
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.Base.foldr
                                         @ GHC.Types.Char
                                         @ b
                                         c1
                                         n1
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)3
                                            (GHC.Show.showLitString
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b1
                                                     (c2 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                                     (n2 :: b1)[OneShot] ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b1
                                                     "Graphics.Image.Interface.Repa.Generic.traverseR"#
                                                     c2
                                                     n2))
                                               GHC.Show.$fShow[]1)))
                                      (GHC.Base.augment
                                         @ GHC.Types.Char
                                         (\ @ b
                                            (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                                            (n1 :: b)[OneShot] ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            ": dimensions are expected to be positive: "#
                                            c1
                                            n1)
                                         (GHC.Show.$fShow(,)_$cshowsPrec
                                            @ GHC.Types.Int
                                            @ GHC.Types.Int
                                            GHC.Show.$fShowInt
                                            GHC.Show.$fShowInt
                                            GHC.Show.$fShow(,)1
                                            wild
                                            (GHC.Types.[] @ GHC.Types.Char))))
                            ret_ty ((Data.Array.Repa.Index.Z
                                     Data.Array.Repa.Index.:. GHC.Types.Int)
                                    Data.Array.Repa.Index.:. GHC.Types.Int)
                            of {}
                        } in
                        case GHC.Classes.leInt m (GHC.Types.I# 0#) of wild1 {
                          GHC.Types.False
                          -> case GHC.Classes.leInt n (GHC.Types.I# 0#) of wild2 {
                               GHC.Types.False
                               -> Data.Array.Repa.Index.$W:.
                                    @ (Data.Array.Repa.Index.Z
                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                    @ GHC.Types.Int
                                    (Data.Array.Repa.Index.$W:.
                                       @ Data.Array.Repa.Index.Z
                                       @ GHC.Types.Int
                                       Data.Array.Repa.Index.Z
                                       m)
                                    n
                               GHC.Types.True -> $j1 }
                          GHC.Types.True -> $j1 } })
                       (\ (getPx :: Data.Array.Repa.Index.DIM2
                                    -> Graphics.Image.Interface.Pixel cs' e')[OneShot] ->
                        let {
                          f1 :: (GHC.Types.Int, GHC.Types.Int)
                                -> Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                          = g (\ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                               getPx (Graphics.Image.Interface.Repa.Generic.ix2sh x))
                        } in
                        \ (x :: Data.Array.Repa.Index.DIM2) ->
                        f1 (Graphics.Image.Interface.Repa.Generic.sh2ix x))))
                   `cast`
                 (<Graphics.Image.Interface.Image
                     Graphics.Image.Interface.Repa.Unboxed.RPU cs' e'>_R
                  ->_R <(GHC.Types.Int, GHC.Types.Int)
                        -> (GHC.Types.Int, GHC.Types.Int)>_R
                  ->_R <((GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel cs' e')
                        -> (GHC.Types.Int, GHC.Types.Int)
                        -> Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
0746f5888507b3cfc6616a6228c85b6a
  $s$fArrayRPUcse_$s$fArrayRPUcse_$ctraverse2 ::
    (Graphics.Image.Interface.Array
       Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1,
     Graphics.Image.Interface.Array
       Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) =>
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int))
    -> (((GHC.Types.Int, GHC.Types.Int)
         -> Graphics.Image.Interface.Pixel cs1 e1)
        -> ((GHC.Types.Int, GHC.Types.Int)
            -> Graphics.Image.Interface.Pixel cs2 e2)
        -> (GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 6,
     Strictness: <L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,1*U><C(C(S(S(S)S(S)))),1*C1(C1(U(1*U(U),1*U(U))))><L,1*C1(C1(C(U)))>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ cs1
                   @ e1
                   @ cs2
                   @ e2
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1)
                   ($dArray1 :: Graphics.Image.Interface.Array
                                  Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) ->
                 let {
                   $dMArray :: Graphics.Image.Interface.MArray
                                 (Graphics.Image.Interface.Manifest
                                    Graphics.Image.Interface.Repa.Unboxed.RPU)
                                 cs2
                                 e2
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs2
                       @ e2
                       $dArray1
                 } in
                 let {
                   $dBaseArray1 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs2
                                     e2
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs2
                       @ e2
                       $dMArray
                 } in
                 let {
                   $dColorSpace :: Graphics.Image.Interface.ColorSpace cs2 e2
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs2
                       @ e2
                       $dBaseArray1
                 } in
                 let {
                   $dMArray1 :: Graphics.Image.Interface.MArray
                                  (Graphics.Image.Interface.Manifest
                                     Graphics.Image.Interface.Repa.Unboxed.RPU)
                                  cs1
                                  e1
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs1
                       @ e1
                       $dArray
                 } in
                 let {
                   $dBaseArray2 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs1
                                     e1
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs1
                       @ e1
                       $dMArray1
                 } in
                 let {
                   $dColorSpace1 :: Graphics.Image.Interface.ColorSpace cs1 e1
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs1
                       @ e1
                       $dBaseArray2
                 } in
                 (\ (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1)
                    (ds1 :: Graphics.Image.Interface.Image
                              Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2)
                    (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> (GHC.Types.Int, GHC.Types.Int)
                          -> (GHC.Types.Int, GHC.Types.Int))
                    (g :: ((GHC.Types.Int, GHC.Types.Int)
                           -> Graphics.Image.Interface.Pixel cs1 e1)
                          -> ((GHC.Types.Int, GHC.Types.Int)
                              -> Graphics.Image.Interface.Pixel cs2 e2)
                          -> (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                  Graphics.Image.Interface.Repa.Generic.$WRDImage
                    @ Data.Array.Repa.Repr.Unboxed.U
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (Data.Array.Repa.Operators.Traversal.traverse2
                       @ Data.Array.Repa.Repr.Delayed.D
                       @ Data.Array.Repa.Repr.Delayed.D
                       @ Data.Array.Repa.Index.DIM2
                       @ Data.Array.Repa.Index.DIM2
                       @ Data.Array.Repa.Index.DIM2
                       @ (Graphics.Image.Interface.Pixel cs1 e1)
                       @ (Graphics.Image.Interface.Pixel cs2 e2)
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       (Data.Array.Repa.Repr.Delayed.$fSourceDa
                          @ (Graphics.Image.Interface.Pixel cs1 e1))
                       (Data.Array.Repa.Repr.Delayed.$fSourceDa
                          @ (Graphics.Image.Interface.Pixel cs2 e2))
                       Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                       Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                       (case ds
                               `cast`
                             (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs1>_N <e1>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                             <cs1>_N
                                                                                                             <e1>_N) of wild {
                          Graphics.Image.Interface.Repa.Generic.RTImage arr
                          -> case arr
                                    `cast`
                                  (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                    cs1
                                                                                                                    e1>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                             Data.Array.Repa.Repr.Delayed.$WADelayed
                               @ Data.Array.Repa.Index.DIM2
                               @ (Graphics.Image.Interface.Pixel cs1 e1)
                               sh2
                               (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                                Data.Vector.Generic.unsafeIndex
                                  @ Data.Vector.Unboxed.Base.Vector
                                  @ (Graphics.Image.Interface.Pixel cs1 e1)
                                  (Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel
                                     @ cs1
                                     @ e1
                                     $dColorSpace1)
                                  ds2
                                  (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                     @ (Data.Array.Repa.Index.DIM0
                                        Data.Array.Repa.Index.:. GHC.Types.Int)
                                     Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                     sh2
                                     ix)) }
                          Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr })
                       (case ds1
                               `cast`
                             (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                             <cs2>_N
                                                                                                             <e2>_N) of wild {
                          Graphics.Image.Interface.Repa.Generic.RTImage arr
                          -> case arr
                                    `cast`
                                  (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                    cs2
                                                                                                                    e2>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                             Data.Array.Repa.Repr.Delayed.$WADelayed
                               @ Data.Array.Repa.Index.DIM2
                               @ (Graphics.Image.Interface.Pixel cs2 e2)
                               sh2
                               (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                                Data.Vector.Generic.unsafeIndex
                                  @ Data.Vector.Unboxed.Base.Vector
                                  @ (Graphics.Image.Interface.Pixel cs2 e2)
                                  (Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel
                                     @ cs2
                                     @ e2
                                     $dColorSpace)
                                  ds2
                                  (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                     @ (Data.Array.Repa.Index.DIM0
                                        Data.Array.Repa.Index.:. GHC.Types.Int)
                                     Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                     sh2
                                     ix)) }
                          Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr })
                       (\ (sh2 :: Data.Array.Repa.Index.DIM2)[OneShot]
                          (sh3 :: Data.Array.Repa.Index.DIM2)[OneShot] ->
                        case sh2 of sh4 { Data.Array.Repa.Index.:. ipv ipv1 ->
                        case sh3 of sh5 { Data.Array.Repa.Index.:. ipv2 ipv3 ->
                        case f (case ipv of wild { Data.Array.Repa.Index.:. ds2 i ->
                                (i, ipv1) })
                               (case ipv2 of wild { Data.Array.Repa.Index.:. ds2 i ->
                                (i, ipv3) }) of wild { (,) m n ->
                        let {
                          $j1 :: (Data.Array.Repa.Index.Z
                                  Data.Array.Repa.Index.:. GHC.Types.Int)
                                 Data.Array.Repa.Index.:. GHC.Types.Int
                            <join 0>
                          = case GHC.Err.error
                                   @ 'GHC.Types.LiftedRep
                                   @ (GHC.Types.Int, GHC.Types.Int)
                                   Graphics.Image.Interface.checkDims1
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b1
                                         (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                         (n1 :: b1)[OneShot] ->
                                       GHC.Base.foldr
                                         @ GHC.Types.Char
                                         @ b1
                                         c1
                                         n1
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)3
                                            (GHC.Show.showLitString
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b2
                                                     (c2 :: GHC.Types.Char -> b2 -> b2)[OneShot]
                                                     (n2 :: b2)[OneShot] ->
                                                   GHC.CString.unpackFoldrCString#
                                                     @ b2
                                                     "Graphics.Image.Interface.Repa.Generic.traverse2R"#
                                                     c2
                                                     n2))
                                               GHC.Show.$fShow[]1)))
                                      (GHC.Base.augment
                                         @ GHC.Types.Char
                                         (\ @ b1
                                            (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                            (n1 :: b1)[OneShot] ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b1
                                            ": dimensions are expected to be positive: "#
                                            c1
                                            n1)
                                         (GHC.Show.$fShow(,)_$cshowsPrec
                                            @ GHC.Types.Int
                                            @ GHC.Types.Int
                                            GHC.Show.$fShowInt
                                            GHC.Show.$fShowInt
                                            GHC.Show.$fShow(,)1
                                            wild
                                            (GHC.Types.[] @ GHC.Types.Char))))
                            ret_ty ((Data.Array.Repa.Index.Z
                                     Data.Array.Repa.Index.:. GHC.Types.Int)
                                    Data.Array.Repa.Index.:. GHC.Types.Int)
                            of {}
                        } in
                        case GHC.Classes.leInt m (GHC.Types.I# 0#) of wild1 {
                          GHC.Types.False
                          -> case GHC.Classes.leInt n (GHC.Types.I# 0#) of wild2 {
                               GHC.Types.False
                               -> Data.Array.Repa.Index.$W:.
                                    @ (Data.Array.Repa.Index.Z
                                       Data.Array.Repa.Index.:. GHC.Types.Int)
                                    @ GHC.Types.Int
                                    (Data.Array.Repa.Index.$W:.
                                       @ Data.Array.Repa.Index.Z
                                       @ GHC.Types.Int
                                       Data.Array.Repa.Index.Z
                                       m)
                                    n
                               GHC.Types.True -> $j1 }
                          GHC.Types.True -> $j1 } } } })
                       (\ (getPx1 :: Data.Array.Repa.Index.DIM2
                                     -> Graphics.Image.Interface.Pixel cs1 e1)[OneShot]
                          (getPx2 :: Data.Array.Repa.Index.DIM2
                                     -> Graphics.Image.Interface.Pixel cs2 e2)[OneShot] ->
                        let {
                          f1 :: (GHC.Types.Int, GHC.Types.Int)
                                -> Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                          = g (\ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                               getPx1 (Graphics.Image.Interface.Repa.Generic.ix2sh x))
                              (\ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                               getPx2 (Graphics.Image.Interface.Repa.Generic.ix2sh x))
                        } in
                        \ (x :: Data.Array.Repa.Index.DIM2) ->
                        f1 (Graphics.Image.Interface.Repa.Generic.sh2ix x))))
                   `cast`
                 (<Graphics.Image.Interface.Image
                     Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2>_R
                  ->_R <(GHC.Types.Int, GHC.Types.Int)
                        -> (GHC.Types.Int, GHC.Types.Int)
                        -> (GHC.Types.Int, GHC.Types.Int)>_R
                  ->_R <((GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel cs1 e1)
                        -> ((GHC.Types.Int, GHC.Types.Int)
                            -> Graphics.Image.Interface.Pixel cs2 e2)
                        -> (GHC.Types.Int, GHC.Types.Int)
                        -> Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
48cb5535e9d8c15433d12042e2deae20
  $s$fArrayRPUcse_$s$fArrayRPUcse_$czipWith ::
    (Graphics.Image.Interface.Array
       Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1,
     Graphics.Image.Interface.Array
       Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) =>
    (Graphics.Image.Interface.Pixel cs1 e1
     -> Graphics.Image.Interface.Pixel cs2 e2
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 5,
     Strictness: <L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,1*U(1*U(A,1*U(A,A,A,A,A,A,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A),A,A,C(U),A,A,A,A,A,A,A,A,A,A,A),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C(U(U)))><S,1*U><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ cs1
                   @ e1
                   @ cs2
                   @ e2
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1)
                   ($dArray1 :: Graphics.Image.Interface.Array
                                  Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) ->
                 let {
                   $dMArray :: Graphics.Image.Interface.MArray
                                 (Graphics.Image.Interface.Manifest
                                    Graphics.Image.Interface.Repa.Unboxed.RPU)
                                 cs2
                                 e2
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs2
                       @ e2
                       $dArray1
                 } in
                 let {
                   $dBaseArray1 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs2
                                     e2
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs2
                       @ e2
                       $dMArray
                 } in
                 let {
                   $dColorSpace :: Graphics.Image.Interface.ColorSpace cs2 e2
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs2
                       @ e2
                       $dBaseArray1
                 } in
                 let {
                   $dMArray1 :: Graphics.Image.Interface.MArray
                                  (Graphics.Image.Interface.Manifest
                                     Graphics.Image.Interface.Repa.Unboxed.RPU)
                                  cs1
                                  e1
                   = Graphics.Image.Interface.$p2Array
                       @ Graphics.Image.Interface.Repa.Unboxed.RPU
                       @ cs1
                       @ e1
                       $dArray
                 } in
                 let {
                   $dBaseArray2 :: Graphics.Image.Interface.BaseArray
                                     (Graphics.Image.Interface.Manifest
                                        Graphics.Image.Interface.Repa.Unboxed.RPU)
                                     cs1
                                     e1
                   = Graphics.Image.Interface.$p1MArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs1
                       @ e1
                       $dMArray1
                 } in
                 let {
                   $dColorSpace1 :: Graphics.Image.Interface.ColorSpace cs1 e1
                   = Graphics.Image.Interface.$p2BaseArray
                       @ (Graphics.Image.Interface.Manifest
                            Graphics.Image.Interface.Repa.Unboxed.RPU)
                       @ cs1
                       @ e1
                       $dBaseArray2
                 } in
                 (\ (f :: Graphics.Image.Interface.Pixel cs1 e1
                          -> Graphics.Image.Interface.Pixel cs2 e2
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1)
                    (ds1 :: Graphics.Image.Interface.Image
                              Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2) ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs1>_N <e1>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                       <cs1>_N
                                                                                                       <e1>_N) of img4 { DEFAULT ->
                  case ds1
                         `cast`
                       (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                       <cs2>_N
                                                                                                       <e2>_N) of img5 { DEFAULT ->
                  let {
                    arr1 :: Data.Array.Repa.Base.Array
                              Data.Array.Repa.Repr.Delayed.D
                              Data.Array.Repa.Index.DIM2
                              (Graphics.Image.Interface.Pixel cs1 e1)
                    = case img4 of wild {
                        Graphics.Image.Interface.Repa.Generic.RTImage arr
                        -> case arr
                                  `cast`
                                (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                  cs1
                                                                                                                  e1>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                           Data.Array.Repa.Repr.Delayed.$WADelayed
                             @ Data.Array.Repa.Index.DIM2
                             @ (Graphics.Image.Interface.Pixel cs1 e1)
                             sh2
                             (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                              Data.Vector.Generic.unsafeIndex
                                @ Data.Vector.Unboxed.Base.Vector
                                @ (Graphics.Image.Interface.Pixel cs1 e1)
                                (Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel
                                   @ cs1
                                   @ e1
                                   $dColorSpace1)
                                ds2
                                (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                   @ (Data.Array.Repa.Index.DIM0
                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                   Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                   sh2
                                   ix)) }
                        Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr }
                  } in
                  let {
                    arr2 :: Data.Array.Repa.Base.Array
                              Data.Array.Repa.Repr.Delayed.D
                              Data.Array.Repa.Index.DIM2
                              (Graphics.Image.Interface.Pixel cs2 e2)
                    = case img5 of wild {
                        Graphics.Image.Interface.Repa.Generic.RTImage arr
                        -> case arr
                                  `cast`
                                (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                  cs2
                                                                                                                  e2>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds2 ->
                           Data.Array.Repa.Repr.Delayed.$WADelayed
                             @ Data.Array.Repa.Index.DIM2
                             @ (Graphics.Image.Interface.Pixel cs2 e2)
                             sh2
                             (\ (ix :: Data.Array.Repa.Index.DIM2) ->
                              Data.Vector.Generic.unsafeIndex
                                @ Data.Vector.Unboxed.Base.Vector
                                @ (Graphics.Image.Interface.Pixel cs2 e2)
                                (Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel
                                   @ cs2
                                   @ e2
                                   $dColorSpace)
                                ds2
                                (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                   @ (Data.Array.Repa.Index.DIM0
                                      Data.Array.Repa.Index.:. GHC.Types.Int)
                                   Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                   sh2
                                   ix)) }
                        Graphics.Image.Interface.Repa.Generic.RDImage arr -> arr }
                  } in
                  let {
                    fail :: GHC.Prim.Void#
                            -> Graphics.Image.Interface.Repa.Generic.RImage
                                 Data.Array.Repa.Repr.Unboxed.U
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 1> {- Arity: 1 -}
                    = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                      case arr2
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             cs2
                                                                                                             e2>_N) of wild { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds3 ->
                      case sh2 of wild1 { Data.Array.Repa.Index.:. ds4 ds5 ->
                      case ds4 of wild2 { Data.Array.Repa.Index.:. ds6 ds7 ->
                      case ds7 of wild3 { GHC.Types.I# ds8 ->
                      case ds8 of ds9 {
                        DEFAULT
                        -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                             @ Data.Array.Repa.Repr.Unboxed.U
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             (Data.Array.Repa.Operators.Mapping.zipWith
                                @ Data.Array.Repa.Index.DIM2
                                @ Data.Array.Repa.Repr.Delayed.D
                                @ (Graphics.Image.Interface.Pixel cs1 e1)
                                @ Data.Array.Repa.Repr.Delayed.D
                                @ (Graphics.Image.Interface.Pixel cs2 e2)
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                                (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                   @ (Graphics.Image.Interface.Pixel cs1 e1))
                                (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                   @ (Graphics.Image.Interface.Pixel cs2 e2))
                                f
                                arr1
                                wild
                                  `cast`
                                (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                        cs2
                                                                                                                        e2>_N))
                        1#
                        -> case ds5 of wild4 { GHC.Types.I# ds10 ->
                           case ds10 of ds11 {
                             DEFAULT
                             -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                                  @ Data.Array.Repa.Repr.Unboxed.U
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  (Data.Array.Repa.Operators.Mapping.zipWith
                                     @ Data.Array.Repa.Index.DIM2
                                     @ Data.Array.Repa.Repr.Delayed.D
                                     @ (Graphics.Image.Interface.Pixel cs1 e1)
                                     @ Data.Array.Repa.Repr.Delayed.D
                                     @ (Graphics.Image.Interface.Pixel cs2 e2)
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                                     (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                        @ (Graphics.Image.Interface.Pixel cs1 e1))
                                     (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                        @ (Graphics.Image.Interface.Pixel cs2 e2))
                                     f
                                     arr1
                                     wild
                                       `cast`
                                     (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                                             cs2
                                                                                                                             e2>_N))
                             1#
                             -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                                  @ Data.Array.Repa.Repr.Unboxed.U
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  (Data.Array.Repa.Operators.Mapping.map
                                     @ Data.Array.Repa.Index.DIM2
                                     @ Data.Array.Repa.Repr.Delayed.D
                                     @ (Graphics.Image.Interface.Pixel cs1 e1)
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                                     (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                        @ (Graphics.Image.Interface.Pixel cs1 e1))
                                     (let {
                                        ds12 :: Graphics.Image.Interface.Pixel cs2 e2
                                        = ds3
                                            (Data.Array.Repa.Index.$fShape:._$cfromIndex
                                               @ (Data.Array.Repa.Index.DIM0
                                                  Data.Array.Repa.Index.:. GHC.Types.Int)
                                               Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                               wild1
                                               (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                                  @ (Data.Array.Repa.Index.DIM0
                                                     Data.Array.Repa.Index.:. GHC.Types.Int)
                                                  Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                                  wild1
                                                  (Data.Array.Repa.Index.$W:.
                                                     @ (Data.Array.Repa.Index.Z
                                                        Data.Array.Repa.Index.:. GHC.Types.Int)
                                                     @ GHC.Types.Int
                                                     (Data.Array.Repa.Index.$W:.
                                                        @ Data.Array.Repa.Index.Z
                                                        @ GHC.Types.Int
                                                        Data.Array.Repa.Index.Z
                                                        (GHC.Types.I# 0#))
                                                     (GHC.Types.I# 0#))))
                                      } in
                                      \ (ds13 :: Graphics.Image.Interface.Pixel cs1 e1) ->
                                      f ds13 ds12)
                                     arr1) } } } } } } }
                  } in
                  case arr1
                         `cast`
                       (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                         cs1
                                                                                                         e1>_N) of wild { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds2 ->
                  case sh2 of wild1 { Data.Array.Repa.Index.:. ds3 ds4 ->
                  case ds3 of wild2 { Data.Array.Repa.Index.:. ds5 ds6 ->
                  case ds6 of wild3 { GHC.Types.I# ds7 ->
                  case ds7 of ds8 {
                    DEFAULT -> fail GHC.Prim.void#
                    1#
                    -> case ds4 of wild4 { GHC.Types.I# ds9 ->
                       case ds9 of ds10 {
                         DEFAULT -> fail GHC.Prim.void#
                         1#
                         -> Graphics.Image.Interface.Repa.Generic.$WRDImage
                              @ Data.Array.Repa.Repr.Unboxed.U
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              (Data.Array.Repa.Operators.Mapping.map
                                 @ Data.Array.Repa.Index.DIM2
                                 @ Data.Array.Repa.Repr.Delayed.D
                                 @ (Graphics.Image.Interface.Pixel cs2 e2)
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.
                                 (Data.Array.Repa.Repr.Delayed.$fSourceDa
                                    @ (Graphics.Image.Interface.Pixel cs2 e2))
                                 (f (ds2
                                       (Data.Array.Repa.Index.$fShape:._$cfromIndex
                                          @ (Data.Array.Repa.Index.DIM0
                                             Data.Array.Repa.Index.:. GHC.Types.Int)
                                          Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                          wild1
                                          (Data.Array.Repa.Index.$fShape:._$ctoIndex
                                             @ (Data.Array.Repa.Index.DIM0
                                                Data.Array.Repa.Index.:. GHC.Types.Int)
                                             Graphics.Image.Interface.Repa.Generic.$s$fLoadDshe_$s$fShape:.1
                                             wild1
                                             (Data.Array.Repa.Index.$W:.
                                                @ (Data.Array.Repa.Index.Z
                                                   Data.Array.Repa.Index.:. GHC.Types.Int)
                                                @ GHC.Types.Int
                                                (Data.Array.Repa.Index.$W:.
                                                   @ Data.Array.Repa.Index.Z
                                                   @ GHC.Types.Int
                                                   Data.Array.Repa.Index.Z
                                                   (GHC.Types.I# 0#))
                                                (GHC.Types.I# 0#))))))
                                 arr2) } } } } } } } } })
                   `cast`
                 (<Graphics.Image.Interface.Pixel cs1 e1
                   -> Graphics.Image.Interface.Pixel cs2 e2
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Repa.Unboxed.RPU cs1 e1>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Repa.Unboxed.RPU cs2 e2>_R
                  ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
7b3a2f604d028585db04d1ea917523e5
  $s$fArrayRPUcse_$s$fArrayRPUcse_$c|*| ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Repa.Unboxed.RPU
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double)
                   (ds1 :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Repa.Unboxed.RPU
                             Graphics.Image.ColorSpace.Y.Y
                             GHC.Types.Double) ->
                 Graphics.Image.Interface.Repa.Generic.multR
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   @ Data.Array.Repa.Repr.Unboxed.U
                   @ Data.Array.Repa.Repr.Unboxed.U
                   @ Data.Array.Repa.Repr.Unboxed.U
                   Lib.$s$fArrayRPUcse_$s$fNumPixel
                   Lib.$s$fArrayRPUcse_$s$fEltPixel
                   Lib.$s$fArrayRPUcse_$s$fUnboxPixel
                   Lib.$s$fArrayRPUcse_$s$fSourceUa
                   Lib.$s$fArrayRPUcse_$s$fSourceUa
                   Lib.$s$fArrayRPUcse_$s$fSourceUa
                   Lib.$s$fArrayRPUcse_$s$fTargetUe
                   Lib.$s$fArrayRPUcse_$s$fTargetUe
                   Lib.$s$fArrayRPUcse_$s$fTargetUe
                   Graphics.Image.Interface.Repa.Generic.Parallel
                   ds
                     `cast`
                   (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                           <GHC.Types.Double>_N)
                   ds1
                     `cast`
                   (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                           <GHC.Types.Double>_N))
                  `cast`
                (<Graphics.Image.Interface.Image
                    Graphics.Image.Interface.Repa.Unboxed.RPU
                    Graphics.Image.ColorSpace.Y.Y
                    GHC.Types.Double>_R
                 ->_R <Graphics.Image.Interface.Image
                         Graphics.Image.Interface.Repa.Unboxed.RPU
                         Graphics.Image.ColorSpace.Y.Y
                         GHC.Types.Double>_R
                 ->_R Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                               <Graphics.Image.ColorSpace.Y.Y>_N
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) -}
5987fbc655a2404727bd18a77dd07bb8
  $s$fArrayRPUcse_$s$fBaseArrayRPUcse ::
    Graphics.Image.Interface.BaseArray
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.Image.Interface.Repa.Unboxed.RPU
                  @ Graphics.Image.ColorSpace.Y.Y
                  @ GHC.Types.Double
                  Graphics.Image.Interface.Repa.Unboxed.$fBaseArrayRPUcse1
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Graphics.Image.Interface.Repa.Unboxed.RPU>_N)
                  Lib.$s$fArrayRPUcse_$s$fColorSpaceYe
                  Lib.$s$fArrayRPUcse1
                    `cast`
                  (Sub (Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:SuperClassRPUcse[0]
                                 <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)))
                  Lib.$s$fArrayRPUcse_$s$fBaseArrayRPUcse_$cdims -}
a602dc637dc396e45503c948b44f31ff
  $s$fArrayRPUcse_$s$fBaseArrayRPUcse_$cdims ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Repa.Unboxed.RPU
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Repa.Unboxed.RPU
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N) of wild {
                   Graphics.Image.Interface.Repa.Generic.RTImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Unboxed.D:R:ArrayUsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild1 { Data.Array.Repa.Repr.Unboxed.AUnboxed sh2 ds1 ->
                      case sh2 of wild2 { Data.Array.Repa.Index.:. ds2 j ->
                      case ds2 of wild3 { Data.Array.Repa.Index.:. ds3 i -> (i, j) } } }
                   Graphics.Image.Interface.Repa.Generic.RDImage arr
                   -> case arr
                             `cast`
                           (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0] <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                                             GHC.Types.Double>_N) of wild1 { Data.Array.Repa.Repr.Delayed.ADelayed sh2 ds1 ->
                      case sh2 of wild2 { Data.Array.Repa.Index.:. ds2 j ->
                      case ds2 of wild3 { Data.Array.Repa.Index.:. ds3 i ->
                      (i, j) } } } }) -}
9c6305a86c737100b7a2ef2ee926c36a
  $s$fArrayRPUcse_$s$fColorSpaceYe ::
    Graphics.Image.Interface.ColorSpace
      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.Image.ColorSpace.Y.Y
                  @ GHC.Types.Double
                  Graphics.Image.ColorSpace.Y.$fEqY
                  Graphics.Image.ColorSpace.Y.$fEnumY
                  Graphics.Image.ColorSpace.Y.$fShowY
                  Graphics.Image.ColorSpace.Y.$fBoundedY
                  Graphics.Image.ColorSpace.Y.$fColorSpaceYe2
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Graphics.Image.ColorSpace.Y.Y>_N)
                  Lib.$s$fArrayRPUcse_$s$fEqPixel0
                  Data.Vector.Unboxed.Base.$fUnboxDouble
                    `cast`
                  (Data.Vector.Unboxed.Base.Unbox
                     (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                               <GHC.Types.Double>_N)))_R
                  Graphics.Image.Interface.Elevator.$fElevatorDouble
                  Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$ctoComponents
                  (\ (v1 :: GHC.Types.Double) -> v1)
                    `cast`
                  (Sub (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                 <GHC.Types.Double>_N))
                   ->_R Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                 <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                  (\ (v1 :: GHC.Types.Double) -> v1)
                    `cast`
                  (<GHC.Types.Double>_R
                   ->_R Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                 <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                  Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$cgetPxC
                  Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$csetPxC
                  Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$cmapPxC
                  (Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cfmap
                     @ GHC.Types.Double
                     @ GHC.Types.Double)
                  (Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cliftA2
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     @ GHC.Types.Double)
                  Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$cfoldlPx2
                  (\ @ b
                     (f :: GHC.Types.Double -> b -> b)
                     (z0 :: b)
                     (xs :: Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   case z0 of z1 { DEFAULT ->
                   case xs
                          `cast`
                        (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                <GHC.Types.Double>_N) of nt { GHC.Types.D# ipv ->
                   f nt z1 } })
                  (\ @ b ->
                   Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cfoldl'
                     @ b
                     @ GHC.Types.Double)
                  (\ (f :: GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
                     (xs :: Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   xs)
                    `cast`
                  (<GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double>_R
                   ->_R <Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                   ->_R Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                               <GHC.Types.Double>_N)
                  (Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$ctoListPx
                     @ GHC.Types.Double
                     Graphics.Image.Interface.Elevator.$fElevatorDouble) -}
2e10b7e41316275a30423a5c46de5f47
  $s$fArrayRPUcse_$s$fColorSpaceYe_$cfoldlPx2 ::
    (b -> GHC.Types.Double -> GHC.Types.Double -> b)
    -> b
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(C(S))),1*C1(C1(C1(U)))><S,1*U><L,U><L,U>,
     Inline: (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ b
                   (f :: b -> GHC.Types.Double -> GHC.Types.Double -> b)
                   (z :: b)
                   (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (ds1 :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case z of z1 { DEFAULT ->
                 f z1
                   ds
                     `cast`
                   (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                           <GHC.Types.Double>_N)
                   ds1
                     `cast`
                   (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                           <GHC.Types.Double>_N) }) -}
6a6578d1f114b8cd3fad69348c95e5b3
  $s$fArrayRPUcse_$s$fColorSpaceYe_$cgetPxC ::
    Graphics.Image.Interface.Pixel
      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.ColorSpace.Y.Y -> GHC.Types.Double
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(U)><S,1*H>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (ds1 :: Graphics.Image.ColorSpace.Y.Y) ->
                 case ds1 of wild { Graphics.Image.ColorSpace.Y.LumaY ->
                 ds
                   `cast`
                 (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                         <GHC.Types.Double>_N) }) -}
d2dceb5963cb2120d00b29b6aee4ca0c
  $s$fArrayRPUcse_$s$fColorSpaceYe_$cmapPxC ::
    (Graphics.Image.ColorSpace.Y.Y
     -> GHC.Types.Double -> GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U)))><L,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                (\ (f :: Graphics.Image.ColorSpace.Y.Y
                         -> GHC.Types.Double -> GHC.Types.Double)
                   (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 f Graphics.Image.ColorSpace.Y.LumaY
                   ds
                     `cast`
                   (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                           <GHC.Types.Double>_N))
                  `cast`
                (<Graphics.Image.ColorSpace.Y.Y
                  -> GHC.Types.Double -> GHC.Types.Double>_R
                 ->_R <Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                 ->_R Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) -}
24d4c70701f4b543b29b61a02a953f42
  $s$fArrayRPUcse_$s$fColorSpaceYe_$csetPxC ::
    Graphics.Image.Interface.Pixel
      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.ColorSpace.Y.Y
    -> GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*H><S,1*U(U)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (ds1 :: Graphics.Image.ColorSpace.Y.Y)
                   (y :: GHC.Types.Double) ->
                 case ds1 of wild { Graphics.Image.ColorSpace.Y.LumaY ->
                 y `cast`
                 (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                           <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) }) -}
171d2eb9a466abd78691b95ca36ca9bb
  $s$fArrayRPUcse_$s$fColorSpaceYe_$ctoComponents ::
    Graphics.Image.Interface.Pixel
      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.Interface.Components
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 ds)
                  `cast`
                (<Graphics.Image.Interface.Pixel
                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                 ->_R Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N ; Sub (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                                                   <GHC.Types.Double>_N)))) -}
a454bed7225776b368e7154b5fa86125
  $s$fArrayRPUcse_$s$fEltPixel ::
    Data.Array.Repa.Eval.Elt.Elt
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  (\ (xs :: Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   case xs
                          `cast`
                        (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                <GHC.Types.Double>_N) of e2 { GHC.Types.D# ipv ->
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case GHC.Prim.touch#
                           @ 'GHC.Types.DoubleRep
                           @ GHC.Prim.Double#
                           ipv
                           s of state' { DEFAULT ->
                    (# state', GHC.Tuple.() #) })
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R)) })
                  (GHC.Types.D# 0.0##)
                    `cast`
                  (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                            <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                  (GHC.Types.D# 1.0##)
                    `cast`
                  (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                            <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) -}
1efd4c35a3191e8dc036f187af4740a4
  $s$fArrayRPUcse_$s$fEqPixel0 ::
    GHC.Classes.Eq
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  GHC.Classes.eqDouble
                    `cast`
                  ((Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                             <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                   ->_R (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fEqDouble_$c/=
                    `cast`
                  ((Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                             <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                   ->_R (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                   ->_R <GHC.Types.Bool>_R) -}
b4b10baa410bdcd2609ef9aa735809d3
  $s$fArrayRPUcse_$s$fMVectorMVector(,) ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (GHC.Types.Int,
                     Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicLength
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeSlice
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicOverlaps
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeNew
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicInitialize
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeReplicate
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeRead
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeWrite
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicClear
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicSet
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeCopy
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeMove
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeGrow -}
22e02788fa83700ee20ab3f7339415ae
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)L),U(U(A,A,1*C1(C1(U)),C(U),A),A)><S,1*H>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (GHC.Base.return
                      @ m
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      @ ()
                      GHC.Tuple.())
                   (GHC.Base.return
                      @ m
                      (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                      @ ()
                      GHC.Tuple.()) }) -}
acebe67094363dcabf7c0a35bd5835d2
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)L),U(1*U(A,A,1*C1(C1(U)),A,A),C(U))><S(LSS),1*U(A,U(U,U,U),U(U,U,U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (case as
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                           GHC.Prim.MutableByteArray# s
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.Word#
                                                           -> GHC.Prim.Word#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                              @ (Control.Monad.Primitive.PrimState m)
                              dt4
                              (GHC.Prim.*# dt2 8#)
                              (GHC.Prim.int2Word# (GHC.Prim.*# dt3 8#))
                              0##
                              s#
                                `cast`
                              (GHC.Prim.State#
                                 (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                      m) GHC.Prim.RealWorld))_R of wild2 { Unit# ds9 ->
                       (# ds9
                            `cast`
                          (GHC.Prim.State#
                             (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                     m)))_R,
                          GHC.Tuple.() #) }) })
                   (case bs
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                              <Control.Monad.Primitive.PrimState m>_N
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        m>_N
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N)))) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                           GHC.Prim.MutableByteArray# s
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.Word#
                                                           -> GHC.Prim.Word#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                              @ (Control.Monad.Primitive.PrimState m)
                              dt4
                              (GHC.Prim.*# dt2 8#)
                              (GHC.Prim.int2Word# (GHC.Prim.*# dt3 8#))
                              0##
                              s#
                                `cast`
                              (GHC.Prim.State#
                                 (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                      m) GHC.Prim.RealWorld))_R of wild2 { Unit# ds9 ->
                       (# ds9
                            `cast`
                          (GHC.Prim.State#
                             (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                     m)))_R,
                          GHC.Tuple.() #) }) }) }) -}
77cf0a75f7be03ce83876fd81a2d3cdb
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <s>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 ds1 ds2 ->
                 GHC.Types.I# dt1 }) -}
785dd82067769c7c98eafc64a0bfff3f
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(LLS)S),1*U(A,U(U,U,U),U(U,U,U))><S(LS(LLS)S),1*U(A,U(U,U,U),U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             s
                             (GHC.Types.Int,
                              Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <s>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as1 bs1 ->
                 case ds1
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <s>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild1 { Data.Vector.Unboxed.Base.MV_2 dt2 as2 bs2 ->
                 case as1
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                           <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                       <s>_N) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                 let {
                   i :: GHC.Types.Int = GHC.Types.I# dt3
                 } in
                 case as2
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                           <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                       <s>_N) of wild3 { Data.Vector.Primitive.Mutable.MVector dt6 dt7 dt8 ->
                 let {
                   j :: GHC.Types.Int = GHC.Types.I# dt6
                 } in
                 case GHC.Prim.sameMutableByteArray# @ s dt5 dt8 of lwild {
                   DEFAULT
                   -> case bs1
                             `cast`
                           (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                <s>_N
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                            <s>_N
                                                            <Graphics.Image.ColorSpace.Y.Y>_N
                                                            <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                       <s>_N
                                                                                       (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                            <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                            <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <s>_N)))) of wild4 { Data.Vector.Primitive.Mutable.MVector dt9 dt10 dt11 ->
                      let {
                        i1 :: GHC.Types.Int = GHC.Types.I# dt9
                      } in
                      case bs2
                             `cast`
                           (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                <s>_N
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                            <s>_N
                                                            <Graphics.Image.ColorSpace.Y.Y>_N
                                                            <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                       <s>_N
                                                                                       (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                            <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                            <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <s>_N)))) of wild5 { Data.Vector.Primitive.Mutable.MVector dt12 dt13 dt14 ->
                      let {
                        j1 :: GHC.Types.Int = GHC.Types.I# dt12
                      } in
                      case GHC.Prim.sameMutableByteArray# @ s dt11 dt14 of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> let {
                             $j1 :: GHC.Types.Bool <join 0>
                             = case GHC.Classes.geInt j1 i1 of wild6 {
                                 GHC.Types.False -> GHC.Types.False
                                 GHC.Types.True
                                 -> GHC.Classes.ltInt j1 (GHC.Types.I# (GHC.Prim.+# dt9 dt10)) }
                           } in
                           case GHC.Classes.geInt i1 j1 of wild6 {
                             GHC.Types.False -> $j1
                             GHC.Types.True
                             -> case GHC.Classes.ltInt
                                       i1
                                       (GHC.Types.I# (GHC.Prim.+# dt12 dt13)) of wild7 {
                                  GHC.Types.False -> $j1 GHC.Types.True -> GHC.Types.True } } } } }
                   1#
                   -> let {
                        $j1 :: GHC.Types.Bool <join 0>
                        = case GHC.Classes.geInt j i of wild4 {
                            GHC.Types.False
                            -> case bs1
                                      `cast`
                                    (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                         <s>_N
                                         <Graphics.Image.ColorSpace.Y.Y>_N
                                         <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                     <s>_N
                                                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                                                     <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                                <s>_N
                                                                                                (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                     <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                     <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                 <s>_N)))) of wild5 { Data.Vector.Primitive.Mutable.MVector dt9 dt10 dt11 ->
                               let {
                                 i1 :: GHC.Types.Int = GHC.Types.I# dt9
                               } in
                               case bs2
                                      `cast`
                                    (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                         <s>_N
                                         <Graphics.Image.ColorSpace.Y.Y>_N
                                         <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                     <s>_N
                                                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                                                     <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                                <s>_N
                                                                                                (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                     <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                     <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                 <s>_N)))) of wild6 { Data.Vector.Primitive.Mutable.MVector dt12 dt13 dt14 ->
                               let {
                                 j1 :: GHC.Types.Int = GHC.Types.I# dt12
                               } in
                               case GHC.Prim.sameMutableByteArray# @ s dt11 dt14 of lwild1 {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> let {
                                      $j2 :: GHC.Types.Bool <join 0>
                                      = case GHC.Classes.geInt j1 i1 of wild7 {
                                          GHC.Types.False -> GHC.Types.False
                                          GHC.Types.True
                                          -> GHC.Classes.ltInt
                                               j1
                                               (GHC.Types.I# (GHC.Prim.+# dt9 dt10)) }
                                    } in
                                    case GHC.Classes.geInt i1 j1 of wild7 {
                                      GHC.Types.False -> $j2
                                      GHC.Types.True
                                      -> case GHC.Classes.ltInt
                                                i1
                                                (GHC.Types.I# (GHC.Prim.+# dt12 dt13)) of wild8 {
                                           GHC.Types.False -> $j2
                                           GHC.Types.True -> GHC.Types.True } } } } }
                            GHC.Types.True
                            -> case GHC.Classes.ltInt
                                      j
                                      (GHC.Types.I# (GHC.Prim.+# dt3 dt4)) of wild5 {
                                 GHC.Types.False
                                 -> case bs1
                                           `cast`
                                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                              <s>_N
                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                          <s>_N
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                                     <s>_N
                                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                          <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                      <s>_N)))) of wild6 { Data.Vector.Primitive.Mutable.MVector dt9 dt10 dt11 ->
                                    let {
                                      i1 :: GHC.Types.Int = GHC.Types.I# dt9
                                    } in
                                    case bs2
                                           `cast`
                                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                              <s>_N
                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                          <s>_N
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                                     <s>_N
                                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                          <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                      <s>_N)))) of wild7 { Data.Vector.Primitive.Mutable.MVector dt12 dt13 dt14 ->
                                    let {
                                      j1 :: GHC.Types.Int = GHC.Types.I# dt12
                                    } in
                                    case GHC.Prim.sameMutableByteArray# @ s dt11 dt14 of lwild1 {
                                      DEFAULT -> GHC.Types.False
                                      1#
                                      -> let {
                                           $j2 :: GHC.Types.Bool <join 0>
                                           = case GHC.Classes.geInt j1 i1 of wild8 {
                                               GHC.Types.False -> GHC.Types.False
                                               GHC.Types.True
                                               -> GHC.Classes.ltInt
                                                    j1
                                                    (GHC.Types.I# (GHC.Prim.+# dt9 dt10)) }
                                         } in
                                         case GHC.Classes.geInt i1 j1 of wild8 {
                                           GHC.Types.False -> $j2
                                           GHC.Types.True
                                           -> case GHC.Classes.ltInt
                                                     i1
                                                     (GHC.Types.I#
                                                        (GHC.Prim.+# dt12 dt13)) of wild9 {
                                                GHC.Types.False -> $j2
                                                GHC.Types.True -> GHC.Types.True } } } } }
                                 GHC.Types.True -> GHC.Types.True } }
                      } in
                      case GHC.Classes.geInt i j of wild4 {
                        GHC.Types.False -> $j1
                        GHC.Types.True
                        -> case GHC.Classes.ltInt
                                  i
                                  (GHC.Types.I# (GHC.Prim.+# dt6 dt7)) of wild5 {
                             GHC.Types.False -> $j1
                             GHC.Types.True -> GHC.Types.True } } } } } } }) -}
a0766813f146d50650b14f807f1a2f1a
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> (GHC.Types.Int,
        Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)L),U(1*U(A,A,1*C1(C1(U)),A,A),C(U))><S(LSS),1*U(A,U(U,U,U),U(U,U,U))><S,1*U(U(U),U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 case ds1 of wild1 { (,) a1 b1 ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (case as
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N) of wild2 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case a1 of wild3 { GHC.Types.I# x# ->
                       case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                           GHC.Prim.MutableByteArray# s
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.Word#
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                              @ (Control.Monad.Primitive.PrimState m)
                              dt4
                              dt2
                              (GHC.Prim.int2Word# dt3)
                              x#
                              s#
                                `cast`
                              (GHC.Prim.State#
                                 (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                      m) GHC.Prim.RealWorld))_R of wild4 { Unit# ds9 ->
                       (# ds9
                            `cast`
                          (GHC.Prim.State#
                             (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                     m)))_R,
                          GHC.Tuple.() #) } }) })
                   (case bs
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                              <Control.Monad.Primitive.PrimState m>_N
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        m>_N
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N)))) of wild2 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case b1
                              `cast`
                            (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                    <GHC.Types.Double>_N) of wild3 { GHC.Types.D# x# ->
                       case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                           GHC.Prim.MutableByteArray# s
                                                           -> GHC.Prim.Int#
                                                           -> GHC.Prim.Word#
                                                           -> GHC.Prim.Double#
                                                           -> GHC.Prim.State# GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                              @ (Control.Monad.Primitive.PrimState m)
                              dt4
                              dt2
                              (GHC.Prim.int2Word# dt3)
                              x#
                              s#
                                `cast`
                              (GHC.Prim.State#
                                 (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                      m) GHC.Prim.RealWorld))_R of wild4 { Unit# ds9 ->
                       (# ds9
                            `cast`
                          (GHC.Prim.State#
                             (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                     m)))_R,
                          GHC.Tuple.() #) } }) }) } }) -}
4a6b135db3ed87fe7c4680ac2d681c23
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)L),U(1*U(A,A,1*C1(C1(U)),A,A),C(U))><S(LSS),1*U(A,U(U,U,U),U(U,U,U))><S(LSS),1*U(A,U(U,A,U),U(U,A,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (GHC.Types.Int,
                              Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as1 bs1 ->
                 case ds1
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild1 { Data.Vector.Unboxed.Base.MV_2 dt2 as2 bs2 ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (case as1
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                    case as2
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N) of wild3 { Data.Vector.Primitive.Mutable.MVector dt6 dt7 dt8 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case GHC.Prim.copyMutableByteArray#
                              @ (Control.Monad.Primitive.PrimState m)
                              dt8
                              (GHC.Prim.*# dt6 8#)
                              dt5
                              (GHC.Prim.*# dt3 8#)
                              (GHC.Prim.*# dt4 8#)
                              s# of s'# { DEFAULT ->
                       (# s'#, GHC.Tuple.() #) }) } })
                   (case bs1
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                              <Control.Monad.Primitive.PrimState m>_N
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        m>_N
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N)))) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                    case bs2
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                              <Control.Monad.Primitive.PrimState m>_N
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        m>_N
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N)))) of wild3 { Data.Vector.Primitive.Mutable.MVector dt6 dt7 dt8 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case GHC.Prim.copyMutableByteArray#
                              @ (Control.Monad.Primitive.PrimState m)
                              dt8
                              (GHC.Prim.*# dt6 8#)
                              dt5
                              (GHC.Prim.*# dt3 8#)
                              (GHC.Prim.*# dt4 8#)
                              s# of s'# { DEFAULT ->
                       (# s'#, GHC.Tuple.() #) }) } }) } }) -}
7f52490d08fc4c1aea70a2604ba06a42
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (GHC.Types.Int,
             Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))><S(LSS),1*U(U,U(U,U,U),U(U,U,U))><L,U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (m_ :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (GHC.Types.Int,
                         Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad1
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                      (let {
                         $dMonad2 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       let {
                         n1 :: GHC.Types.Int
                         = case as
                                  `cast`
                                (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                                   <Control.Monad.Primitive.PrimState
                                                      m>_N) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                           GHC.Types.I# dt3 }
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad2
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                         (let {
                            $dMonad3 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          let {
                            n2 :: GHC.Types.Int
                            = case n1 of wild1 { GHC.Types.I# x ->
                              case m_ of wild2 { GHC.Types.I# y ->
                              GHC.Types.I# (GHC.Prim.+# x y) } }
                          } in
                          case GHC.Classes.ltInt n2 (GHC.Types.I# 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Classes.gtInt
                                      n2
                                      (GHC.Real.$fIntegralInt_$cdiv
                                         GHC.Base.maxInt
                                         (GHC.Types.I# 8#)) of wild2 {
                                 GHC.Types.False
                                 -> let {
                                      f :: GHC.Types.Int = GHC.Types.I# 0#
                                    } in
                                    GHC.Base.>>=
                                      @ m
                                      $dMonad3
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      @ (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                                      (case n2 of wild3 { GHC.Types.I# x ->
                                       Control.Monad.Primitive.primitive
                                         @ m
                                         $dPrimMonad
                                         @ (Data.Primitive.ByteArray.MutableByteArray
                                              (Control.Monad.Primitive.PrimState m))
                                         (\ (s# :: GHC.Prim.State#
                                                     (Control.Monad.Primitive.PrimState m)) ->
                                          case GHC.Prim.newByteArray#
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 (GHC.Prim.*# x 8#)
                                                 s# of ds1 { (#,#) ipv ipv1 ->
                                          (# ipv,
                                             Data.Primitive.ByteArray.MutableByteArray
                                               @ (Control.Monad.Primitive.PrimState m)
                                               ipv1 #) }) })
                                      (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                  (Control.Monad.Primitive.PrimState m)) ->
                                       GHC.Base.return
                                         @ m
                                         $dMonad3
                                         @ (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                                         (Data.Vector.Primitive.Mutable.$WMVector
                                            @ (Control.Monad.Primitive.PrimState m)
                                            @ GHC.Types.Int
                                            f
                                            n2
                                            x1))
                                 GHC.Types.True
                                 -> GHC.Err.error
                                      @ 'GHC.Types.LiftedRep
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      (GHC.Base.augment
                                         @ GHC.Types.Char
                                         (\ @ b
                                            (c :: GHC.Types.Char -> b -> b)[OneShot]
                                            (n3 :: b)[OneShot] ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Primitive.basicUnsafeNew: length to large: "#
                                            c
                                            n3)
                                         (GHC.Show.showSignedInt
                                            GHC.Show.$fShow(,)1
                                            n2
                                            (GHC.Types.[] @ GHC.Types.Char))) }
                            GHC.Types.True
                            -> GHC.Err.error
                                 @ 'GHC.Types.LiftedRep
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m) GHC.Types.Int))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.Base.augment
                                    @ GHC.Types.Char
                                    (\ @ b
                                       (c :: GHC.Types.Char -> b -> b)[OneShot]
                                       (n3 :: b)[OneShot] ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "Primitive.basicUnsafeNew: negative length: "#
                                       c
                                       n3)
                                    (GHC.Show.showSignedInt
                                       GHC.Show.$fShow(,)1
                                       n2
                                       (GHC.Types.[] @ GHC.Types.Char))) })
                         (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                          GHC.Base.>>
                            @ m
                            $dMonad2
                            @ ()
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                            (case v' of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                             case Data.Vector.Primitive.Mutable.$WMVector
                                    @ (Control.Monad.Primitive.PrimState m)
                                    @ GHC.Types.Int
                                    (GHC.Types.I# dt2)
                                    n1
                                    (Data.Primitive.ByteArray.MutableByteArray
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt4) of wild2 { Data.Vector.Primitive.Mutable.MVector dt5 dt6 dt7 ->
                             case as
                                    `cast`
                                  (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                                       <Control.Monad.Primitive.PrimState
                                          m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                                     <Control.Monad.Primitive.PrimState
                                                        m>_N) of wild3 { Data.Vector.Primitive.Mutable.MVector dt8 dt9 dt10 ->
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                                case GHC.Prim.copyMutableByteArray#
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt10
                                       (GHC.Prim.*# dt8 8#)
                                       dt7
                                       (GHC.Prim.*# dt5 8#)
                                       (GHC.Prim.*# dt6 8#)
                                       s# of s'# { DEFAULT ->
                                (# s'#, GHC.Tuple.() #) }) } } })
                            (GHC.Base.return
                               @ m
                               $dMonad2
                               @ (Data.Vector.Primitive.Mutable.MVector
                                    (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                               v')))
                      (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                       GHC.Base.return
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                         x1
                           `cast`
                         (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                   <Control.Monad.Primitive.PrimState
                                      m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                                                       <Control.Monad.Primitive.PrimState m>_N))))
                   (\ (as' :: Data.Vector.Unboxed.Base.MVector
                                (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Graphics.Image.Interface.Components
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (let {
                            $dMonad2 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          (GHC.Base.>>=
                             @ m
                             $dMonad2
                             @ (Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             @ (Data.Vector.Unboxed.Base.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             (let {
                                $dMonad3 :: GHC.Base.Monad m
                                = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                              } in
                              let {
                                n1 :: GHC.Types.Int
                                = case bs
                                         `cast`
                                       (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                            <Control.Monad.Primitive.PrimState m>_N
                                            <Graphics.Image.ColorSpace.Y.Y>_N
                                            <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                        <Control.Monad.Primitive.PrimState
                                                                           m>_N
                                                                        <Graphics.Image.ColorSpace.Y.Y>_N
                                                                        <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                                   <Control.Monad.Primitive.PrimState
                                                                                                      m>_N
                                                                                                   (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                        <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                      <Control.Monad.Primitive.PrimState
                                                                                                                                                         m>_N)))) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                                  GHC.Types.I# dt3 }
                              } in
                              GHC.Base.>>=
                                @ m
                                $dMonad3
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                (let {
                                   $dMonad4 :: GHC.Base.Monad m
                                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                                 } in
                                 let {
                                   n2 :: GHC.Types.Int
                                   = case n1 of wild1 { GHC.Types.I# x ->
                                     case m_ of wild2 { GHC.Types.I# y ->
                                     GHC.Types.I# (GHC.Prim.+# x y) } }
                                 } in
                                 case GHC.Classes.ltInt n2 (GHC.Types.I# 0#) of wild1 {
                                   GHC.Types.False
                                   -> case GHC.Classes.gtInt
                                             n2
                                             (GHC.Real.$fIntegralInt_$cdiv
                                                GHC.Base.maxInt
                                                (GHC.Types.I# 8#)) of wild2 {
                                        GHC.Types.False
                                        -> let {
                                             f :: GHC.Types.Int = GHC.Types.I# 0#
                                           } in
                                           GHC.Base.>>=
                                             @ m
                                             $dMonad4
                                             @ (Data.Primitive.ByteArray.MutableByteArray
                                                  (Control.Monad.Primitive.PrimState m))
                                             @ (Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  GHC.Types.Double)
                                             (case n2 of wild3 { GHC.Types.I# x ->
                                              Control.Monad.Primitive.primitive
                                                @ m
                                                $dPrimMonad
                                                @ (Data.Primitive.ByteArray.MutableByteArray
                                                     (Control.Monad.Primitive.PrimState m))
                                                (\ (s# :: GHC.Prim.State#
                                                            (Control.Monad.Primitive.PrimState
                                                               m)) ->
                                                 case GHC.Prim.newByteArray#
                                                        @ (Control.Monad.Primitive.PrimState m)
                                                        (GHC.Prim.*# x 8#)
                                                        s# of ds1 { (#,#) ipv ipv1 ->
                                                 (# ipv,
                                                    Data.Primitive.ByteArray.MutableByteArray
                                                      @ (Control.Monad.Primitive.PrimState m)
                                                      ipv1 #) }) })
                                             (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                         (Control.Monad.Primitive.PrimState m)) ->
                                              GHC.Base.return
                                                @ m
                                                $dMonad4
                                                @ (Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     GHC.Types.Double)
                                                (Data.Vector.Primitive.Mutable.$WMVector
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   @ GHC.Types.Double
                                                   f
                                                   n2
                                                   x1))
                                        GHC.Types.True
                                        -> GHC.Err.error
                                             @ 'GHC.Types.LiftedRep
                                             @ (m (Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     GHC.Types.Double))
                                             (GHC.Stack.Types.PushCallStack
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString# @ b "error"#))
                                                (GHC.Stack.Types.SrcLoc
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "Data.Vector.Primitive.Mutable"#))
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                                   (GHC.Types.I# 98#)
                                                   (GHC.Types.I# 16#)
                                                   (GHC.Types.I# 98#)
                                                   (GHC.Types.I# 79#))
                                                GHC.Stack.Types.EmptyCallStack)
                                               `cast`
                                             (Sym (GHC.Classes.N:IP[0]
                                                       <"callStack">_N
                                                       <GHC.Stack.Types.CallStack>_N))
                                             (GHC.Base.augment
                                                @ GHC.Types.Char
                                                (\ @ b
                                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                   (n3 :: b)[OneShot] ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Primitive.basicUnsafeNew: length to large: "#
                                                   c
                                                   n3)
                                                (GHC.Show.showSignedInt
                                                   GHC.Show.$fShow(,)1
                                                   n2
                                                   (GHC.Types.[] @ GHC.Types.Char))) }
                                   GHC.Types.True
                                   -> GHC.Err.error
                                        @ 'GHC.Types.LiftedRep
                                        @ (m (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                GHC.Types.Double))
                                        (GHC.Stack.Types.PushCallStack
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString# @ b "error"#))
                                           (GHC.Stack.Types.SrcLoc
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "Data.Vector.Primitive.Mutable"#))
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "./Data/Vector/Primitive/Mutable.hs"#))
                                              (GHC.Types.I# 97#)
                                              (GHC.Types.I# 15#)
                                              (GHC.Types.I# 97#)
                                              (GHC.Types.I# 78#))
                                           GHC.Stack.Types.EmptyCallStack)
                                          `cast`
                                        (Sym (GHC.Classes.N:IP[0]
                                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                        (GHC.Base.augment
                                           @ GHC.Types.Char
                                           (\ @ b
                                              (c :: GHC.Types.Char -> b -> b)[OneShot]
                                              (n3 :: b)[OneShot] ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "Primitive.basicUnsafeNew: negative length: "#
                                              c
                                              n3)
                                           (GHC.Show.showSignedInt
                                              GHC.Show.$fShow(,)1
                                              n2
                                              (GHC.Types.[] @ GHC.Types.Char))) })
                                (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            GHC.Types.Double) ->
                                 GHC.Base.>>
                                   @ m
                                   $dMonad3
                                   @ ()
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                   (case v' of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                                    case Data.Vector.Primitive.Mutable.$WMVector
                                           @ (Control.Monad.Primitive.PrimState m)
                                           @ GHC.Types.Double
                                           (GHC.Types.I# dt2)
                                           n1
                                           (Data.Primitive.ByteArray.MutableByteArray
                                              @ (Control.Monad.Primitive.PrimState m)
                                              dt4) of wild2 { Data.Vector.Primitive.Mutable.MVector dt5 dt6 dt7 ->
                                    case bs
                                           `cast`
                                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                              <Control.Monad.Primitive.PrimState m>_N
                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                          <Control.Monad.Primitive.PrimState
                                                                             m>_N
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                                     <Control.Monad.Primitive.PrimState
                                                                                                        m>_N
                                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                                           m>_N)))) of wild3 { Data.Vector.Primitive.Mutable.MVector dt8 dt9 dt10 ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ ()
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m)) ->
                                       case GHC.Prim.copyMutableByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              dt10
                                              (GHC.Prim.*# dt8 8#)
                                              dt7
                                              (GHC.Prim.*# dt5 8#)
                                              (GHC.Prim.*# dt6 8#)
                                              s# of s'# { DEFAULT ->
                                       (# s'#, GHC.Tuple.() #) }) } } })
                                   (GHC.Base.return
                                      @ m
                                      $dMonad3
                                      @ (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                      v')))
                             (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                              GHC.Base.return
                                @ m
                                $dMonad2
                                @ (Data.Vector.Unboxed.Base.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                x1
                                  `cast`
                                (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                          <Control.Monad.Primitive.PrimState
                                             m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                              <Control.Monad.Primitive.PrimState
                                                                 m>_N))))
                            `cast`
                          (<m>_R (Data.Vector.Unboxed.Base.MVector
                                    <Control.Monad.Primitive.PrimState m>_N
                                    (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                              <GHC.Types.Double>_N)))_N))
                         (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Graphics.Image.Interface.Components
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                          GHC.Base.return
                            @ m
                            $dMonad1
                            @ (Data.Vector.Unboxed.Base.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            x1
                              `cast`
                            (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                      <Control.Monad.Primitive.PrimState m>_N
                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                      <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                       <Control.Monad.Primitive.PrimState
                                                                          m>_N
                                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                                       <GHC.Types.Double>_N))))
                      (\ (bs' :: Data.Vector.Unboxed.Base.MVector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (GHC.Types.Int,
                               Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (case m_ of wild1 { GHC.Types.I# x ->
                          Data.Vector.Unboxed.Base.$WMV_2
                            @ (Control.Monad.Primitive.PrimState m)
                            @ GHC.Types.Int
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            (GHC.Types.I# (GHC.Prim.+# x dt1))
                            as'
                            bs' }))) }) -}
75b54b8ab8629b773f256a5c23e974fa
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)L),U(1*U(A,A,1*C1(C1(U)),A,A),C(U))><S(LSS),1*U(A,U(U,U,U),U(U,U,U))><S(LSS),1*U(A,U(U,A,U),U(U,A,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (GHC.Types.Int,
                              Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as1 bs1 ->
                 case ds1
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild1 { Data.Vector.Unboxed.Base.MV_2 dt2 as2 bs2 ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (Data.Vector.Unboxed.Base.$fMVectorMVectorInt_$cbasicUnsafeMove
                      @ m
                      $dPrimMonad
                      as1
                      as2)
                   (Data.Vector.Unboxed.Base.$fMVectorMVectorDouble_$cbasicUnsafeMove
                      @ m
                      $dPrimMonad
                      bs1
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <Control.Monad.Primitive.PrimState m>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; (Data.Vector.Unboxed.Base.MVector
                                                                                 <Control.Monad.Primitive.PrimState
                                                                                    m>_N
                                                                                 (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                      <GHC.Types.Double>_N))_R))
                      bs2
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <Control.Monad.Primitive.PrimState m>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; (Data.Vector.Unboxed.Base.MVector
                                                                                 <Control.Monad.Primitive.PrimState
                                                                                    m>_N
                                                                                 (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                      <GHC.Types.Double>_N))_R))) } }) -}
1f261d65fb202a0e857f7f8204bd33f9
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (GHC.Types.Int,
             Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,C(U),A),C(U))><L,U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (n_ :: GHC.Types.Int) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (GHC.Types.Int,
                         Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad1
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                      (let {
                         $dMonad2 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case GHC.Classes.ltInt n_ (GHC.Types.I# 0#) of wild {
                         GHC.Types.False
                         -> case GHC.Classes.gtInt
                                   n_
                                   (GHC.Real.$fIntegralInt_$cdiv
                                      GHC.Base.maxInt
                                      (GHC.Types.I# 8#)) of wild1 {
                              GHC.Types.False
                              -> let {
                                   f :: GHC.Types.Int = GHC.Types.I# 0#
                                 } in
                                 GHC.Base.>>=
                                   @ m
                                   $dMonad2
                                   @ (Data.Primitive.ByteArray.MutableByteArray
                                        (Control.Monad.Primitive.PrimState m))
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                                   (case n_ of wild2 { GHC.Types.I# x ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m)) ->
                                       case GHC.Prim.newByteArray#
                                              @ (Control.Monad.Primitive.PrimState m)
                                              (GHC.Prim.*# x 8#)
                                              s# of ds1 { (#,#) ipv ipv1 ->
                                       (# ipv,
                                          Data.Primitive.ByteArray.MutableByteArray
                                            @ (Control.Monad.Primitive.PrimState m)
                                            ipv1 #) }) })
                                   (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                               (Control.Monad.Primitive.PrimState m)) ->
                                    GHC.Base.return
                                      @ m
                                      $dMonad2
                                      @ (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                                      (Data.Vector.Primitive.Mutable.$WMVector
                                         @ (Control.Monad.Primitive.PrimState m)
                                         @ GHC.Types.Int
                                         f
                                         n_
                                         x1))
                              GHC.Types.True
                              -> GHC.Err.error
                                   @ 'GHC.Types.LiftedRep
                                   @ (m (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int))
                                   (GHC.Stack.Types.PushCallStack
                                      (GHC.Base.build
                                         @ GHC.Types.Char
                                         (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                      (GHC.Stack.Types.SrcLoc
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "Data.Vector.Primitive.Mutable"#))
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b
                                               "./Data/Vector/Primitive/Mutable.hs"#))
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 16#)
                                         (GHC.Types.I# 98#)
                                         (GHC.Types.I# 79#))
                                      GHC.Stack.Types.EmptyCallStack)
                                     `cast`
                                   (Sym (GHC.Classes.N:IP[0]
                                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                   (GHC.Base.augment
                                      @ GHC.Types.Char
                                      (\ @ b
                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                         (n1 :: b)[OneShot] ->
                                       GHC.CString.unpackFoldrCString#
                                         @ b
                                         "Primitive.basicUnsafeNew: length to large: "#
                                         c
                                         n1)
                                      (GHC.Show.showSignedInt
                                         GHC.Show.$fShow(,)1
                                         n_
                                         (GHC.Types.[] @ GHC.Types.Char))) }
                         GHC.Types.True
                         -> GHC.Err.error
                              @ 'GHC.Types.LiftedRep
                              @ (m (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m) GHC.Types.Int))
                              (GHC.Stack.Types.PushCallStack
                                 (GHC.Base.build
                                    @ GHC.Types.Char
                                    (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                 (GHC.Stack.Types.SrcLoc
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Data.Vector.Primitive.Mutable"#))
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "./Data/Vector/Primitive/Mutable.hs"#))
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 15#)
                                    (GHC.Types.I# 97#)
                                    (GHC.Types.I# 78#))
                                 GHC.Stack.Types.EmptyCallStack)
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "Primitive.basicUnsafeNew: negative length: "#
                                    c
                                    n1)
                                 (GHC.Show.showSignedInt
                                    GHC.Show.$fShow(,)1
                                    n_
                                    (GHC.Types.[] @ GHC.Types.Char))) })
                      (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                       GHC.Base.return
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                         x1
                           `cast`
                         (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                   <Control.Monad.Primitive.PrimState
                                      m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                                                       <Control.Monad.Primitive.PrimState m>_N))))
                   (\ (as :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Graphics.Image.Interface.Components
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (let {
                            $dMonad2 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          (GHC.Base.>>=
                             @ m
                             $dMonad2
                             @ (Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             @ (Data.Vector.Unboxed.Base.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             (let {
                                $dMonad3 :: GHC.Base.Monad m
                                = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                              } in
                              case GHC.Classes.ltInt n_ (GHC.Types.I# 0#) of wild {
                                GHC.Types.False
                                -> case GHC.Classes.gtInt
                                          n_
                                          (GHC.Real.$fIntegralInt_$cdiv
                                             GHC.Base.maxInt
                                             (GHC.Types.I# 8#)) of wild1 {
                                     GHC.Types.False
                                     -> let {
                                          f :: GHC.Types.Int = GHC.Types.I# 0#
                                        } in
                                        GHC.Base.>>=
                                          @ m
                                          $dMonad3
                                          @ (Data.Primitive.ByteArray.MutableByteArray
                                               (Control.Monad.Primitive.PrimState m))
                                          @ (Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               GHC.Types.Double)
                                          (case n_ of wild2 { GHC.Types.I# x ->
                                           Control.Monad.Primitive.primitive
                                             @ m
                                             $dPrimMonad
                                             @ (Data.Primitive.ByteArray.MutableByteArray
                                                  (Control.Monad.Primitive.PrimState m))
                                             (\ (s# :: GHC.Prim.State#
                                                         (Control.Monad.Primitive.PrimState m)) ->
                                              case GHC.Prim.newByteArray#
                                                     @ (Control.Monad.Primitive.PrimState m)
                                                     (GHC.Prim.*# x 8#)
                                                     s# of ds1 { (#,#) ipv ipv1 ->
                                              (# ipv,
                                                 Data.Primitive.ByteArray.MutableByteArray
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   ipv1 #) }) })
                                          (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                      (Control.Monad.Primitive.PrimState m)) ->
                                           GHC.Base.return
                                             @ m
                                             $dMonad3
                                             @ (Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  GHC.Types.Double)
                                             (Data.Vector.Primitive.Mutable.$WMVector
                                                @ (Control.Monad.Primitive.PrimState m)
                                                @ GHC.Types.Double
                                                f
                                                n_
                                                x1))
                                     GHC.Types.True
                                     -> GHC.Err.error
                                          @ 'GHC.Types.LiftedRep
                                          @ (m (Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  GHC.Types.Double))
                                          (GHC.Stack.Types.PushCallStack
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString# @ b "error"#))
                                             (GHC.Stack.Types.SrcLoc
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "Data.Vector.Primitive.Mutable"#))
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "./Data/Vector/Primitive/Mutable.hs"#))
                                                (GHC.Types.I# 98#)
                                                (GHC.Types.I# 16#)
                                                (GHC.Types.I# 98#)
                                                (GHC.Types.I# 79#))
                                             GHC.Stack.Types.EmptyCallStack)
                                            `cast`
                                          (Sym (GHC.Classes.N:IP[0]
                                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                          (GHC.Base.augment
                                             @ GHC.Types.Char
                                             (\ @ b
                                                (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                (n1 :: b)[OneShot] ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "Primitive.basicUnsafeNew: length to large: "#
                                                c
                                                n1)
                                             (GHC.Show.showSignedInt
                                                GHC.Show.$fShow(,)1
                                                n_
                                                (GHC.Types.[] @ GHC.Types.Char))) }
                                GHC.Types.True
                                -> GHC.Err.error
                                     @ 'GHC.Types.LiftedRep
                                     @ (m (Data.Vector.Primitive.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             GHC.Types.Double))
                                     (GHC.Stack.Types.PushCallStack
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                        (GHC.Stack.Types.SrcLoc
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 "Data.Vector.Primitive.Mutable"#))
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 "./Data/Vector/Primitive/Mutable.hs"#))
                                           (GHC.Types.I# 97#)
                                           (GHC.Types.I# 15#)
                                           (GHC.Types.I# 97#)
                                           (GHC.Types.I# 78#))
                                        GHC.Stack.Types.EmptyCallStack)
                                       `cast`
                                     (Sym (GHC.Classes.N:IP[0]
                                               <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                     (GHC.Base.augment
                                        @ GHC.Types.Char
                                        (\ @ b
                                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                                           (n1 :: b)[OneShot] ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "Primitive.basicUnsafeNew: negative length: "#
                                           c
                                           n1)
                                        (GHC.Show.showSignedInt
                                           GHC.Show.$fShow(,)1
                                           n_
                                           (GHC.Types.[] @ GHC.Types.Char))) })
                             (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                              GHC.Base.return
                                @ m
                                $dMonad2
                                @ (Data.Vector.Unboxed.Base.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                x1
                                  `cast`
                                (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                          <Control.Monad.Primitive.PrimState
                                             m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                              <Control.Monad.Primitive.PrimState
                                                                 m>_N))))
                            `cast`
                          (<m>_R (Data.Vector.Unboxed.Base.MVector
                                    <Control.Monad.Primitive.PrimState m>_N
                                    (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                              <GHC.Types.Double>_N)))_N))
                         (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Graphics.Image.Interface.Components
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                          GHC.Base.return
                            @ m
                            $dMonad1
                            @ (Data.Vector.Unboxed.Base.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            x1
                              `cast`
                            (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                      <Control.Monad.Primitive.PrimState m>_N
                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                      <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                       <Control.Monad.Primitive.PrimState
                                                                          m>_N
                                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                                       <GHC.Types.Double>_N))))
                      (\ (bs :: Data.Vector.Unboxed.Base.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (GHC.Types.Int,
                               Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (Data.Vector.Unboxed.Base.$WMV_2
                            @ (Control.Monad.Primitive.PrimState m)
                            @ GHC.Types.Int
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            n_
                            as
                            bs)))) -}
f949eaeee08e33a669ad634529b10b7f
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> m (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,C(U),A),C(U))><S(LSS),1*U(A,U(U,A,U),U(U,A,U))><L,U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (i_ :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ GHC.Types.Int
                   @ (GHC.Types.Int,
                      Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (case as
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                    case i_ of wild2 { GHC.Types.I# y ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ GHC.Types.Int
                      (Data.Primitive.Types.$fPrimInt_$creadByteArray#
                         @ (Control.Monad.Primitive.PrimState m)
                         dt4
                         (GHC.Prim.+# dt2 y)) } })
                   (\ (a1 :: GHC.Types.Int) ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      @ (GHC.Types.Int,
                         Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Graphics.Image.Interface.Components
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (case bs
                                 `cast`
                               (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                    <Control.Monad.Primitive.PrimState m>_N
                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                    <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                <Control.Monad.Primitive.PrimState
                                                                   m>_N
                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                           <Control.Monad.Primitive.PrimState
                                                                                              m>_N
                                                                                           (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                <Control.Monad.Primitive.PrimState
                                                                                                                                   m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                              <Control.Monad.Primitive.PrimState
                                                                                                                                                 m>_N)))) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                          case i_ of wild2 { GHC.Types.I# y ->
                          (Control.Monad.Primitive.primitive
                             @ m
                             $dPrimMonad
                             @ GHC.Types.Double
                             (Data.Primitive.Types.$fPrimDouble_$creadByteArray#
                                @ (Control.Monad.Primitive.PrimState m)
                                dt4
                                (GHC.Prim.+# dt2 y)))
                            `cast`
                          (<m>_R (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                           <GHC.Types.Double>_N))) } })
                         (\ (x1 :: Graphics.Image.Interface.Components
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                          GHC.Base.return
                            @ m
                            $dMonad1
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            x1
                              `cast`
                            (Sub (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                      <GHC.Types.Double>_N) ; (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                        <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N))))
                      (\ (b1 :: Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (a1, b1))) }) -}
b00c5444a87de4c29bf7726eb1efc56b
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> (GHC.Types.Int,
        Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (GHC.Types.Int,
             Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))><L,U(U)><S,1*U(U(U),U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (n_ :: GHC.Types.Int)
                   (ds :: (GHC.Types.Int,
                           Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds of wild { (,) a1 b1 ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (GHC.Types.Int,
                         Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad1
                      @ (Data.Vector.Primitive.Mutable.MVector
                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                      (let {
                         $dMonad2 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad2
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                         @ (Data.Vector.Primitive.Mutable.MVector
                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                         (let {
                            $dMonad3 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          case GHC.Classes.ltInt n_ (GHC.Types.I# 0#) of wild1 {
                            GHC.Types.False
                            -> case GHC.Classes.gtInt
                                      n_
                                      (GHC.Real.$fIntegralInt_$cdiv
                                         GHC.Base.maxInt
                                         (GHC.Types.I# 8#)) of wild2 {
                                 GHC.Types.False
                                 -> let {
                                      f :: GHC.Types.Int = GHC.Types.I# 0#
                                    } in
                                    GHC.Base.>>=
                                      @ m
                                      $dMonad3
                                      @ (Data.Primitive.ByteArray.MutableByteArray
                                           (Control.Monad.Primitive.PrimState m))
                                      @ (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                                      (case n_ of wild3 { GHC.Types.I# x1 ->
                                       Control.Monad.Primitive.primitive
                                         @ m
                                         $dPrimMonad
                                         @ (Data.Primitive.ByteArray.MutableByteArray
                                              (Control.Monad.Primitive.PrimState m))
                                         (\ (s# :: GHC.Prim.State#
                                                     (Control.Monad.Primitive.PrimState m)) ->
                                          case GHC.Prim.newByteArray#
                                                 @ (Control.Monad.Primitive.PrimState m)
                                                 (GHC.Prim.*# x1 8#)
                                                 s# of ds1 { (#,#) ipv ipv1 ->
                                          (# ipv,
                                             Data.Primitive.ByteArray.MutableByteArray
                                               @ (Control.Monad.Primitive.PrimState m)
                                               ipv1 #) }) })
                                      (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                  (Control.Monad.Primitive.PrimState m)) ->
                                       GHC.Base.return
                                         @ m
                                         $dMonad3
                                         @ (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                                         (Data.Vector.Primitive.Mutable.$WMVector
                                            @ (Control.Monad.Primitive.PrimState m)
                                            @ GHC.Types.Int
                                            f
                                            n_
                                            x1))
                                 GHC.Types.True
                                 -> GHC.Err.error
                                      @ 'GHC.Types.LiftedRep
                                      @ (m (Data.Vector.Primitive.Mutable.MVector
                                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int))
                                      (GHC.Stack.Types.PushCallStack
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                         (GHC.Stack.Types.SrcLoc
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Data.Vector.Primitive.Mutable"#))
                                            (GHC.Base.build
                                               @ GHC.Types.Char
                                               (\ @ b ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "./Data/Vector/Primitive/Mutable.hs"#))
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 16#)
                                            (GHC.Types.I# 98#)
                                            (GHC.Types.I# 79#))
                                         GHC.Stack.Types.EmptyCallStack)
                                        `cast`
                                      (Sym (GHC.Classes.N:IP[0]
                                                <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                      (GHC.Base.augment
                                         @ GHC.Types.Char
                                         (\ @ b
                                            (c :: GHC.Types.Char -> b -> b)[OneShot]
                                            (n1 :: b)[OneShot] ->
                                          GHC.CString.unpackFoldrCString#
                                            @ b
                                            "Primitive.basicUnsafeNew: length to large: "#
                                            c
                                            n1)
                                         (GHC.Show.showSignedInt
                                            GHC.Show.$fShow(,)1
                                            n_
                                            (GHC.Types.[] @ GHC.Types.Char))) }
                            GHC.Types.True
                            -> GHC.Err.error
                                 @ 'GHC.Types.LiftedRep
                                 @ (m (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m) GHC.Types.Int))
                                 (GHC.Stack.Types.PushCallStack
                                    (GHC.Base.build
                                       @ GHC.Types.Char
                                       (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                    (GHC.Stack.Types.SrcLoc
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Data.Vector.Primitive.Mutable"#))
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "./Data/Vector/Primitive/Mutable.hs"#))
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 15#)
                                       (GHC.Types.I# 97#)
                                       (GHC.Types.I# 78#))
                                    GHC.Stack.Types.EmptyCallStack)
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.Base.augment
                                    @ GHC.Types.Char
                                    (\ @ b
                                       (c :: GHC.Types.Char -> b -> b)[OneShot]
                                       (n1 :: b)[OneShot] ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       "Primitive.basicUnsafeNew: negative length: "#
                                       c
                                       n1)
                                    (GHC.Show.showSignedInt
                                       GHC.Show.$fShow(,)1
                                       n_
                                       (GHC.Types.[] @ GHC.Types.Char))) })
                         (\ (v1 :: Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                          GHC.Base.>>
                            @ m
                            $dMonad2
                            @ ()
                            @ (Data.Vector.Primitive.Mutable.MVector
                                 (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                            (case v1 of wild1 { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                             Control.Monad.Primitive.primitive
                               @ m
                               $dPrimMonad
                               @ ()
                               (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                                case a1 of wild2 { GHC.Types.I# x# ->
                                case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                                    GHC.Prim.MutableByteArray# s
                                                                    -> GHC.Prim.Int#
                                                                    -> GHC.Prim.Word#
                                                                    -> GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                       @ (Control.Monad.Primitive.PrimState m)
                                       dt3
                                       dt1
                                       (GHC.Prim.int2Word# dt2)
                                       x#
                                       s#
                                         `cast`
                                       (GHC.Prim.State#
                                          (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                               m) GHC.Prim.RealWorld))_R of wild3 { Unit# ds9 ->
                                (# ds9
                                     `cast`
                                   (GHC.Prim.State#
                                      (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                              m)))_R,
                                   GHC.Tuple.() #) } }) })
                            (GHC.Base.return
                               @ m
                               $dMonad2
                               @ (Data.Vector.Primitive.Mutable.MVector
                                    (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                               v1)))
                      (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                       GHC.Base.return
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                         x1
                           `cast`
                         (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                   <Control.Monad.Primitive.PrimState
                                      m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                                                       <Control.Monad.Primitive.PrimState m>_N))))
                   (\ (as :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Graphics.Image.Interface.Components
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (let {
                            $dMonad2 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          (GHC.Base.>>=
                             @ m
                             $dMonad2
                             @ (Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             @ (Data.Vector.Unboxed.Base.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             (let {
                                $dMonad3 :: GHC.Base.Monad m
                                = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                              } in
                              GHC.Base.>>=
                                @ m
                                $dMonad3
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                (let {
                                   $dMonad4 :: GHC.Base.Monad m
                                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                                 } in
                                 case GHC.Classes.ltInt n_ (GHC.Types.I# 0#) of wild1 {
                                   GHC.Types.False
                                   -> case GHC.Classes.gtInt
                                             n_
                                             (GHC.Real.$fIntegralInt_$cdiv
                                                GHC.Base.maxInt
                                                (GHC.Types.I# 8#)) of wild2 {
                                        GHC.Types.False
                                        -> let {
                                             f :: GHC.Types.Int = GHC.Types.I# 0#
                                           } in
                                           GHC.Base.>>=
                                             @ m
                                             $dMonad4
                                             @ (Data.Primitive.ByteArray.MutableByteArray
                                                  (Control.Monad.Primitive.PrimState m))
                                             @ (Data.Vector.Primitive.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  GHC.Types.Double)
                                             (case n_ of wild3 { GHC.Types.I# x1 ->
                                              Control.Monad.Primitive.primitive
                                                @ m
                                                $dPrimMonad
                                                @ (Data.Primitive.ByteArray.MutableByteArray
                                                     (Control.Monad.Primitive.PrimState m))
                                                (\ (s# :: GHC.Prim.State#
                                                            (Control.Monad.Primitive.PrimState
                                                               m)) ->
                                                 case GHC.Prim.newByteArray#
                                                        @ (Control.Monad.Primitive.PrimState m)
                                                        (GHC.Prim.*# x1 8#)
                                                        s# of ds1 { (#,#) ipv ipv1 ->
                                                 (# ipv,
                                                    Data.Primitive.ByteArray.MutableByteArray
                                                      @ (Control.Monad.Primitive.PrimState m)
                                                      ipv1 #) }) })
                                             (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                         (Control.Monad.Primitive.PrimState m)) ->
                                              GHC.Base.return
                                                @ m
                                                $dMonad4
                                                @ (Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     GHC.Types.Double)
                                                (Data.Vector.Primitive.Mutable.$WMVector
                                                   @ (Control.Monad.Primitive.PrimState m)
                                                   @ GHC.Types.Double
                                                   f
                                                   n_
                                                   x1))
                                        GHC.Types.True
                                        -> GHC.Err.error
                                             @ 'GHC.Types.LiftedRep
                                             @ (m (Data.Vector.Primitive.Mutable.MVector
                                                     (Control.Monad.Primitive.PrimState m)
                                                     GHC.Types.Double))
                                             (GHC.Stack.Types.PushCallStack
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString# @ b "error"#))
                                                (GHC.Stack.Types.SrcLoc
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "Data.Vector.Primitive.Mutable"#))
                                                   (GHC.Base.build
                                                      @ GHC.Types.Char
                                                      (\ @ b ->
                                                       GHC.CString.unpackFoldrCString#
                                                         @ b
                                                         "./Data/Vector/Primitive/Mutable.hs"#))
                                                   (GHC.Types.I# 98#)
                                                   (GHC.Types.I# 16#)
                                                   (GHC.Types.I# 98#)
                                                   (GHC.Types.I# 79#))
                                                GHC.Stack.Types.EmptyCallStack)
                                               `cast`
                                             (Sym (GHC.Classes.N:IP[0]
                                                       <"callStack">_N
                                                       <GHC.Stack.Types.CallStack>_N))
                                             (GHC.Base.augment
                                                @ GHC.Types.Char
                                                (\ @ b
                                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                   (n1 :: b)[OneShot] ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Primitive.basicUnsafeNew: length to large: "#
                                                   c
                                                   n1)
                                                (GHC.Show.showSignedInt
                                                   GHC.Show.$fShow(,)1
                                                   n_
                                                   (GHC.Types.[] @ GHC.Types.Char))) }
                                   GHC.Types.True
                                   -> GHC.Err.error
                                        @ 'GHC.Types.LiftedRep
                                        @ (m (Data.Vector.Primitive.Mutable.MVector
                                                (Control.Monad.Primitive.PrimState m)
                                                GHC.Types.Double))
                                        (GHC.Stack.Types.PushCallStack
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString# @ b "error"#))
                                           (GHC.Stack.Types.SrcLoc
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "Data.Vector.Primitive.Mutable"#))
                                              (GHC.Base.build
                                                 @ GHC.Types.Char
                                                 (\ @ b ->
                                                  GHC.CString.unpackFoldrCString#
                                                    @ b
                                                    "./Data/Vector/Primitive/Mutable.hs"#))
                                              (GHC.Types.I# 97#)
                                              (GHC.Types.I# 15#)
                                              (GHC.Types.I# 97#)
                                              (GHC.Types.I# 78#))
                                           GHC.Stack.Types.EmptyCallStack)
                                          `cast`
                                        (Sym (GHC.Classes.N:IP[0]
                                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                        (GHC.Base.augment
                                           @ GHC.Types.Char
                                           (\ @ b
                                              (c :: GHC.Types.Char -> b -> b)[OneShot]
                                              (n1 :: b)[OneShot] ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "Primitive.basicUnsafeNew: negative length: "#
                                              c
                                              n1)
                                           (GHC.Show.showSignedInt
                                              GHC.Show.$fShow(,)1
                                              n_
                                              (GHC.Types.[] @ GHC.Types.Char))) })
                                (\ (v1 :: Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m)
                                            GHC.Types.Double) ->
                                 GHC.Base.>>
                                   @ m
                                   $dMonad3
                                   @ ()
                                   @ (Data.Vector.Primitive.Mutable.MVector
                                        (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                   (case v1 of wild1 { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                                    Control.Monad.Primitive.primitive
                                      @ m
                                      $dPrimMonad
                                      @ ()
                                      (\ (s# :: GHC.Prim.State#
                                                  (Control.Monad.Primitive.PrimState m)) ->
                                       case b1
                                              `cast`
                                            (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                                    <GHC.Types.Double>_N) of wild2 { GHC.Types.D# x# ->
                                       case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                                           GHC.Prim.MutableByteArray#
                                                                             s
                                                                           -> GHC.Prim.Int#
                                                                           -> GHC.Prim.Word#
                                                                           -> GHC.Prim.Double#
                                                                           -> GHC.Prim.State#
                                                                                GHC.Prim.RealWorld
                                                                           -> (# GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld #)}
                                              @ (Control.Monad.Primitive.PrimState m)
                                              dt3
                                              dt1
                                              (GHC.Prim.int2Word# dt2)
                                              x#
                                              s#
                                                `cast`
                                              (GHC.Prim.State#
                                                 (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                                      m) GHC.Prim.RealWorld))_R of wild3 { Unit# ds9 ->
                                       (# ds9
                                            `cast`
                                          (GHC.Prim.State#
                                             (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                                     m)))_R,
                                          GHC.Tuple.() #) } }) })
                                   (GHC.Base.return
                                      @ m
                                      $dMonad3
                                      @ (Data.Vector.Primitive.Mutable.MVector
                                           (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                      v1)))
                             (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                              GHC.Base.return
                                @ m
                                $dMonad2
                                @ (Data.Vector.Unboxed.Base.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                x1
                                  `cast`
                                (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                          <Control.Monad.Primitive.PrimState
                                             m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                              <Control.Monad.Primitive.PrimState
                                                                 m>_N))))
                            `cast`
                          (<m>_R (Data.Vector.Unboxed.Base.MVector
                                    <Control.Monad.Primitive.PrimState m>_N
                                    (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                              <GHC.Types.Double>_N)))_N))
                         (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                                     (Control.Monad.Primitive.PrimState m)
                                     (Graphics.Image.Interface.Components
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                          GHC.Base.return
                            @ m
                            $dMonad1
                            @ (Data.Vector.Unboxed.Base.MVector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            x1
                              `cast`
                            (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                      <Control.Monad.Primitive.PrimState m>_N
                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                      <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                       <Control.Monad.Primitive.PrimState
                                                                          m>_N
                                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                                       <GHC.Types.Double>_N))))
                      (\ (bs :: Data.Vector.Unboxed.Base.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.MVector
                              (Control.Monad.Primitive.PrimState m)
                              (GHC.Types.Int,
                               Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (Data.Vector.Unboxed.Base.$WMV_2
                            @ (Control.Monad.Primitive.PrimState m)
                            @ GHC.Types.Int
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            n_
                            as
                            bs))) }) -}
460bf9518f61db2488253c0fde7a225f
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U)><S(S),1*U(U)><S(LSS),1*U(A,U(U,A,U),U(U,A,U))>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ s
                   (i_ :: GHC.Types.Int)
                   (m_ :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            s
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <s>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 case as
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                           <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                       <s>_N) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                 case i_ of wild2 { GHC.Types.I# y ->
                 case m_ of dt5 { GHC.Types.I# dt6 ->
                 case bs
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <s>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <s>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                  <s>_N
                                                                                  (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                       <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                       <s>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                   <s>_N)))) of wild3 { Data.Vector.Primitive.Mutable.MVector dt7 dt8 dt9 ->
                 Data.Vector.Unboxed.Base.$WMV_2
                   @ s
                   @ GHC.Types.Int
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   dt5
                   (Data.Vector.Primitive.Mutable.MVector
                      @ s
                      @ GHC.Types.Int
                      (GHC.Prim.+# dt2 y)
                      dt6
                      dt4)
                     `cast`
                   (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                             <s>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0] <s>_N))
                   (Data.Vector.Primitive.Mutable.MVector
                      @ s
                      @ GHC.Types.Double
                      (GHC.Prim.+# dt7 y)
                      dt6
                      dt9)
                     `cast`
                   (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                             <s>_N) ; (Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                <s>_N) ; ((Data.Vector.Unboxed.Base.MVector
                                                             <s>_N
                                                             (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                       <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                                                             <s>_N
                                                                                                             <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                             <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                                                              <s>_N
                                                                                                                                              <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                              <GHC.Types.Double>_N))))) } } } } }) -}
81082700eb56f4548f7cdcf22811adf5
  $s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> (GHC.Types.Int,
        Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)L),U(1*U(A,A,1*C1(C1(U)),A,A),C(U))><S(LSS),1*U(A,U(U,A,U),U(U,A,U))><L,U(U)><S,1*U(U(U),U(U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (i_ :: GHC.Types.Int)
                   (ds1 :: (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 case ds1 of wild1 { (,) a1 b1 ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (case as
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N) of wild2 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                    case i_ of wild3 { GHC.Types.I# y ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case a1 of wild4 { GHC.Types.I# x# ->
                       case GHC.Prim.writeIntArray#
                              @ (Control.Monad.Primitive.PrimState m)
                              dt4
                              (GHC.Prim.+# dt2 y)
                              x#
                              s# of s'# { DEFAULT ->
                       (# s'#, GHC.Tuple.() #) } }) } })
                   (case bs
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                              <Control.Monad.Primitive.PrimState m>_N
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        m>_N
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N)))) of wild2 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                    case i_ of wild3 { GHC.Types.I# y ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case b1
                              `cast`
                            (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                    <GHC.Types.Double>_N) of wild4 { GHC.Types.D# x# ->
                       case GHC.Prim.writeDoubleArray#
                              @ (Control.Monad.Primitive.PrimState m)
                              dt4
                              (GHC.Prim.+# dt2 y)
                              x#
                              s# of s'# { DEFAULT ->
                       (# s'#, GHC.Tuple.() #) } }) } }) } }) -}
2c0db0df245284eba607a0d5f20ef59a
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Unboxed.Base.MVector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.MVector
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicLength
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeSlice
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicOverlaps
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeNew
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicInitialize
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeReplicate
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeRead
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeWrite
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicClear
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicSet
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeCopy
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeMove
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeGrow -}
4f1aa32b32a2296a83758fc64ab4274b
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicClear ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><L,A>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 GHC.Base.return
                   @ m
                   (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                   @ ()
                   GHC.Tuple.()) -}
5f2f9cd472cba3bea4662f537b8ef5df
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicInitialize ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <Control.Monad.Primitive.PrimState m>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                  <Control.Monad.Primitive.PrimState
                                                                                     m>_N
                                                                                  (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                       <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                       <Control.Monad.Primitive.PrimState
                                                                                                                          m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                     <Control.Monad.Primitive.PrimState
                                                                                                                                        m>_N)))) of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                    case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                        GHC.Prim.MutableByteArray# s
                                                        -> GHC.Prim.Int#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           dt3
                           (GHC.Prim.*# dt1 8#)
                           (GHC.Prim.int2Word# (GHC.Prim.*# dt2 8#))
                           0##
                           s#
                             `cast`
                           (GHC.Prim.State#
                              (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                   m) GHC.Prim.RealWorld))_R of wild2 { Unit# ds9 ->
                    (# ds9
                         `cast`
                       (GHC.Prim.State#
                          (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                  m)))_R,
                       GHC.Tuple.() #) }) }) -}
4763698c50df2fbab15cc3a734064145
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicLength ::
    Data.Vector.Unboxed.Base.MVector
      s
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.Vector.Unboxed.Base.$fMVectorMVectorDouble_$cbasicLength
                  `cast`
                (forall (s :: <*>_N).
                 ((Data.Vector.Unboxed.Base.MVector
                     <s>_N
                     (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                               <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                     <s>_N
                                                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                                                     <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                      <s>_N
                                                                                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                      <GHC.Types.Double>_N)))
                 ->_R <GHC.Types.Int>_R) -}
4a4821da516643ea20d6a9eb18af3e69
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicOverlaps ::
    Data.Vector.Unboxed.Base.MVector
      s
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                Data.Vector.Unboxed.Base.$fMVectorMVectorDouble_$cbasicOverlaps
                  `cast`
                (forall (s :: <*>_N).
                 ((Data.Vector.Unboxed.Base.MVector
                     <s>_N
                     (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                               <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                     <s>_N
                                                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                                                     <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                      <s>_N
                                                                                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                      <GHC.Types.Double>_N)))
                 ->_R ((Data.Vector.Unboxed.Base.MVector
                          <s>_N
                          (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                    <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                          <s>_N
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                           <s>_N
                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                           <GHC.Types.Double>_N)))
                 ->_R <GHC.Types.Bool>_R) -}
fa3f09ed5d933a12bd4292c438205674
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicSet ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><L,U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (val :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <Control.Monad.Primitive.PrimState m>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                  <Control.Monad.Primitive.PrimState
                                                                                     m>_N
                                                                                  (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                       <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                       <Control.Monad.Primitive.PrimState
                                                                                                                          m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                     <Control.Monad.Primitive.PrimState
                                                                                                                                        m>_N)))) of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                    case val
                           `cast`
                         (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                 <GHC.Types.Double>_N) of wild1 { GHC.Types.D# x# ->
                    case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                        GHC.Prim.MutableByteArray# s
                                                        -> GHC.Prim.Int#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.Double#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                           @ (Control.Monad.Primitive.PrimState m)
                           dt3
                           dt1
                           (GHC.Prim.int2Word# dt2)
                           x#
                           s#
                             `cast`
                           (GHC.Prim.State#
                              (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                   m) GHC.Prim.RealWorld))_R of wild2 { Unit# ds9 ->
                    (# ds9
                         `cast`
                       (GHC.Prim.State#
                          (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                  m)))_R,
                       GHC.Tuple.() #) } }) }) -}
f8648844bff4e399193183a8fdf55ac3
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m)
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <Control.Monad.Primitive.PrimState m>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                  <Control.Monad.Primitive.PrimState
                                                                                     m>_N
                                                                                  (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                       <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                       <Control.Monad.Primitive.PrimState
                                                                                                                          m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                     <Control.Monad.Primitive.PrimState
                                                                                                                                        m>_N)))) of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                 case ds1
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <Control.Monad.Primitive.PrimState m>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                  <Control.Monad.Primitive.PrimState
                                                                                     m>_N
                                                                                  (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                       <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                       <Control.Monad.Primitive.PrimState
                                                                                                                          m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                     <Control.Monad.Primitive.PrimState
                                                                                                                                        m>_N)))) of wild1 { Data.Vector.Primitive.Mutable.MVector dt4 dt5 dt6 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                    case GHC.Prim.copyMutableByteArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt6
                           (GHC.Prim.*# dt4 8#)
                           dt3
                           (GHC.Prim.*# dt1 8#)
                           (GHC.Prim.*# dt2 8#)
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) }) } }) -}
c96f625bb764d54ce09eaf649a378f12
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeGrow ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)L),U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))><L,U(U,U,U)><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (len :: GHC.Types.Int) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Graphics.Image.Interface.Components
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    (GHC.Base.>>=
                       @ m
                       $dMonad1
                       @ (Data.Vector.Primitive.Mutable.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                       @ (Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                       (let {
                          $dMonad2 :: GHC.Base.Monad m
                          = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                        } in
                        let {
                          n1 :: GHC.Types.Int
                          = case ds
                                   `cast`
                                 (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                      <Control.Monad.Primitive.PrimState m>_N
                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                      <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                  <Control.Monad.Primitive.PrimState
                                                                     m>_N
                                                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                                                  <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                             <Control.Monad.Primitive.PrimState
                                                                                                m>_N
                                                                                             (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                  <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                  <Control.Monad.Primitive.PrimState
                                                                                                                                     m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                <Control.Monad.Primitive.PrimState
                                                                                                                                                   m>_N)))) of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                            GHC.Types.I# dt2 }
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad2
                          @ (Data.Vector.Primitive.Mutable.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                          @ (Data.Vector.Primitive.Mutable.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                          (let {
                             $dMonad3 :: GHC.Base.Monad m
                             = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                           } in
                           let {
                             n2 :: GHC.Types.Int
                             = case n1 of wild { GHC.Types.I# x ->
                               case len of wild1 { GHC.Types.I# y ->
                               GHC.Types.I# (GHC.Prim.+# x y) } }
                           } in
                           case GHC.Classes.ltInt n2 (GHC.Types.I# 0#) of wild {
                             GHC.Types.False
                             -> case GHC.Classes.gtInt
                                       n2
                                       (GHC.Real.$fIntegralInt_$cdiv
                                          GHC.Base.maxInt
                                          (GHC.Types.I# 8#)) of wild1 {
                                  GHC.Types.False
                                  -> let {
                                       f :: GHC.Types.Int = GHC.Types.I# 0#
                                     } in
                                     GHC.Base.>>=
                                       @ m
                                       $dMonad3
                                       @ (Data.Primitive.ByteArray.MutableByteArray
                                            (Control.Monad.Primitive.PrimState m))
                                       @ (Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                       (case n2 of wild2 { GHC.Types.I# x ->
                                        Control.Monad.Primitive.primitive
                                          @ m
                                          $dPrimMonad
                                          @ (Data.Primitive.ByteArray.MutableByteArray
                                               (Control.Monad.Primitive.PrimState m))
                                          (\ (s# :: GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState m)) ->
                                           case GHC.Prim.newByteArray#
                                                  @ (Control.Monad.Primitive.PrimState m)
                                                  (GHC.Prim.*# x 8#)
                                                  s# of ds1 { (#,#) ipv ipv1 ->
                                           (# ipv,
                                              Data.Primitive.ByteArray.MutableByteArray
                                                @ (Control.Monad.Primitive.PrimState m)
                                                ipv1 #) }) })
                                       (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                   (Control.Monad.Primitive.PrimState m)) ->
                                        GHC.Base.return
                                          @ m
                                          $dMonad3
                                          @ (Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               GHC.Types.Double)
                                          (Data.Vector.Primitive.Mutable.$WMVector
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ GHC.Types.Double
                                             f
                                             n2
                                             x1))
                                  GHC.Types.True
                                  -> GHC.Err.error
                                       @ 'GHC.Types.LiftedRep
                                       @ (m (Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               GHC.Types.Double))
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "error"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Vector.Primitive.Mutable"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Vector/Primitive/Mutable.hs"#))
                                             (GHC.Types.I# 98#)
                                             (GHC.Types.I# 16#)
                                             (GHC.Types.I# 98#)
                                             (GHC.Types.I# 79#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                       (GHC.Base.augment
                                          @ GHC.Types.Char
                                          (\ @ b
                                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                                             (n3 :: b)[OneShot] ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Primitive.basicUnsafeNew: length to large: "#
                                             c
                                             n3)
                                          (GHC.Show.showSignedInt
                                             GHC.Show.$fShow(,)1
                                             n2
                                             (GHC.Types.[] @ GHC.Types.Char))) }
                             GHC.Types.True
                             -> GHC.Err.error
                                  @ 'GHC.Types.LiftedRep
                                  @ (m (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m) GHC.Types.Double))
                                  (GHC.Stack.Types.PushCallStack
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                     (GHC.Stack.Types.SrcLoc
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "Data.Vector.Primitive.Mutable"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "./Data/Vector/Primitive/Mutable.hs"#))
                                        (GHC.Types.I# 97#)
                                        (GHC.Types.I# 15#)
                                        (GHC.Types.I# 97#)
                                        (GHC.Types.I# 78#))
                                     GHC.Stack.Types.EmptyCallStack)
                                    `cast`
                                  (Sym (GHC.Classes.N:IP[0]
                                            <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n3 :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "Primitive.basicUnsafeNew: negative length: "#
                                        c
                                        n3)
                                     (GHC.Show.showSignedInt
                                        GHC.Show.$fShow(,)1
                                        n2
                                        (GHC.Types.[] @ GHC.Types.Char))) })
                          (\ (v' :: Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                           GHC.Base.>>
                             @ m
                             $dMonad2
                             @ ()
                             @ (Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             (case v' of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                              case Data.Vector.Primitive.Mutable.$WMVector
                                     @ (Control.Monad.Primitive.PrimState m)
                                     @ GHC.Types.Double
                                     (GHC.Types.I# dt1)
                                     n1
                                     (Data.Primitive.ByteArray.MutableByteArray
                                        @ (Control.Monad.Primitive.PrimState m)
                                        dt3) of wild1 { Data.Vector.Primitive.Mutable.MVector dt4 dt5 dt6 ->
                              case ds
                                     `cast`
                                   (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                        <Control.Monad.Primitive.PrimState m>_N
                                        <Graphics.Image.ColorSpace.Y.Y>_N
                                        <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                    <Control.Monad.Primitive.PrimState
                                                                       m>_N
                                                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                                                    <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                               <Control.Monad.Primitive.PrimState
                                                                                                  m>_N
                                                                                               (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                    <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                    <Control.Monad.Primitive.PrimState
                                                                                                                                       m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                  <Control.Monad.Primitive.PrimState
                                                                                                                                                     m>_N)))) of wild2 { Data.Vector.Primitive.Mutable.MVector dt7 dt8 dt9 ->
                              Control.Monad.Primitive.primitive
                                @ m
                                $dPrimMonad
                                @ ()
                                (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                                 case GHC.Prim.copyMutableByteArray#
                                        @ (Control.Monad.Primitive.PrimState m)
                                        dt9
                                        (GHC.Prim.*# dt7 8#)
                                        dt6
                                        (GHC.Prim.*# dt4 8#)
                                        (GHC.Prim.*# dt5 8#)
                                        s# of s'# { DEFAULT ->
                                 (# s'#, GHC.Tuple.() #) }) } } })
                             (GHC.Base.return
                                @ m
                                $dMonad2
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                v')))
                       (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                        GHC.Base.return
                          @ m
                          $dMonad1
                          @ (Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                          x1
                            `cast`
                          (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                    <Control.Monad.Primitive.PrimState
                                       m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                        <Control.Monad.Primitive.PrimState m>_N))))
                      `cast`
                    (<m>_R (Data.Vector.Unboxed.Base.MVector
                              <Control.Monad.Primitive.PrimState m>_N
                              (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                        <GHC.Types.Double>_N)))_N))
                   (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Graphics.Image.Interface.Components
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      x1
                        `cast`
                      (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                <Control.Monad.Primitive.PrimState m>_N
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                 <Control.Monad.Primitive.PrimState
                                                                    m>_N
                                                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                                                 <GHC.Types.Double>_N)))) -}
b7e36d05af519c04dbde5494901f2dbc
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeMove ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         (Control.Monad.Primitive.PrimState m)
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S(SSS),1*U(U,U,U)><S(SLS),1*U(U,A,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                Data.Vector.Unboxed.Base.$fMVectorMVectorDouble_$cbasicUnsafeMove
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R ((Data.Vector.Unboxed.Base.MVector
                          <Control.Monad.Primitive.PrimState m>_N
                          (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                    <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                          <Control.Monad.Primitive.PrimState
                                                                             m>_N
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                           <Control.Monad.Primitive.PrimState
                                                                                                              m>_N
                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                           <GHC.Types.Double>_N)))
                 ->_R ((Data.Vector.Unboxed.Base.MVector
                          <Control.Monad.Primitive.PrimState m>_N
                          (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                    <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                          <Control.Monad.Primitive.PrimState
                                                                             m>_N
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                           <Control.Monad.Primitive.PrimState
                                                                                                              m>_N
                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                           <GHC.Types.Double>_N)))
                 ->_R <m ()>_R) -}
f10f7ff3c808684b4ca0a89f7aa51aee
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeNew ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)L),U(1*U(A,C(C1(U)),A,C(U),A),1*C1(U))><L,1*U(U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (len :: GHC.Types.Int) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Graphics.Image.Interface.Components
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    (GHC.Base.>>=
                       @ m
                       $dMonad1
                       @ (Data.Vector.Primitive.Mutable.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                       @ (Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                       (let {
                          $dMonad2 :: GHC.Base.Monad m
                          = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                        } in
                        case GHC.Classes.ltInt len (GHC.Types.I# 0#) of wild {
                          GHC.Types.False
                          -> case GHC.Classes.gtInt
                                    len
                                    (GHC.Real.$fIntegralInt_$cdiv
                                       GHC.Base.maxInt
                                       (GHC.Types.I# 8#)) of wild1 {
                               GHC.Types.False
                               -> let {
                                    f :: GHC.Types.Int = GHC.Types.I# 0#
                                  } in
                                  GHC.Base.>>=
                                    @ m
                                    $dMonad2
                                    @ (Data.Primitive.ByteArray.MutableByteArray
                                         (Control.Monad.Primitive.PrimState m))
                                    @ (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                    (case len of wild2 { GHC.Types.I# x ->
                                     Control.Monad.Primitive.primitive
                                       @ m
                                       $dPrimMonad
                                       @ (Data.Primitive.ByteArray.MutableByteArray
                                            (Control.Monad.Primitive.PrimState m))
                                       (\ (s# :: GHC.Prim.State#
                                                   (Control.Monad.Primitive.PrimState m)) ->
                                        case GHC.Prim.newByteArray#
                                               @ (Control.Monad.Primitive.PrimState m)
                                               (GHC.Prim.*# x 8#)
                                               s# of ds1 { (#,#) ipv ipv1 ->
                                        (# ipv,
                                           Data.Primitive.ByteArray.MutableByteArray
                                             @ (Control.Monad.Primitive.PrimState m)
                                             ipv1 #) }) })
                                    (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                (Control.Monad.Primitive.PrimState m)) ->
                                     GHC.Base.return
                                       @ m
                                       $dMonad2
                                       @ (Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                       (Data.Vector.Primitive.Mutable.$WMVector
                                          @ (Control.Monad.Primitive.PrimState m)
                                          @ GHC.Types.Double
                                          f
                                          len
                                          x1))
                               GHC.Types.True
                               -> GHC.Err.error
                                    @ 'GHC.Types.LiftedRep
                                    @ (m (Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double))
                                    (GHC.Stack.Types.PushCallStack
                                       (GHC.Base.build
                                          @ GHC.Types.Char
                                          (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                       (GHC.Stack.Types.SrcLoc
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "Data.Vector.Primitive.Mutable"#))
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "./Data/Vector/Primitive/Mutable.hs"#))
                                          (GHC.Types.I# 98#)
                                          (GHC.Types.I# 16#)
                                          (GHC.Types.I# 98#)
                                          (GHC.Types.I# 79#))
                                       GHC.Stack.Types.EmptyCallStack)
                                      `cast`
                                    (Sym (GHC.Classes.N:IP[0]
                                              <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                    (GHC.Base.augment
                                       @ GHC.Types.Char
                                       (\ @ b
                                          (c :: GHC.Types.Char -> b -> b)[OneShot]
                                          (n1 :: b)[OneShot] ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          "Primitive.basicUnsafeNew: length to large: "#
                                          c
                                          n1)
                                       (GHC.Show.showSignedInt
                                          GHC.Show.$fShow(,)1
                                          len
                                          (GHC.Types.[] @ GHC.Types.Char))) }
                          GHC.Types.True
                          -> GHC.Err.error
                               @ 'GHC.Types.LiftedRep
                               @ (m (Data.Vector.Primitive.Mutable.MVector
                                       (Control.Monad.Primitive.PrimState m) GHC.Types.Double))
                               (GHC.Stack.Types.PushCallStack
                                  (GHC.Base.build
                                     @ GHC.Types.Char
                                     (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                  (GHC.Stack.Types.SrcLoc
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "Data.Vector.Primitive.Mutable"#))
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "./Data/Vector/Primitive/Mutable.hs"#))
                                     (GHC.Types.I# 97#)
                                     (GHC.Types.I# 15#)
                                     (GHC.Types.I# 97#)
                                     (GHC.Types.I# 78#))
                                  GHC.Stack.Types.EmptyCallStack)
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n1 :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     "Primitive.basicUnsafeNew: negative length: "#
                                     c
                                     n1)
                                  (GHC.Show.showSignedInt
                                     GHC.Show.$fShow(,)1
                                     len
                                     (GHC.Types.[] @ GHC.Types.Char))) })
                       (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                        GHC.Base.return
                          @ m
                          $dMonad1
                          @ (Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                          x1
                            `cast`
                          (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                    <Control.Monad.Primitive.PrimState
                                       m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                        <Control.Monad.Primitive.PrimState m>_N))))
                      `cast`
                    (<m>_R (Data.Vector.Unboxed.Base.MVector
                              <Control.Monad.Primitive.PrimState m>_N
                              (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                        <GHC.Types.Double>_N)))_N))
                   (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Graphics.Image.Interface.Components
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      x1
                        `cast`
                      (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                <Control.Monad.Primitive.PrimState m>_N
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                 <Control.Monad.Primitive.PrimState
                                                                    m>_N
                                                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                                                 <GHC.Types.Double>_N)))) -}
500b8c2952ff72a6fbe072fc4bf3731a
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeRead ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> m (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(1*U(A,1*C1(C1(U)),A,C(U),A),1*C1(U))><L,1*U(U,A,U)><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (idx :: GHC.Types.Int) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Graphics.Image.Interface.Components
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (case ds
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                              <Control.Monad.Primitive.PrimState m>_N
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        m>_N
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N)))) of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                    case idx of wild1 { GHC.Types.I# y ->
                    (Control.Monad.Primitive.primitive
                       @ m
                       $dPrimMonad
                       @ GHC.Types.Double
                       (Data.Primitive.Types.$fPrimDouble_$creadByteArray#
                          @ (Control.Monad.Primitive.PrimState m)
                          dt3
                          (GHC.Prim.+# dt1 y)))
                      `cast`
                    (<m>_R (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                     <GHC.Types.Double>_N))) } })
                   (\ (x1 :: Graphics.Image.Interface.Components
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      x1
                        `cast`
                      (Sub (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                <GHC.Types.Double>_N) ; (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)))) -}
6bd8ff9ecf077f906508271f304ad00a
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeReplicate ::
    Control.Monad.Primitive.PrimMonad m =>
    GHC.Types.Int
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> m (Data.Vector.Unboxed.Base.MVector
            (Control.Monad.Primitive.PrimState m)
            (Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)L),U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))><L,1*U(U)><L,U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (len :: GHC.Types.Int)
                   (val :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Graphics.Image.Interface.Components
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.MVector
                        (Control.Monad.Primitive.PrimState m)
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    (GHC.Base.>>=
                       @ m
                       $dMonad1
                       @ (Data.Vector.Primitive.Mutable.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                       @ (Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                       (let {
                          $dMonad2 :: GHC.Base.Monad m
                          = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad2
                          @ (Data.Vector.Primitive.Mutable.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                          @ (Data.Vector.Primitive.Mutable.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                          (let {
                             $dMonad3 :: GHC.Base.Monad m
                             = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                           } in
                           case GHC.Classes.ltInt len (GHC.Types.I# 0#) of wild {
                             GHC.Types.False
                             -> case GHC.Classes.gtInt
                                       len
                                       (GHC.Real.$fIntegralInt_$cdiv
                                          GHC.Base.maxInt
                                          (GHC.Types.I# 8#)) of wild1 {
                                  GHC.Types.False
                                  -> let {
                                       f :: GHC.Types.Int = GHC.Types.I# 0#
                                     } in
                                     GHC.Base.>>=
                                       @ m
                                       $dMonad3
                                       @ (Data.Primitive.ByteArray.MutableByteArray
                                            (Control.Monad.Primitive.PrimState m))
                                       @ (Data.Vector.Primitive.Mutable.MVector
                                            (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                       (case len of wild2 { GHC.Types.I# x1 ->
                                        Control.Monad.Primitive.primitive
                                          @ m
                                          $dPrimMonad
                                          @ (Data.Primitive.ByteArray.MutableByteArray
                                               (Control.Monad.Primitive.PrimState m))
                                          (\ (s# :: GHC.Prim.State#
                                                      (Control.Monad.Primitive.PrimState m)) ->
                                           case GHC.Prim.newByteArray#
                                                  @ (Control.Monad.Primitive.PrimState m)
                                                  (GHC.Prim.*# x1 8#)
                                                  s# of ds1 { (#,#) ipv ipv1 ->
                                           (# ipv,
                                              Data.Primitive.ByteArray.MutableByteArray
                                                @ (Control.Monad.Primitive.PrimState m)
                                                ipv1 #) }) })
                                       (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                                   (Control.Monad.Primitive.PrimState m)) ->
                                        GHC.Base.return
                                          @ m
                                          $dMonad3
                                          @ (Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               GHC.Types.Double)
                                          (Data.Vector.Primitive.Mutable.$WMVector
                                             @ (Control.Monad.Primitive.PrimState m)
                                             @ GHC.Types.Double
                                             f
                                             len
                                             x1))
                                  GHC.Types.True
                                  -> GHC.Err.error
                                       @ 'GHC.Types.LiftedRep
                                       @ (m (Data.Vector.Primitive.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               GHC.Types.Double))
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "error"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Vector.Primitive.Mutable"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Vector/Primitive/Mutable.hs"#))
                                             (GHC.Types.I# 98#)
                                             (GHC.Types.I# 16#)
                                             (GHC.Types.I# 98#)
                                             (GHC.Types.I# 79#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                       (GHC.Base.augment
                                          @ GHC.Types.Char
                                          (\ @ b
                                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                                             (n1 :: b)[OneShot] ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Primitive.basicUnsafeNew: length to large: "#
                                             c
                                             n1)
                                          (GHC.Show.showSignedInt
                                             GHC.Show.$fShow(,)1
                                             len
                                             (GHC.Types.[] @ GHC.Types.Char))) }
                             GHC.Types.True
                             -> GHC.Err.error
                                  @ 'GHC.Types.LiftedRep
                                  @ (m (Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m) GHC.Types.Double))
                                  (GHC.Stack.Types.PushCallStack
                                     (GHC.Base.build
                                        @ GHC.Types.Char
                                        (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                     (GHC.Stack.Types.SrcLoc
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "Data.Vector.Primitive.Mutable"#))
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              "./Data/Vector/Primitive/Mutable.hs"#))
                                        (GHC.Types.I# 97#)
                                        (GHC.Types.I# 15#)
                                        (GHC.Types.I# 97#)
                                        (GHC.Types.I# 78#))
                                     GHC.Stack.Types.EmptyCallStack)
                                    `cast`
                                  (Sym (GHC.Classes.N:IP[0]
                                            <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n1 :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        "Primitive.basicUnsafeNew: negative length: "#
                                        c
                                        n1)
                                     (GHC.Show.showSignedInt
                                        GHC.Show.$fShow(,)1
                                        len
                                        (GHC.Types.[] @ GHC.Types.Char))) })
                          (\ (v1 :: Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                           GHC.Base.>>
                             @ m
                             $dMonad2
                             @ ()
                             @ (Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                             (case v1 of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                              Control.Monad.Primitive.primitive
                                @ m
                                $dPrimMonad
                                @ ()
                                (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                                 case val
                                        `cast`
                                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                              <GHC.Types.Double>_N) of wild1 { GHC.Types.D# x# ->
                                 case {__pkg_ccall primitive-0.6.3.0 forall s.
                                                                     GHC.Prim.MutableByteArray# s
                                                                     -> GHC.Prim.Int#
                                                                     -> GHC.Prim.Word#
                                                                     -> GHC.Prim.Double#
                                                                     -> GHC.Prim.State#
                                                                          GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld #)}
                                        @ (Control.Monad.Primitive.PrimState m)
                                        dt3
                                        dt1
                                        (GHC.Prim.int2Word# dt2)
                                        x#
                                        s#
                                          `cast`
                                        (GHC.Prim.State#
                                           (UnsafeCo nominal (Control.Monad.Primitive.PrimState
                                                                m) GHC.Prim.RealWorld))_R of wild2 { Unit# ds9 ->
                                 (# ds9
                                      `cast`
                                    (GHC.Prim.State#
                                       (UnsafeCo nominal GHC.Prim.RealWorld (Control.Monad.Primitive.PrimState
                                                                               m)))_R,
                                    GHC.Tuple.() #) } }) })
                             (GHC.Base.return
                                @ m
                                $dMonad2
                                @ (Data.Vector.Primitive.Mutable.MVector
                                     (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                v1)))
                       (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                        GHC.Base.return
                          @ m
                          $dMonad1
                          @ (Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                          x1
                            `cast`
                          (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                    <Control.Monad.Primitive.PrimState
                                       m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                        <Control.Monad.Primitive.PrimState m>_N))))
                      `cast`
                    (<m>_R (Data.Vector.Unboxed.Base.MVector
                              <Control.Monad.Primitive.PrimState m>_N
                              (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                        <GHC.Types.Double>_N)))_N))
                   (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Graphics.Image.Interface.Components
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.MVector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      x1
                        `cast`
                      (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                <Control.Monad.Primitive.PrimState m>_N
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                 <Control.Monad.Primitive.PrimState
                                                                    m>_N
                                                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                                                 <GHC.Types.Double>_N)))) -}
9f7bd6271bdb3bd05f89614840b89170
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.MVector
         s
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.MVector
         s
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, True)
                Data.Vector.Unboxed.Base.$fMVectorMVectorDouble_$cbasicUnsafeSlice
                  `cast`
                (forall (s :: <*>_N).
                 <GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R ((Data.Vector.Unboxed.Base.MVector
                          <s>_N
                          (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                    <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                          <s>_N
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                           <s>_N
                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                           <GHC.Types.Double>_N)))
                 ->_R (Data.Vector.Unboxed.Base.MVector
                         <s>_N
                         (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                   <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                         <s>_N
                                                                         <Graphics.Image.ColorSpace.Y.Y>_N
                                                                         <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                          <s>_N
                                                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                          <GHC.Types.Double>_N))) -}
d838f9caa25e161910ec3fe6f663507b
  $s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeWrite ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.MVector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,A,U)><S,1*U(U)><L,U(U)>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (idx :: GHC.Types.Int)
                   (val :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                           <Control.Monad.Primitive.PrimState m>_N
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                       <Control.Monad.Primitive.PrimState m>_N
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                  <Control.Monad.Primitive.PrimState
                                                                                     m>_N
                                                                                  (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                       <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                       <Control.Monad.Primitive.PrimState
                                                                                                                          m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                     <Control.Monad.Primitive.PrimState
                                                                                                                                        m>_N)))) of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                 case idx of wild1 { GHC.Types.I# y ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                    case val
                           `cast`
                         (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                 <GHC.Types.Double>_N) of wild2 { GHC.Types.D# x# ->
                    case GHC.Prim.writeDoubleArray#
                           @ (Control.Monad.Primitive.PrimState m)
                           dt3
                           (GHC.Prim.+# dt1 y)
                           x#
                           s# of s'# { DEFAULT ->
                    (# s'#, GHC.Tuple.() #) } }) } }) -}
73a8bf34c086adb4bdb7d6f39206520d
  $s$fArrayRPUcse_$s$fNumPixel ::
    GHC.Num.Num
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  (\ (x :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$c<*>
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     (GHC.Float.plusDouble
                        x `cast`
                        (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                <GHC.Types.Double>_N))
                       `cast`
                     (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                               <GHC.Types.Double
                                -> GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double
                                                                                                             -> GHC.Types.Double>_N))
                  (\ (x :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$c<*>
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     (GHC.Float.minusDouble
                        x `cast`
                        (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                <GHC.Types.Double>_N))
                       `cast`
                     (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                               <GHC.Types.Double
                                -> GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double
                                                                                                             -> GHC.Types.Double>_N))
                  (\ (x :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$c<*>
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     (GHC.Float.timesDouble
                        x `cast`
                        (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                <GHC.Types.Double>_N))
                       `cast`
                     (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                               <GHC.Types.Double
                                -> GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double
                                                                                                             -> GHC.Types.Double>_N))
                  (Graphics.Image.Interface.$fNumPixel_$cnegate
                     @ Graphics.Image.ColorSpace.Y.Y
                     @ GHC.Types.Double
                     Lib.$s$fArrayRPUcse_$s$fColorSpaceYe)
                  (Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cfmap
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     GHC.Float.fabsDouble)
                  (Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cfmap
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     GHC.Float.$fNumDouble_$csignum)
                  GHC.Float.$fNumDouble_$cfromInteger
                    `cast`
                  (<GHC.Integer.Type.Integer>_R
                   ->_R Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                 <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) -}
8d1cc3139c0a4b23f85e6779941fd974
  $s$fArrayRPUcse_$s$fSourceUa ::
    Data.Array.Repa.Base.Source
      Data.Array.Repa.Repr.Unboxed.U
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Repa.Repr.Unboxed.U
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  (Data.Array.Repa.Repr.Unboxed.$fSourceUa_$cextent
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fSourceUa_$cindex
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fSourceUa_$cunsafeIndex
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fSourceUa_$clinearIndex
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fSourceUa_$cunsafeLinearIndex
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fSourceUa_$cdeepSeqArray
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel) -}
b8abb39b17465f5ead6d64e03eaf4fe1
  $s$fArrayRPUcse_$s$fTargetUe ::
    Data.Array.Repa.Eval.Target.Target
      Data.Array.Repa.Repr.Unboxed.U
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Array.Repa.Repr.Unboxed.U
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  (Data.Array.Repa.Repr.Unboxed.$fTargetUe_$cnewMVec
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fTargetUe_$cunsafeWriteMVec
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fTargetUe_$cunsafeFreezeMVec
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fTargetUe_$cdeepSeqMVec
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel)
                  (Data.Array.Repa.Repr.Unboxed.$fTargetUe_$ctouchMVec
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayRPUcse_$s$fUnboxPixel) -}
0b0022d68d9bf09aa8ee0dd8ac348db7
  $s$fArrayRPUcse_$s$fUnbox(,) ::
    Data.Vector.Unboxed.Base.Unbox
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Int,
                     Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,) -}
956d88ea08a4b54d7d35c3dca41b5641
  $s$fArrayRPUcse_$s$fUnboxPixel ::
    Data.Vector.Unboxed.Base.Unbox
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel -}
497c6f2c204603397f85e23faa95069d
  $s$fArrayRPUcse_$s$fVectorVector(,) ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (GHC.Types.Int,
                     Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <(GHC.Types.Int,
                       Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_N)_R
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeFreeze
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeThaw
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicLength
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeSlice
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeIndexM
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeCopy
                  Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$celemseq -}
124c09aa9958f03e93aca12564f7b8ba
  $s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Unboxed.Base.Vector
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.V_2 dt1 ds1 ds2 ->
                 GHC.Types.I# dt1 }) -}
4d66f697e68655c049ca503f0ac0bcf2
  $s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)L),U(1*U(A,A,1*C1(C1(U)),A,A),C(U))><S(LSS),1*U(A,U(U,U,U),U(U,U,U))><S(LSS),1*U(A,U(U,A,U),U(U,A,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: Data.Vector.Unboxed.Base.Vector
                             (GHC.Types.Int,
                              Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                              m>_N <(GHC.Types.Int,
                                                                                     Graphics.Image.Interface.Pixel
                                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                                       GHC.Types.Double)>_N ; Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                                                                                                                  <Control.Monad.Primitive.PrimState
                                                                                                                     m>_N
                                                                                                                  <GHC.Types.Int>_N
                                                                                                                  <Graphics.Image.Interface.Pixel
                                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                                     GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as1 bs1 ->
                 case ds1
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild1 { Data.Vector.Unboxed.Base.V_2 dt2 as2 bs2 ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ ()
                   (case as1
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                            <Control.Monad.Primitive.PrimState
                                               m>_N) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                    case as2
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:VectorInt0[0] ; Data.Vector.Unboxed.Base.N:R:VectorInt[0]) of wild3 { Data.Vector.Primitive.Vector dt6 dt7 dt8 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case GHC.Prim.copyByteArray#
                              @ (Control.Monad.Primitive.PrimState m)
                              dt8
                              (GHC.Prim.*# dt6 8#)
                              dt5
                              (GHC.Prim.*# dt3 8#)
                              (GHC.Prim.*# dt4 8#)
                              s# of s'# { DEFAULT ->
                       (# s'#, GHC.Tuple.() #) }) } })
                   (case bs1
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                              <Control.Monad.Primitive.PrimState m>_N
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                          <Control.Monad.Primitive.PrimState m>_N
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                     <Control.Monad.Primitive.PrimState
                                                                                        m>_N
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                          <Control.Monad.Primitive.PrimState
                                                                                                                             m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                                           m>_N)))) of wild2 { Data.Vector.Primitive.Mutable.MVector dt3 dt4 dt5 ->
                    case bs2
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.Vector
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0])))) of wild3 { Data.Vector.Primitive.Vector dt6 dt7 dt8 ->
                    Control.Monad.Primitive.primitive
                      @ m
                      $dPrimMonad
                      @ ()
                      (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                       case GHC.Prim.copyByteArray#
                              @ (Control.Monad.Primitive.PrimState m)
                              dt8
                              (GHC.Prim.*# dt6 8#)
                              dt5
                              (GHC.Prim.*# dt3 8#)
                              (GHC.Prim.*# dt4 8#)
                              s# of s'# { DEFAULT ->
                       (# s'#, GHC.Tuple.() #) }) } }) } }) -}
0d65b2fe6bd2264e0199c205ed79fdf0
  $s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m (Data.Vector.Unboxed.Base.Vector
            (GHC.Types.Int,
             Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,C(U),A),C(U))><S(LSS),1*U(U,U(U,U,U),U(U,U,U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                              m>_N <(GHC.Types.Int,
                                                                                     Graphics.Image.Interface.Pixel
                                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                                       GHC.Types.Double)>_N ; Data.Vector.Unboxed.Base.D:R:MVectors(,)0[0]
                                                                                                                  <Control.Monad.Primitive.PrimState
                                                                                                                     m>_N
                                                                                                                  <GHC.Types.Int>_N
                                                                                                                  <Graphics.Image.Interface.Pixel
                                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                                     GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.MV_2 dt1 as bs ->
                 let {
                   n_ :: GHC.Types.Int = GHC.Types.I# dt1
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Int)
                   @ (Data.Vector.Unboxed.Base.Vector
                        (GHC.Types.Int,
                         Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    GHC.Base.>>=
                      @ m
                      $dMonad1
                      @ (Data.Vector.Primitive.Vector GHC.Types.Int)
                      @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Int)
                      (let {
                         $dMonad2 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       case as
                              `cast`
                            (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                                 <Control.Monad.Primitive.PrimState
                                    m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                               <Control.Monad.Primitive.PrimState
                                                  m>_N) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                       let {
                         f :: GHC.Types.Int = GHC.Types.I# dt2
                       } in
                       let {
                         f1 :: GHC.Types.Int = GHC.Types.I# dt3
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad2
                         @ Data.Primitive.ByteArray.ByteArray
                         @ (Data.Vector.Primitive.Vector GHC.Types.Int)
                         (Control.Monad.Primitive.primitive
                            @ m
                            $dPrimMonad
                            @ Data.Primitive.ByteArray.ByteArray
                            (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                             case GHC.Prim.unsafeFreezeByteArray#
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt4
                                    s# of ds1 { (#,#) ipv ipv1 ->
                             (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) }))
                         (\ (x1 :: Data.Primitive.ByteArray.ByteArray) ->
                          GHC.Base.return
                            @ m
                            $dMonad2
                            @ (Data.Vector.Primitive.Vector GHC.Types.Int)
                            (Data.Vector.Primitive.$WVector @ GHC.Types.Int f f1 x1)) })
                      (\ (x1 :: Data.Vector.Primitive.Vector GHC.Types.Int) ->
                       GHC.Base.return
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Int)
                         x1
                           `cast`
                         (Sym (Data.Vector.Unboxed.Base.N:R:VectorInt[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorInt0[0]))))
                   (\ (as' :: Data.Vector.Unboxed.Base.Vector GHC.Types.Int) ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Data.Vector.Unboxed.Base.Vector
                           (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       GHC.Base.>>=
                         @ m
                         $dMonad1
                         @ (Data.Vector.Unboxed.Base.Vector
                              (Graphics.Image.Interface.Components
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         @ (Data.Vector.Unboxed.Base.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (let {
                            $dMonad2 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          (GHC.Base.>>=
                             @ m
                             $dMonad2
                             @ (Data.Vector.Primitive.Vector GHC.Types.Double)
                             @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                             (let {
                                $dMonad3 :: GHC.Base.Monad m
                                = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                              } in
                              case bs
                                     `cast`
                                   (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                        <Control.Monad.Primitive.PrimState m>_N
                                        <Graphics.Image.ColorSpace.Y.Y>_N
                                        <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                    <Control.Monad.Primitive.PrimState
                                                                       m>_N
                                                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                                                    <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                               <Control.Monad.Primitive.PrimState
                                                                                                  m>_N
                                                                                               (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                    <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                    <Control.Monad.Primitive.PrimState
                                                                                                                                       m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                  <Control.Monad.Primitive.PrimState
                                                                                                                                                     m>_N)))) of wild1 { Data.Vector.Primitive.Mutable.MVector dt2 dt3 dt4 ->
                              let {
                                f :: GHC.Types.Int = GHC.Types.I# dt2
                              } in
                              let {
                                f1 :: GHC.Types.Int = GHC.Types.I# dt3
                              } in
                              GHC.Base.>>=
                                @ m
                                $dMonad3
                                @ Data.Primitive.ByteArray.ByteArray
                                @ (Data.Vector.Primitive.Vector GHC.Types.Double)
                                (Control.Monad.Primitive.primitive
                                   @ m
                                   $dPrimMonad
                                   @ Data.Primitive.ByteArray.ByteArray
                                   (\ (s# :: GHC.Prim.State#
                                               (Control.Monad.Primitive.PrimState m)) ->
                                    case GHC.Prim.unsafeFreezeByteArray#
                                           @ (Control.Monad.Primitive.PrimState m)
                                           dt4
                                           s# of ds1 { (#,#) ipv ipv1 ->
                                    (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) }))
                                (\ (x1 :: Data.Primitive.ByteArray.ByteArray) ->
                                 GHC.Base.return
                                   @ m
                                   $dMonad3
                                   @ (Data.Vector.Primitive.Vector GHC.Types.Double)
                                   (Data.Vector.Primitive.$WVector @ GHC.Types.Double f f1 x1)) })
                             (\ (x1 :: Data.Vector.Primitive.Vector GHC.Types.Double) ->
                              GHC.Base.return
                                @ m
                                $dMonad2
                                @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                                x1
                                  `cast`
                                (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0]))))
                            `cast`
                          (<m>_R (Data.Vector.Unboxed.Base.Vector
                                    (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                              <GHC.Types.Double>_N)))_N))
                         (\ (x1 :: Data.Vector.Unboxed.Base.Vector
                                     (Graphics.Image.Interface.Components
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                          GHC.Base.return
                            @ m
                            $dMonad1
                            @ (Data.Vector.Unboxed.Base.Vector
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            x1
                              `cast`
                            (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                      <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                                       <GHC.Types.Double>_N))))
                      (\ (bs' :: Data.Vector.Unboxed.Base.Vector
                                   (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (Data.Vector.Unboxed.Base.Vector
                              (GHC.Types.Int,
                               Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (Data.Vector.Unboxed.Base.$WV_2
                            @ GHC.Types.Int
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            n_
                            as'
                            bs'))) }) -}
0015bc6db63a40acda69b75688266590
  $s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> m (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S(LSS),1*U(A,U(U,A,U),U(U,A,U))><L,U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (i_ :: GHC.Types.Int) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.V_2 dt1 as bs ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ GHC.Types.Int
                   @ (GHC.Types.Int,
                      Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (case as
                           `cast`
                         (Data.Vector.Unboxed.Base.D:R:VectorInt0[0] ; Data.Vector.Unboxed.Base.N:R:VectorInt[0]) of wild1 { Data.Vector.Primitive.Vector dt2 dt3 dt4 ->
                    case i_ of wild2 { GHC.Types.I# y ->
                    case GHC.Prim.indexIntArray#
                           dt4
                           (GHC.Prim.+# dt2 y) of wild3 { DEFAULT ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ GHC.Types.Int
                      (GHC.Types.I# wild3) } } })
                   (\ (a1 :: GHC.Types.Int) ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      @ (GHC.Types.Int,
                         Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      (GHC.Base.>>=
                         @ m
                         $dMonad
                         @ (Graphics.Image.Interface.Components
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (case bs
                                 `cast`
                               (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                    <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.Vector
                                                                                           (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0])))) of wild1 { Data.Vector.Primitive.Vector dt2 dt3 dt4 ->
                          case i_ of wild2 { GHC.Types.I# y ->
                          case GHC.Prim.indexDoubleArray#
                                 dt4
                                 (GHC.Prim.+# dt2 y) of wild3 { DEFAULT ->
                          (GHC.Base.return
                             @ m
                             $dMonad
                             @ GHC.Types.Double
                             (GHC.Types.D# wild3))
                            `cast`
                          (<m>_R (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                           <GHC.Types.Double>_N))) } } })
                         (\ (x1 :: Graphics.Image.Interface.Components
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                          GHC.Base.return
                            @ m
                            $dMonad
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            x1
                              `cast`
                            (Sub (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                      <GHC.Types.Double>_N) ; (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                        <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N))))
                      (\ (b1 :: Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (a1, b1))) }) -}
3906fc066bdd9f99208c6d8fc90545e0
  $s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (GHC.Types.Int,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(U)><S(S),1*U(U)><S(LSS),1*U(A,U(U,A,U),U(U,A,U))>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i_ :: GHC.Types.Int)
                   (m_ :: GHC.Types.Int)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.V_2 dt1 as bs ->
                 case as
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:VectorInt0[0] ; Data.Vector.Unboxed.Base.N:R:VectorInt[0]) of wild1 { Data.Vector.Primitive.Vector dt2 dt3 dt4 ->
                 case i_ of wild2 { GHC.Types.I# y ->
                 case bs
                        `cast`
                      (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                                       <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.Vector
                                                                                  (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                       <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0])))) of wild3 { Data.Vector.Primitive.Vector dt5 dt6 dt7 ->
                 Data.Vector.Unboxed.Base.$WV_2
                   @ GHC.Types.Int
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   m_
                   (Data.Vector.Primitive.$WVector
                      @ GHC.Types.Int
                      (GHC.Types.I# (GHC.Prim.+# dt2 y))
                      m_
                      (Data.Primitive.ByteArray.ByteArray dt4))
                     `cast`
                   (Sym (Data.Vector.Unboxed.Base.N:R:VectorInt[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorInt0[0]))
                   (Data.Vector.Primitive.$WVector
                      @ GHC.Types.Double
                      (GHC.Types.I# (GHC.Prim.+# dt5 y))
                      m_
                      (Data.Primitive.ByteArray.ByteArray dt7))
                     `cast`
                   (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; (Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0]) ; ((Data.Vector.Unboxed.Base.Vector
                                                                                                                                    (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                                                              <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                                                                                                                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                                                    <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                                                                                                                                                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                                                                                     <GHC.Types.Double>_N))))) } } } }) -}
9e5af52a39d04010de7d5a21b08d3af6
  $s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (GHC.Types.Int,
             Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,C(U),A),C(U))><S(LSS),1*U(U,U(U,U,U),U(U,U,U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Unboxed.Base.Vector
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Data.Vector.Unboxed.Base.D:R:Vector(,)0[0]
                           <GHC.Types.Int>_N
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y
                              GHC.Types.Double>_N) of wild { Data.Vector.Unboxed.Base.V_2 dt1 as bs ->
                 let {
                   n_ :: GHC.Types.Int = GHC.Types.I# dt1
                 } in
                 (GHC.Base.>>=
                    @ m
                    $dMonad
                    @ (Data.Vector.Unboxed.Base.MVector
                         (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                    @ (Data.Vector.Unboxed.Base.MVector
                         (Control.Monad.Primitive.PrimState m)
                         (GHC.Types.Int,
                          Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                    (let {
                       $dMonad1 :: GHC.Base.Monad m
                       = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                     } in
                     GHC.Base.>>=
                       @ m
                       $dMonad1
                       @ (Data.Vector.Primitive.Mutable.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                       @ (Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                       (let {
                          $dMonad2 :: GHC.Base.Monad m
                          = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                        } in
                        case as
                               `cast`
                             (Data.Vector.Unboxed.Base.D:R:VectorInt0[0] ; Data.Vector.Unboxed.Base.N:R:VectorInt[0]) of wild1 { Data.Vector.Primitive.Vector dt2 dt3 dt4 ->
                        let {
                          f :: GHC.Types.Int = GHC.Types.I# dt2
                        } in
                        let {
                          f1 :: GHC.Types.Int = GHC.Types.I# dt3
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad2
                          @ (Data.Primitive.ByteArray.MutableByteArray
                               (Control.Monad.Primitive.PrimState m))
                          @ (Data.Vector.Primitive.Mutable.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                          (Control.Monad.Primitive.primitive
                             @ m
                             $dPrimMonad
                             @ (Data.Primitive.ByteArray.MutableByteArray
                                  (Control.Monad.Primitive.PrimState m))
                             (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                              (# s#,
                                 Data.Primitive.ByteArray.MutableByteArray
                                   @ (Control.Monad.Primitive.PrimState m)
                                   dt4
                                     `cast`
                                   (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                     (Control.Monad.Primitive.PrimState
                                                                                        m))) #)))
                          (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                      (Control.Monad.Primitive.PrimState m)) ->
                           GHC.Base.return
                             @ m
                             $dMonad2
                             @ (Data.Vector.Primitive.Mutable.MVector
                                  (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                             (Data.Vector.Primitive.Mutable.$WMVector
                                @ (Control.Monad.Primitive.PrimState m)
                                @ GHC.Types.Int
                                f
                                f1
                                x1)) })
                       (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                        GHC.Base.return
                          @ m
                          $dMonad1
                          @ (Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m) GHC.Types.Int)
                          x1
                            `cast`
                          (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsInt[0]
                                    <Control.Monad.Primitive.PrimState
                                       m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsInt0[0]
                                                        <Control.Monad.Primitive.PrimState m>_N))))
                    (\ (as' :: Data.Vector.Unboxed.Base.MVector
                                 (Control.Monad.Primitive.PrimState m) GHC.Types.Int) ->
                     GHC.Base.>>=
                       @ m
                       $dMonad
                       @ (Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                       @ (Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                       (let {
                          $dMonad1 :: GHC.Base.Monad m
                          = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad1
                          @ (Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Graphics.Image.Interface.Components
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                          @ (Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                          (let {
                             $dMonad2 :: GHC.Base.Monad m
                             = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                           } in
                           (GHC.Base.>>=
                              @ m
                              $dMonad2
                              @ (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                              @ (Data.Vector.Unboxed.Base.MVector
                                   (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                              (let {
                                 $dMonad3 :: GHC.Base.Monad m
                                 = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                               } in
                               case bs
                                      `cast`
                                    (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                         <Graphics.Image.ColorSpace.Y.Y>_N
                                         <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                                                     <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.Vector
                                                                                                (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                     <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0])))) of wild1 { Data.Vector.Primitive.Vector dt2 dt3 dt4 ->
                               let {
                                 f :: GHC.Types.Int = GHC.Types.I# dt2
                               } in
                               let {
                                 f1 :: GHC.Types.Int = GHC.Types.I# dt3
                               } in
                               GHC.Base.>>=
                                 @ m
                                 $dMonad3
                                 @ (Data.Primitive.ByteArray.MutableByteArray
                                      (Control.Monad.Primitive.PrimState m))
                                 @ (Data.Vector.Primitive.Mutable.MVector
                                      (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                 (Control.Monad.Primitive.primitive
                                    @ m
                                    $dPrimMonad
                                    @ (Data.Primitive.ByteArray.MutableByteArray
                                         (Control.Monad.Primitive.PrimState m))
                                    (\ (s# :: GHC.Prim.State#
                                                (Control.Monad.Primitive.PrimState m)) ->
                                     (# s#,
                                        Data.Primitive.ByteArray.MutableByteArray
                                          @ (Control.Monad.Primitive.PrimState m)
                                          dt4
                                            `cast`
                                          (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                            (Control.Monad.Primitive.PrimState
                                                                                               m))) #)))
                                 (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                             (Control.Monad.Primitive.PrimState m)) ->
                                  GHC.Base.return
                                    @ m
                                    $dMonad3
                                    @ (Data.Vector.Primitive.Mutable.MVector
                                         (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                    (Data.Vector.Primitive.Mutable.$WMVector
                                       @ (Control.Monad.Primitive.PrimState m)
                                       @ GHC.Types.Double
                                       f
                                       f1
                                       x1)) })
                              (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                          (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                               GHC.Base.return
                                 @ m
                                 $dMonad2
                                 @ (Data.Vector.Unboxed.Base.MVector
                                      (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                                 x1
                                   `cast`
                                 (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                           <Control.Monad.Primitive.PrimState
                                              m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                               <Control.Monad.Primitive.PrimState
                                                                  m>_N))))
                             `cast`
                           (<m>_R (Data.Vector.Unboxed.Base.MVector
                                     <Control.Monad.Primitive.PrimState m>_N
                                     (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                               <GHC.Types.Double>_N)))_N))
                          (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Graphics.Image.Interface.Components
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                           GHC.Base.return
                             @ m
                             $dMonad1
                             @ (Data.Vector.Unboxed.Base.MVector
                                  (Control.Monad.Primitive.PrimState m)
                                  (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                             x1
                               `cast`
                             (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                       <Control.Monad.Primitive.PrimState m>_N
                                       <Graphics.Image.ColorSpace.Y.Y>_N
                                       <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                        <Control.Monad.Primitive.PrimState
                                                                           m>_N
                                                                        <Graphics.Image.ColorSpace.Y.Y>_N
                                                                        <GHC.Types.Double>_N))))
                       (\ (bs' :: Data.Vector.Unboxed.Base.MVector
                                    (Control.Monad.Primitive.PrimState m)
                                    (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                        GHC.Base.return
                          @ m
                          $dMonad
                          @ (Data.Vector.Unboxed.Base.MVector
                               (Control.Monad.Primitive.PrimState m)
                               (GHC.Types.Int,
                                Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                          (Data.Vector.Unboxed.Base.$WMV_2
                             @ (Control.Monad.Primitive.PrimState m)
                             @ GHC.Types.Int
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             n_
                             as'
                             bs'))))
                   `cast`
                 (<m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                m>_N <(GHC.Types.Int,
                                                                                       Graphics.Image.Interface.Pixel
                                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                                         GHC.Types.Double)>_N)) }) -}
fb1105898de9221d948bda59c14e2e98
  $s$fArrayRPUcse_$s$fVectorVector(,)_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (GHC.Types.Int,
       Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> (GHC.Types.Int,
        Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> b1
    -> b1
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><S(SS),1*U(1*H,1*H)><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ b1
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (GHC.Types.Int,
                             Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: (GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds1 of wild { (,) a1 b2 ->
                 \ (x :: b1) ->
                 case a1 of v2 { GHC.Types.I# ipv ->
                 case b2
                        `cast`
                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N) of v1 { GHC.Types.D# ipv1 ->
                 x } } }) -}
c113e2fbdac4b3bc7fd1c5c0f25e812f
  $s$fArrayRPUcse_$s$fVectorVectorPixel ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Unboxed.Base.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Unboxed.Base.Vector
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]))
                     <Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_N)_R
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeFreeze
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeThaw
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicLength
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeSlice
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeIndexM
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeCopy
                  Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$celemseq -}
0bf14761164935509c8efd2449631d73
  $s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicLength ::
    Data.Vector.Unboxed.Base.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,U,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                Data.Vector.Unboxed.Base.$fVectorVectorDouble_$cbasicLength
                  `cast`
                (((Data.Vector.Unboxed.Base.Vector
                     (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                               <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                                                     <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                                                      <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                      <GHC.Types.Double>_N)))
                 ->_R <GHC.Types.Int>_R) -}
d3a868d585f4e0bec3859d60f891811c
  $s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(U,A,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, True)
                Data.Vector.Unboxed.Base.$fVectorVectorDouble_$cbasicUnsafeCopy
                  `cast`
                (forall (m :: <* -> *>_N).
                 <Control.Monad.Primitive.PrimMonad m>_R
                 ->_R (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                              m>_N (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                             <GHC.Types.Double>_N)) ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                                                                                <Control.Monad.Primitive.PrimState
                                                                                                                                   m>_N
                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                <GHC.Types.Double>_N) ; (Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                                                                                  <Control.Monad.Primitive.PrimState
                                                                                                                                                                     m>_N
                                                                                                                                                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                                  <GHC.Types.Double>_N) ; Sub (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                                                                                                                                                                                                       m>_N <Graphics.Image.Interface.Pixel
                                                                                                                                                                                                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                                                                                                               GHC.Types.Double>_N)))
                 ->_R ((Data.Vector.Unboxed.Base.Vector
                          (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                    <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                           <GHC.Types.Double>_N)))
                 ->_R <m ()>_R) -}
16f61a01d3adba51d7e0726c22ad9a2e
  $s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Unboxed.Base.Vector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m (Data.Vector.Unboxed.Base.Vector
            (Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(1*U(A,C(C1(U)),A,C(U),A),1*C1(U))><L,1*U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Unboxed.Base.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Graphics.Image.Interface.Components
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Data.Vector.Unboxed.Base.Vector
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (let {
                      $dMonad1 :: GHC.Base.Monad m
                      = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                    } in
                    (GHC.Base.>>=
                       @ m
                       $dMonad1
                       @ (Data.Vector.Primitive.Vector GHC.Types.Double)
                       @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                       (let {
                          $dMonad2 :: GHC.Base.Monad m
                          = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                        } in
                        case ds
                               `cast`
                             (Sub (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                     m>_N <Graphics.Image.Interface.Pixel
                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                             GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                                                                        <Control.Monad.Primitive.PrimState
                                                                                                                           m>_N
                                                                                                                        <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                        <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                                                                                                                                    <Control.Monad.Primitive.PrimState
                                                                                                                                                       m>_N
                                                                                                                                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                    <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.MVector
                                                                                                                                                                               <Control.Monad.Primitive.PrimState
                                                                                                                                                                                  m>_N
                                                                                                                                                                               (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                                                                                                                    <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                                                                                                                                                                                    <Control.Monad.Primitive.PrimState
                                                                                                                                                                                                                       m>_N ; Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                                                                                                                                                                                                                  <Control.Monad.Primitive.PrimState
                                                                                                                                                                                                                                     m>_N))))) of wild { Data.Vector.Primitive.Mutable.MVector dt1 dt2 dt3 ->
                        let {
                          f :: GHC.Types.Int = GHC.Types.I# dt1
                        } in
                        let {
                          f1 :: GHC.Types.Int = GHC.Types.I# dt2
                        } in
                        GHC.Base.>>=
                          @ m
                          $dMonad2
                          @ Data.Primitive.ByteArray.ByteArray
                          @ (Data.Vector.Primitive.Vector GHC.Types.Double)
                          (Control.Monad.Primitive.primitive
                             @ m
                             $dPrimMonad
                             @ Data.Primitive.ByteArray.ByteArray
                             (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                              case GHC.Prim.unsafeFreezeByteArray#
                                     @ (Control.Monad.Primitive.PrimState m)
                                     dt3
                                     s# of ds1 { (#,#) ipv ipv1 ->
                              (# ipv, Data.Primitive.ByteArray.ByteArray ipv1 #) }))
                          (\ (x1 :: Data.Primitive.ByteArray.ByteArray) ->
                           GHC.Base.return
                             @ m
                             $dMonad2
                             @ (Data.Vector.Primitive.Vector GHC.Types.Double)
                             (Data.Vector.Primitive.$WVector @ GHC.Types.Double f f1 x1)) })
                       (\ (x1 :: Data.Vector.Primitive.Vector GHC.Types.Double) ->
                        GHC.Base.return
                          @ m
                          $dMonad1
                          @ (Data.Vector.Unboxed.Base.Vector GHC.Types.Double)
                          x1
                            `cast`
                          (Sym (Data.Vector.Unboxed.Base.N:R:VectorDouble[0]) ; Sym (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0]))))
                      `cast`
                    (<m>_R (Data.Vector.Unboxed.Base.Vector
                              (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                        <GHC.Types.Double>_N)))_N))
                   (\ (x1 :: Data.Vector.Unboxed.Base.Vector
                               (Graphics.Image.Interface.Components
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.Vector.Unboxed.Base.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      x1
                        `cast`
                      (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                                                 <GHC.Types.Double>_N)))) -}
13bdc19db8992896428ce50a7f0b4663
  $s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Unboxed.Base.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> m (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(A,1*C1(C1(U)),A,C(U),A)><L,1*U(U,A,U)><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (idx :: GHC.Types.Int) ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Graphics.Image.Interface.Components
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (case ds
                           `cast`
                         (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                              <Graphics.Image.ColorSpace.Y.Y>_N
                              <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                          <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.Vector
                                                                                     (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                          <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0])))) of wild { Data.Vector.Primitive.Vector dt1 dt2 dt3 ->
                    case idx of wild1 { GHC.Types.I# y ->
                    case GHC.Prim.indexDoubleArray#
                           dt3
                           (GHC.Prim.+# dt1 y) of wild2 { DEFAULT ->
                    (GHC.Base.return
                       @ m
                       $dMonad
                       @ GHC.Types.Double
                       (GHC.Types.D# wild2))
                      `cast`
                    (<m>_R (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                     <GHC.Types.Double>_N))) } } })
                   (\ (x1 :: Graphics.Image.Interface.Components
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      x1
                        `cast`
                      (Sub (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                <GHC.Types.Double>_N) ; (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)))) -}
b0a02574bed9d5bcda1cda0cc7724fa1
  $s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Unboxed.Base.Vector
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Unboxed.Base.Vector
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(SLS),1*U(U,A,U)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, True)
                Data.Vector.Unboxed.Base.$fVectorVectorDouble_$cbasicUnsafeSlice
                  `cast`
                (<GHC.Types.Int>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R ((Data.Vector.Unboxed.Base.Vector
                          (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                    <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                           <GHC.Types.Double>_N)))
                 ->_R (Data.Vector.Unboxed.Base.Vector
                         (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                   <GHC.Types.Double>_N)))_R ; (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                                         <Graphics.Image.ColorSpace.Y.Y>_N
                                                                         <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                                                                                          <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                          <GHC.Types.Double>_N))) -}
1611e1ba55b2a7b68628293b016e1edc
  $s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Unboxed.Base.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Unboxed.Base.Vector
            (Control.Monad.Primitive.PrimState m)
            (Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(1*U(A,C(C1(U)),A,C(U),A),1*C1(U))><L,1*U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 (\ (ds :: Data.Vector.Unboxed.Base.Vector
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                  GHC.Base.>>=
                    @ m
                    $dMonad
                    @ (Data.Vector.Unboxed.Base.MVector
                         (Control.Monad.Primitive.PrimState m)
                         (Graphics.Image.Interface.Components
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                    @ (Data.Vector.Unboxed.Base.MVector
                         (Control.Monad.Primitive.PrimState m)
                         (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                    (let {
                       $dMonad1 :: GHC.Base.Monad m
                       = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                     } in
                     (GHC.Base.>>=
                        @ m
                        $dMonad1
                        @ (Data.Vector.Primitive.Mutable.MVector
                             (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                        @ (Data.Vector.Unboxed.Base.MVector
                             (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                        (let {
                           $dMonad2 :: GHC.Base.Monad m
                           = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                         } in
                         case ds
                                `cast`
                              (Graphics.Image.Interface.Vector.Unboxing.D:R:VectorPixel0[0]
                                   <Graphics.Image.ColorSpace.Y.Y>_N
                                   <GHC.Types.Double>_N ; (Graphics.Image.Interface.Vector.Unboxing.N:R:VectorPixel[0]
                                                               <Graphics.Image.ColorSpace.Y.Y>_N
                                                               <GHC.Types.Double>_N ; ((Data.Vector.Unboxed.Base.Vector
                                                                                          (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                                                                               <GHC.Types.Double>_N))_R ; (Data.Vector.Unboxed.Base.D:R:VectorDouble0[0] ; Data.Vector.Unboxed.Base.N:R:VectorDouble[0])))) of wild { Data.Vector.Primitive.Vector dt1 dt2 dt3 ->
                         let {
                           f :: GHC.Types.Int = GHC.Types.I# dt1
                         } in
                         let {
                           f1 :: GHC.Types.Int = GHC.Types.I# dt2
                         } in
                         GHC.Base.>>=
                           @ m
                           $dMonad2
                           @ (Data.Primitive.ByteArray.MutableByteArray
                                (Control.Monad.Primitive.PrimState m))
                           @ (Data.Vector.Primitive.Mutable.MVector
                                (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                           (Control.Monad.Primitive.primitive
                              @ m
                              $dPrimMonad
                              @ (Data.Primitive.ByteArray.MutableByteArray
                                   (Control.Monad.Primitive.PrimState m))
                              (\ (s# :: GHC.Prim.State# (Control.Monad.Primitive.PrimState m)) ->
                               (# s#,
                                  Data.Primitive.ByteArray.MutableByteArray
                                    @ (Control.Monad.Primitive.PrimState m)
                                    dt3
                                      `cast`
                                    (UnsafeCo representational GHC.Prim.ByteArray# (GHC.Prim.MutableByteArray#
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         m))) #)))
                           (\ (x1 :: Data.Primitive.ByteArray.MutableByteArray
                                       (Control.Monad.Primitive.PrimState m)) ->
                            GHC.Base.return
                              @ m
                              $dMonad2
                              @ (Data.Vector.Primitive.Mutable.MVector
                                   (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                              (Data.Vector.Primitive.Mutable.$WMVector
                                 @ (Control.Monad.Primitive.PrimState m)
                                 @ GHC.Types.Double
                                 f
                                 f1
                                 x1)) })
                        (\ (x1 :: Data.Vector.Primitive.Mutable.MVector
                                    (Control.Monad.Primitive.PrimState m) GHC.Types.Double) ->
                         GHC.Base.return
                           @ m
                           $dMonad1
                           @ (Data.Vector.Unboxed.Base.MVector
                                (Control.Monad.Primitive.PrimState m) GHC.Types.Double)
                           x1
                             `cast`
                           (Sym (Data.Vector.Unboxed.Base.N:R:MVectorsDouble[0]
                                     <Control.Monad.Primitive.PrimState
                                        m>_N) ; Sym (Data.Vector.Unboxed.Base.D:R:MVectorsDouble0[0]
                                                         <Control.Monad.Primitive.PrimState m>_N))))
                       `cast`
                     (<m>_R (Data.Vector.Unboxed.Base.MVector
                               <Control.Monad.Primitive.PrimState m>_N
                               (Sym (Graphics.Image.ColorSpace.Y.D:R:ComponentsYe[0]
                                         <GHC.Types.Double>_N)))_N))
                    (\ (x1 :: Data.Vector.Unboxed.Base.MVector
                                (Control.Monad.Primitive.PrimState m)
                                (Graphics.Image.Interface.Components
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                     GHC.Base.return
                       @ m
                       $dMonad
                       @ (Data.Vector.Unboxed.Base.MVector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                       x1
                         `cast`
                       (Sym (Graphics.Image.Interface.Vector.Unboxing.N:R:MVectorsPixel[0]
                                 <Control.Monad.Primitive.PrimState m>_N
                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                 <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Unboxing.D:R:MVectorsPixel0[0]
                                                                  <Control.Monad.Primitive.PrimState
                                                                     m>_N
                                                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                                                  <GHC.Types.Double>_N))))
                   `cast`
                 (<Data.Vector.Unboxed.Base.Vector
                     (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                  ->_R <m>_R (Sym (Data.Vector.Unboxed.Base.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                     m>_N <Graphics.Image.Interface.Pixel
                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                             GHC.Types.Double>_N))) -}
da9595824786a55e122e91ed40c5c63e
  $s$fArrayRPUcse_$s$fVectorVectorPixel_$celemseq ::
    Data.Vector.Unboxed.Base.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> b
    -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*H><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ b
                   (ds :: Data.Vector.Unboxed.Base.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (val :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (v1 :: b) ->
                 case val
                        `cast`
                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N) of v2 { GHC.Types.D# ipv ->
                 v1 }) -}
d1a9ae487597e68e533fc0e949ab6ff9
  $s$fArrayVScse ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.Image.Interface.Vector.Storable.VS
                  @ Graphics.Image.ColorSpace.Y.Y
                  @ GHC.Types.Double
                  Lib.$s$fArrayVScse_$s$fVectorVectora
                    `cast`
                  (Data.Vector.Generic.Base.Vector
                     (Sym (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0]))
                     <Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_N)_R
                  Lib.$s$fArrayVScse_$s$fMArrayVScse
                    `cast`
                  (Graphics.Image.Interface.MArray
                     (Sym (Graphics.Image.Interface.Vector.Storable.D:R:ManifestVS[0]))
                     <Graphics.Image.ColorSpace.Y.Y>_N
                     <GHC.Types.Double>_N)_R
                  Lib.$s$fArrayVScse_$s$fBaseArrayVScse
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cmakeImage
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cmakeImageWindowed
                  (let {
                     f :: GHC.Types.Int = GHC.Types.I# 1#
                   } in
                   let {
                     f1 :: GHC.Types.Int = GHC.Types.I# 1#
                   } in
                   let {
                     f2 :: (GHC.Types.Int, GHC.Types.Int) = (f, f1)
                   } in
                   (\ (x :: Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                    let {
                      $j1 :: Graphics.Image.Interface.Vector.Generic.VGImage
                               Data.Vector.Storable.Vector
                               (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        <join 0>
                      = case GHC.Err.error
                               @ 'GHC.Types.LiftedRep
                               @ (GHC.Types.Int, GHC.Types.Int)
                               Graphics.Image.Interface.checkDims1
                                 `cast`
                               (Sym (GHC.Classes.N:IP[0]
                                         <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n1 :: b)[OneShot] ->
                                   GHC.Base.foldr
                                     @ GHC.Types.Char
                                     @ b
                                     c
                                     n1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.$fShow(,)3
                                        (GHC.Show.showLitString
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b1
                                                 (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                                 (n :: b1)[OneShot] ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b1
                                                 "Graphics.Image.Interface.Vector.Generic.makeImageVGM"#
                                                 c1
                                                 n))
                                           GHC.Show.$fShow[]1)))
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n1 :: b)[OneShot] ->
                                      GHC.CString.unpackFoldrCString#
                                        @ b
                                        ": dimensions are expected to be positive: "#
                                        c
                                        n1)
                                     (GHC.Show.$fShow(,)_$cshowsPrec
                                        @ GHC.Types.Int
                                        @ GHC.Types.Int
                                        GHC.Show.$fShowInt
                                        GHC.Show.$fShowInt
                                        GHC.Show.$fShow(,)1
                                        f2
                                        (GHC.Types.[] @ GHC.Types.Char))))
                        ret_ty (Graphics.Image.Interface.Vector.Generic.VGImage
                                  Data.Vector.Storable.Vector
                                  (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                        of {}
                    } in
                    case GHC.Classes.leInt f (GHC.Types.I# 0#) of wild1 {
                      GHC.Types.False
                      -> case GHC.Classes.leInt f1 (GHC.Types.I# 0#) of wild2 {
                           GHC.Types.False
                           -> Graphics.Image.Interface.Vector.Generic.$WVGImage
                                @ Data.Vector.Storable.Vector
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                f
                                f1
                                (Data.Vector.Generic.new
                                   @ Data.Vector.Storable.Vector
                                   @ (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                   Lib.$s$fArrayVScse_$s$fVectorVectora
                                   (Data.Vector.Generic.New.unstream
                                      @ Data.Vector.Storable.Vector
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      Lib.$s$fArrayVScse_$s$fVectorVectora
                                      (Data.Vector.Fusion.Bundle.Monadic.generateM
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Graphics.Image.Interface.Pixel
                                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                         @ Data.Vector.Storable.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         (GHC.Types.I# 1#)
                                         (\ (x1 :: GHC.Types.Int) -> x)
                                           `cast`
                                         (<GHC.Types.Int>_R
                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Graphics.Image.Interface.Pixel
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double>_R)))))
                           GHC.Types.True -> $j1 }
                      GHC.Types.True -> $j1 })
                     `cast`
                   (<Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                    ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N))
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cindex00
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cmap
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cimap
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$czipWith
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cizipWith
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$ctraverse
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$ctraverse2
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$ctranspose
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cbackpermute
                  (\ (x :: [[Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]]) ->
                   Graphics.Image.Interface.Vector.Generic.fromListsVG
                     @ Data.Vector.Storable.Vector
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fVectorVectora
                     x)
                    `cast`
                  (<[[Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]]>_R
                   ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                 <Graphics.Image.ColorSpace.Y.Y>_N
                                 <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$c|*|
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cfold
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cfoldIx
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$ceq
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$ccompute
                  (GHC.Base.id
                     @ (Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS
                          Graphics.Image.ColorSpace.Y.Y
                          GHC.Types.Double))
                    `cast`
                  (<Graphics.Image.Interface.Image
                      Graphics.Image.Interface.Vector.Storable.VS
                      Graphics.Image.ColorSpace.Y.Y
                      GHC.Types.Double>_R
                   ->_R (Graphics.Image.Interface.Image
                           (Sym (Graphics.Image.Interface.Vector.Storable.D:R:ManifestVS[0]))
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N)_R)
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$ctoVector
                  Lib.$s$fArrayVScse_$s$fArrayVScse_$cfromVector -}
51a288e374c2e05063b3429e2a20967f
  $s$fArrayVScse1 ::
    (Graphics.Image.Interface.ColorSpace
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double,
     Foreign.Storable.Storable
       (Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Strictness: m,
     Unfolding: ((Lib.$s$fArrayRPUcse_$s$fColorSpaceYe,
                  Lib.$s$fArrayVScse_$s$fStorablePixel)) -}
5888d9cdf99331c9543c60cae606f590
  $s$fArrayVScse_$s$fArrayVScse_$cbackpermute ::
    (GHC.Types.Int, GHC.Types.Int)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int))
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 3,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,C(U(1*U(U),1*U(U)))><S(LLS),1*U(U,U,U(A,U,U))>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (sz :: (GHC.Types.Int, GHC.Types.Int))
                   (f :: (GHC.Types.Int, GHC.Types.Int)
                         -> (GHC.Types.Int, GHC.Types.Int))
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case sz of sz1 { (,) ipv ipv1 ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 let {
                   $j1 :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double
                     <join 0>
                   = case GHC.Err.error
                            @ 'GHC.Types.LiftedRep
                            @ (GHC.Types.Int, GHC.Types.Int)
                            Graphics.Image.Interface.checkDims1
                              `cast`
                            (Sym (GHC.Classes.N:IP[0]
                                      <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                            (GHC.Base.augment
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n1 :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ GHC.Types.Char
                                  @ b
                                  c
                                  n1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b1
                                              (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                              (n :: b1)[OneShot] ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b1
                                              "Graphics.Image.Interface.Vector.Generic.backpermuteWithCheckVG"#
                                              c1
                                              n))
                                        GHC.Show.$fShow[]1)))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n1 :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     ": dimensions are expected to be positive: "#
                                     c
                                     n1)
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShow(,)1
                                     sz1
                                     (GHC.Types.[] @ GHC.Types.Char))))
                     ret_ty (Graphics.Image.Interface.Image
                               Graphics.Image.Interface.Vector.Storable.VS
                               Graphics.Image.ColorSpace.Y.Y
                               GHC.Types.Double)
                     of {}
                 } in
                 case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild1 {
                   GHC.Types.False
                   -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild2 {
                        GHC.Types.False
                        -> case (Data.Vector.Fusion.Bundle.Monadic.length
                                   @ Data.Vector.Fusion.Util.Id
                                   @ Data.Vector.Storable.Vector
                                   @ (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                      @ Data.Vector.Fusion.Util.Id
                                      @ Data.Vector.Storable.Vector
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      Data.Vector.Fusion.Util.$fMonadId
                                      Lib.$s$fArrayVScse_$s$fVectorVectora
                                      v1))
                                  `cast`
                                (Data.Vector.Fusion.Util.N:Id[0]
                                     <GHC.Types.Int>_R) of v3 { GHC.Types.I# ipv2 ->
                           let {
                             sz2 :: GHC.Types.Int = GHC.Types.I# dt1
                           } in
                           let {
                             sz3 :: GHC.Types.Int = GHC.Types.I# dt2
                           } in
                           case ipv of wild4 { GHC.Types.I# x ->
                           case ipv1 of wild5 { GHC.Types.I# y ->
                           (Graphics.Image.Interface.Vector.Generic.$WVGImage
                              @ Data.Vector.Storable.Vector
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              wild4
                              wild5
                              (Data.Vector.Generic.new
                                 @ Data.Vector.Storable.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Storable.Vector
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                    (Data.Vector.Fusion.Bundle.Monadic.unbox
                                       @ Data.Vector.Fusion.Util.Id
                                       @ Data.Vector.Storable.Vector
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (Data.Vector.Fusion.Bundle.Monadic.mapM
                                          @ Data.Vector.Fusion.Util.Id
                                          @ GHC.Types.Int
                                          @ (Data.Vector.Fusion.Util.Box
                                               (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                          @ Data.Vector.Storable.Vector
                                          Data.Vector.Fusion.Util.$fMonadId
                                          (\ (x1 :: GHC.Types.Int) ->
                                           case v1 of wild7 { Data.Vector.Storable.Vector dt3 dt4 dt5 ->
                                           Data.Vector.Fusion.Util.Box
                                             @ (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                             (case Graphics.Image.ColorSpace.Y.$fStorablePixel3
                                                     @ GHC.Types.Double
                                                     Foreign.Storable.$fStorableDouble
                                                     (GHC.Ptr.Ptr
                                                        @ (Graphics.Image.Interface.Pixel
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double)
                                                        dt4)
                                                     x1
                                                     GHC.Prim.realWorld# of ds1 { (#,#) ipv3 ipv4 ->
                                              case GHC.Prim.touch#
                                                     @ 'GHC.Types.LiftedRep
                                                     @ GHC.ForeignPtr.ForeignPtrContents
                                                     dt5
                                                     ipv3 of s' { DEFAULT ->
                                              ipv4 } }) })
                                            `cast`
                                          (<GHC.Types.Int>_R
                                           ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                         <Data.Vector.Fusion.Util.Box
                                                            (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double)>_R))
                                          (Data.Vector.Fusion.Bundle.Monadic.generateM
                                             @ Data.Vector.Fusion.Util.Id
                                             @ GHC.Types.Int
                                             @ Data.Vector.Storable.Vector
                                             Data.Vector.Fusion.Util.$fMonadId
                                             (GHC.Types.I# (GHC.Prim.*# x y))
                                             (\ (x1 :: GHC.Types.Int) ->
                                              case f (case x1 of k1 { GHC.Types.I# ipv3 ->
                                                      GHC.Real.$fIntegralInt_$cdivMod
                                                        k1
                                                        wild5 }) of ix1 { (,) ipv3 ipv4 ->
                                              case GHC.Classes.geInt ipv4 sz3 of east { DEFAULT ->
                                              case GHC.Classes.ltInt
                                                     ipv4
                                                     (GHC.Types.I# 0#) of west { DEFAULT ->
                                              case GHC.Classes.geInt ipv3 sz2 of south { DEFAULT ->
                                              case GHC.Classes.ltInt
                                                     ipv3
                                                     (GHC.Types.I# 0#) of north { DEFAULT ->
                                              let {
                                                $j2 :: GHC.Types.Int <join 0>
                                                = case Graphics.Image.Interface.Vector.Generic.errorVG
                                                         @ (Graphics.Image.Interface.Border
                                                              (GHC.Types.Int, GHC.Types.Int))
                                                         (GHC.Base.build
                                                            @ GHC.Types.Char
                                                            (\ @ b ->
                                                             GHC.CString.unpackFoldrCString#
                                                               @ b
                                                               "backpermuteVG"#))
                                                         (GHC.Base.augment
                                                            @ GHC.Types.Char
                                                            (\ @ b
                                                               (c :: GHC.Types.Char
                                                                     -> b -> b)[OneShot]
                                                               (n :: b)[OneShot] ->
                                                             GHC.CString.unpackFoldrCString#
                                                               @ b
                                                               "Index out of bounds <"#
                                                               c
                                                               n)
                                                            (GHC.Base.augment
                                                               @ GHC.Types.Char
                                                               (\ @ b
                                                                  (c :: GHC.Types.Char
                                                                        -> b -> b)[OneShot]
                                                                  (n :: b)[OneShot] ->
                                                                GHC.Base.foldr
                                                                  @ GHC.Types.Char
                                                                  @ b
                                                                  c
                                                                  n
                                                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                                                     @ GHC.Types.Int
                                                                     @ GHC.Types.Int
                                                                     GHC.Show.$fShowInt
                                                                     GHC.Show.$fShowInt
                                                                     GHC.Show.$fShow(,)1
                                                                     (sz2, sz3)
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char)))
                                                               (GHC.Base.augment
                                                                  @ GHC.Types.Char
                                                                  (\ @ b
                                                                     (c :: GHC.Types.Char
                                                                           -> b -> b)[OneShot]
                                                                     (n :: b)[OneShot] ->
                                                                   GHC.CString.unpackFoldrCString#
                                                                     @ b
                                                                     ">: "#
                                                                     c
                                                                     n)
                                                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                                                     @ GHC.Types.Int
                                                                     @ GHC.Types.Int
                                                                     GHC.Show.$fShowInt
                                                                     GHC.Show.$fShowInt
                                                                     GHC.Show.$fShow(,)1
                                                                     ix1
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char)))))
                                                  ret_ty GHC.Types.Int
                                                  of {}
                                              } in
                                              case north of wild7 {
                                                GHC.Types.False
                                                -> case east of wild3 {
                                                     GHC.Types.False
                                                     -> case south of wild8 {
                                                          GHC.Types.False
                                                          -> case west of wild9 {
                                                               GHC.Types.False
                                                               -> case ipv3 of wild10 { GHC.Types.I# y1 ->
                                                                  case ipv4 of wild11 { GHC.Types.I# y2 ->
                                                                  GHC.Types.I#
                                                                    (GHC.Prim.+#
                                                                       (GHC.Prim.*# dt2 y1)
                                                                       y2) } }
                                                               GHC.Types.True -> $j2 }
                                                          GHC.Types.True -> $j2 }
                                                     GHC.Types.True -> $j2 }
                                                GHC.Types.True -> $j2 } } } } } })
                                               `cast`
                                             (<GHC.Types.Int>_R
                                              ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                            <GHC.Types.Int>_R))))))))
                             `cast`
                           (Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                     <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) } } }
                        GHC.Types.True -> $j1 }
                   GHC.Types.True -> $j1 } } }) -}
d079daccc39dde147f42b19aa3dc7e53
  $s$fArrayVScse_$s$fArrayVScse_$ccompute ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 ds) -}
22e49e596b5f269cc40e1d42eb7361d3
  $s$fArrayVScse_$s$fArrayVScse_$ceq ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS(SLL)),1*U(A,A,U(U,U,U))><S(LLS(SLL)),1*U(A,A,U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double)
                   (ds1 :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS
                             Graphics.Image.ColorSpace.Y.Y
                             GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 case ds1
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                 (Data.Vector.Fusion.Bundle.Monadic.eqBy
                    @ Data.Vector.Fusion.Util.Id
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ Data.Vector.Storable.Vector
                    Data.Vector.Fusion.Util.$fMonadId
                    GHC.Classes.eqDouble
                      `cast`
                    ((Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                     ->_R (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                    <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                     ->_R <GHC.Types.Bool>_R)
                    (Data.Vector.Generic.stream
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       Lib.$s$fArrayVScse_$s$fVectorVectora
                       v1)
                    (Data.Vector.Generic.stream
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       Lib.$s$fArrayVScse_$s$fVectorVectora
                       v2))
                   `cast`
                 (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Bool>_R) } }) -}
f6f7e72344e13202a3048e450a04f1ae
  $s$fArrayVScse_$s$fArrayVScse_$cfold ::
    (Graphics.Image.Interface.Pixel
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S(S),1*U(U)><S(LLS(SLL)),1*U(A,A,U(U,U,U))>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (f :: Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (px0 :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0
                        `cast`
                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N) of nt { GHC.Types.D# ipv ->
                 case f of f1 { DEFAULT ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ Data.Vector.Storable.Vector
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       (b1 :: Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)[OneShot] ->
                     f1 a1 b1)
                      `cast`
                    (<Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                     ->_R <Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                   <Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R))
                    nt
                      `cast`
                    (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                              <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                    (Data.Vector.Generic.stream
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       Lib.$s$fArrayVScse_$s$fVectorVectora
                       v1))
                   `cast`
                 (Data.Vector.Fusion.Util.N:Id[0]
                      <Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R) } } }) -}
2571135353b8cce8b8022364230fb90e
  $s$fArrayVScse_$s$fArrayVScse_$cfoldIx ::
    (Graphics.Image.Interface.Pixel
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> (GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 3,
     Strictness: <S,1*U><S(S),1*U(U)><S(LLS(SLL)),1*U(A,U,U(U,U,U))>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (f :: Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> (GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (px0 :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0
                        `cast`
                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N) of nt { GHC.Types.D# ipv ->
                 case f of f1 { DEFAULT ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 let {
                   n :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ (GHC.Types.Int,
                       Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ Data.Vector.Storable.Vector
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       (b1 :: (GHC.Types.Int,
                               Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))[OneShot] ->
                     case a1
                            `cast`
                          (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                  <GHC.Types.Double>_N) of nt1 { GHC.Types.D# ipv1 ->
                     case b1 of wild1 { (,) x ds1 ->
                     case x of k { GHC.Types.I# ipv2 ->
                     f1
                       nt1
                         `cast`
                       (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                 <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                       (GHC.Real.$fIntegralInt_$cdivMod k n)
                       ds1 } } })
                      `cast`
                    (<Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                     ->_R <(GHC.Types.Int,
                            Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                   <Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R))
                    nt
                      `cast`
                    (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                              <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                    (Data.Vector.Fusion.Bundle.Monadic.indexed
                       @ Data.Vector.Fusion.Util.Id
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       Data.Vector.Fusion.Util.$fMonadId
                       (Data.Vector.Generic.stream
                          @ Data.Vector.Storable.Vector
                          @ (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          Lib.$s$fArrayVScse_$s$fVectorVectora
                          v1)))
                   `cast`
                 (Data.Vector.Fusion.Util.N:Id[0]
                      <Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R) } } }) -}
f3c8f3a30295707ab06381649fdb344e
  $s$fArrayVScse_$s$fArrayVScse_$cfromVector ::
    (GHC.Types.Int, GHC.Types.Int)
    -> Graphics.Image.Interface.Vector
         Graphics.Image.Interface.Vector.Storable.VS
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 2,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(SLL),1*U(U,U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (sz :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case sz of sz1 { (,) ipv ipv1 ->
                 (\ (x :: Data.Vector.Storable.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                  case x of v2 { Data.Vector.Storable.Vector ipv2 ipv3 ipv4 ->
                  case ipv of wild1 { GHC.Types.I# x1 ->
                  case ipv1 of wild2 { GHC.Types.I# y ->
                  case GHC.Classes.eqInt
                         (GHC.Types.I# (GHC.Prim.*# x1 y))
                         (Data.Vector.Fusion.Bundle.Monadic.length
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Storable.Vector
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Fusion.Bundle.Monadic.fromVector
                               @ Data.Vector.Fusion.Util.Id
                               @ Data.Vector.Storable.Vector
                               @ (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                               Data.Vector.Fusion.Util.$fMonadId
                               Lib.$s$fArrayVScse_$s$fVectorVectora
                               v2))
                           `cast`
                         (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R) of wild3 {
                    GHC.Types.False
                    -> Graphics.Image.Interface.Vector.Generic.errorVG
                         @ (Graphics.Image.Interface.Vector.Generic.VGImage
                              Data.Vector.Storable.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (GHC.Base.build
                            @ GHC.Types.Char
                            (\ @ b -> GHC.CString.unpackFoldrCString# @ b "fromVectorVG"#))
                         (GHC.Base.augment
                            @ GHC.Types.Char
                            (\ @ b
                               (c :: GHC.Types.Char -> b -> b)[OneShot]
                               (n1 :: b)[OneShot] ->
                             GHC.CString.unpackFoldrCString#
                               @ b
                               " image dimensions do not match the length of a vector: "#
                               c
                               n1)
                            (GHC.Base.augment
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n1 :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ GHC.Types.Char
                                  @ b
                                  c
                                  n1
                                  (GHC.Show.showSignedInt
                                     GHC.Show.$fShow(,)1
                                     wild1
                                     (GHC.Types.[] @ GHC.Types.Char)))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n1 :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString# @ b " * "# c n1)
                                  (GHC.Base.augment
                                     @ GHC.Types.Char
                                     (\ @ b
                                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                                        (n1 :: b)[OneShot] ->
                                      GHC.Base.foldr
                                        @ GHC.Types.Char
                                        @ b
                                        c
                                        n1
                                        (GHC.Show.showSignedInt
                                           GHC.Show.$fShow(,)1
                                           wild2
                                           (GHC.Types.[] @ GHC.Types.Char)))
                                     (GHC.Base.augment
                                        @ GHC.Types.Char
                                        (\ @ b
                                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                                           (n1 :: b)[OneShot] ->
                                         GHC.CString.unpackFoldrCString# @ b " /= "# c n1)
                                        (GHC.Show.showSignedInt
                                           GHC.Show.$fShow(,)1
                                           (Data.Vector.Fusion.Bundle.Monadic.length
                                              @ Data.Vector.Fusion.Util.Id
                                              @ Data.Vector.Storable.Vector
                                              @ (Graphics.Image.Interface.Pixel
                                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                              Data.Vector.Fusion.Util.$fMonadId
                                              (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                                 @ Data.Vector.Fusion.Util.Id
                                                 @ Data.Vector.Storable.Vector
                                                 @ (Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y
                                                      GHC.Types.Double)
                                                 Data.Vector.Fusion.Util.$fMonadId
                                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                                 v2))
                                             `cast`
                                           (Data.Vector.Fusion.Util.N:Id[0] <GHC.Types.Int>_R)
                                           (GHC.Types.[] @ GHC.Types.Char)))))))
                    GHC.Types.True
                    -> Graphics.Image.Interface.Vector.Generic.$WVGImage
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         wild1
                         wild2
                         v2 } } } })
                   `cast`
                 (Sub (Sym (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])) <Graphics.Image.Interface.Pixel
                                                                                          Graphics.Image.ColorSpace.Y.Y
                                                                                          GHC.Types.Double>_N
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) }) -}
6103e2d7fd829fa0546e2a051296a574
  $s$fArrayVScse_$s$fArrayVScse_$cimap ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Vector.Storable.VS cs' e' =>
    ((GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Image.Interface.Pixel cs' e'
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs' e'
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 3,
     Strictness: <S(S(LLLC(S(S))LLLL)LLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(A,A,A,1*C1(U(U)),A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(U(U)))><S(LLS),1*U(U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ cs'
                   @ e'
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Vector.Storable.VS cs' e') ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs' e')
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs'
                       @ e'
                       $dArray
                 } in
                 (\ (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel cs' e'
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS cs' e') ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs'>_N <e'>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                         <cs'>_N
                                                                                                         <e'>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                  let {
                    n :: GHC.Types.Int = GHC.Types.I# dt2
                  } in
                  Graphics.Image.Interface.Vector.Generic.$WVGImage
                    @ Data.Vector.Storable.Vector
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (GHC.Types.I# dt1)
                    n
                    (Data.Vector.Generic.new
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       Lib.$s$fArrayVScse_$s$fVectorVectora
                       (Data.Vector.Generic.New.unstream
                          @ Data.Vector.Storable.Vector
                          @ (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          Lib.$s$fArrayVScse_$s$fVectorVectora
                          (Data.Vector.Fusion.Bundle.inplace
                             @ (Graphics.Image.Interface.Pixel cs' e')
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             @ Data.Vector.Storable.Vector
                             (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                              let {
                                f2 :: Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                                      -> m (Graphics.Image.Interface.Pixel
                                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                = GHC.Base.return
                                    @ m
                                    $dMonad
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              } in
                              \ (x :: Data.Vector.Fusion.Stream.Monadic.Stream
                                        m (Graphics.Image.Interface.Pixel cs' e'))[OneShot] ->
                              Data.Vector.Fusion.Stream.Monadic.mapM
                                @ m
                                @ (GHC.Types.Int, Graphics.Image.Interface.Pixel cs' e')
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                $dMonad
                                (\ (x1 :: (GHC.Types.Int,
                                           Graphics.Image.Interface.Pixel cs' e')) ->
                                 f2
                                   (case x1 of wild1 { (,) x2 ds1 ->
                                    case x2 of k { GHC.Types.I# ipv ->
                                    case ds1 of px { DEFAULT ->
                                    f (GHC.Real.$fIntegralInt_$cdivMod k n) px } } }))
                                (Data.Vector.Fusion.Stream.Monadic.indexed
                                   @ m
                                   @ (Graphics.Image.Interface.Pixel cs' e')
                                   $dMonad
                                   x))
                             (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                             (Data.Vector.Generic.stream
                                @ Data.Vector.Storable.Vector
                                @ (Graphics.Image.Interface.Pixel cs' e')
                                $dVector1
                                  `cast`
                                (Data.Vector.Generic.Base.Vector
                                   (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                   <Graphics.Image.Interface.Pixel cs' e'>_N)_R
                                v1)))) })
                   `cast`
                 (<(GHC.Types.Int, GHC.Types.Int)
                   -> Graphics.Image.Interface.Pixel cs' e'
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS cs' e'>_R
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
4e0371d431ca24d67909b7f9d084e013
  $s$fArrayVScse_$s$fArrayVScse_$cindex00 ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 1, Strictness: <S(LLS(SSL)),1*U(A,A,U(U,U,U))>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 Data.Vector.Generic.!
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   Lib.$s$fArrayVScse_$s$fVectorVectora
                   v1
                   (GHC.Types.I# 0#) }) -}
0214db82143ed2f73c7aac18a4e64349
  $s$fArrayVScse_$s$fArrayVScse_$cizipWith ::
    (Graphics.Image.Interface.Array
       Graphics.Image.Interface.Vector.Storable.VS cs1 e1,
     Graphics.Image.Interface.Array
       Graphics.Image.Interface.Vector.Storable.VS cs2 e2) =>
    ((GHC.Types.Int, GHC.Types.Int)
     -> Graphics.Image.Interface.Pixel cs1 e1
     -> Graphics.Image.Interface.Pixel cs2 e2
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs1 e1
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs2 e2
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 5,
     Strictness: <L,1*U(1*U(A,A,A,1*C1(U(U)),A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(1*U(A,A,A,1*C1(U(U)),A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(C1(U(U))))><S(SLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ cs1
                   @ e1
                   @ cs2
                   @ e2
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Vector.Storable.VS cs1 e1)
                   ($dArray1 :: Graphics.Image.Interface.Array
                                  Graphics.Image.Interface.Vector.Storable.VS cs2 e2) ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs2 e2)
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs2
                       @ e2
                       $dArray1
                 } in
                 let {
                   $dVector2 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs1 e1)
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs1
                       @ e1
                       $dArray
                 } in
                 (\ (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel cs1 e1
                          -> Graphics.Image.Interface.Pixel cs2 e2
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS cs1 e1)
                    (ds1 :: Graphics.Image.Interface.Image
                              Graphics.Image.Interface.Vector.Storable.VS cs2 e2) ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs1>_N <e1>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                         <cs1>_N
                                                                                                         <e1>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                  let {
                    ds2 :: GHC.Types.Int = GHC.Types.I# dt1
                  } in
                  let {
                    ds3 :: GHC.Types.Int = GHC.Types.I# dt2
                  } in
                  let {
                    fail :: GHC.Prim.Void#
                            -> Graphics.Image.Interface.Vector.Generic.VGImage
                                 Data.Vector.Storable.Vector
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 1> {- Arity: 1 -}
                    = \ (ds4 :: GHC.Prim.Void#)[OneShot] ->
                      case ds1
                             `cast`
                           (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                             <cs2>_N
                                                                                                             <e2>_N) of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                      let {
                        ds5 :: GHC.Types.Int = GHC.Types.I# dt3
                      } in
                      let {
                        ds6 :: GHC.Types.Int = GHC.Types.I# dt4
                      } in
                      let {
                        fail1 :: GHC.Prim.Void#
                                 -> Graphics.Image.Interface.Vector.Generic.VGImage
                                      Data.Vector.Storable.Vector
                                      (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          <join 1> {- Arity: 1 -}
                        = \ (ds7 :: GHC.Prim.Void#)[OneShot] ->
                          let {
                            $j1 :: Graphics.Image.Interface.Vector.Generic.VGImage
                                     Data.Vector.Storable.Vector
                                     (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              <join 0>
                            = Graphics.Image.Interface.Vector.Generic.$WVGImage
                                @ Data.Vector.Storable.Vector
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                ds2
                                ds3
                                (Data.Vector.Generic.new
                                   @ Data.Vector.Storable.Vector
                                   @ (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                   Lib.$s$fArrayVScse_$s$fVectorVectora
                                   (Data.Vector.Generic.New.unstream
                                      @ Data.Vector.Storable.Vector
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      Lib.$s$fArrayVScse_$s$fVectorVectora
                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (GHC.Types.Int, Graphics.Image.Interface.Pixel cs1 e1)
                                         @ (Graphics.Image.Interface.Pixel cs2 e2)
                                         @ (Graphics.Image.Interface.Pixel
                                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                         @ Data.Vector.Storable.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         (\ (a1 :: (GHC.Types.Int,
                                                    Graphics.Image.Interface.Pixel cs1 e1))
                                            (b1 :: Graphics.Image.Interface.Pixel
                                                     cs2 e2)[OneShot] ->
                                          case a1 of wild2 { (,) x ds8 ->
                                          case x of k { GHC.Types.I# ipv ->
                                          case ds8 of px1 { DEFAULT ->
                                          case b1 of px2 { DEFAULT ->
                                          f (GHC.Real.$fIntegralInt_$cdivMod k ds3) px1 px2 } } } })
                                           `cast`
                                         (<(GHC.Types.Int, Graphics.Image.Interface.Pixel cs1 e1)>_R
                                          ->_R <Graphics.Image.Interface.Pixel cs2 e2>_R
                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Graphics.Image.Interface.Pixel
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double>_R))
                                         (Data.Vector.Fusion.Bundle.Monadic.indexed
                                            @ Data.Vector.Fusion.Util.Id
                                            @ Data.Vector.Storable.Vector
                                            @ (Graphics.Image.Interface.Pixel cs1 e1)
                                            Data.Vector.Fusion.Util.$fMonadId
                                            (Data.Vector.Generic.stream
                                               @ Data.Vector.Storable.Vector
                                               @ (Graphics.Image.Interface.Pixel cs1 e1)
                                               $dVector2
                                                 `cast`
                                               (Data.Vector.Generic.Base.Vector
                                                  (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                                  <Graphics.Image.Interface.Pixel cs1 e1>_N)_R
                                               v1))
                                         (Data.Vector.Generic.stream
                                            @ Data.Vector.Storable.Vector
                                            @ (Graphics.Image.Interface.Pixel cs2 e2)
                                            $dVector1
                                              `cast`
                                            (Data.Vector.Generic.Base.Vector
                                               (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                               <Graphics.Image.Interface.Pixel cs2 e2>_N)_R
                                            v2))))
                          } in
                          case GHC.Classes.eqInt ds2 ds5 of wild2 {
                            GHC.Types.False
                            -> case GHC.Classes.eqInt ds3 ds6 of wild3 {
                                 GHC.Types.False
                                 -> let {
                                      $j2 :: GHC.Prim.Int#
                                             -> GHC.Types.Int
                                             -> Graphics.Image.Interface.Vector.Generic.VGImage
                                                  Data.Vector.Storable.Vector
                                                  (Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                        <join 2> {- Arity: 2 -}
                                      = \ (x :: GHC.Prim.Int#)[OneShot]
                                          (wild4 :: GHC.Types.Int)[OneShot] ->
                                        let {
                                          $j3 :: GHC.Prim.Int#
                                                 -> GHC.Types.Int
                                                 -> Graphics.Image.Interface.Vector.Generic.VGImage
                                                      Data.Vector.Storable.Vector
                                                      (Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double)
                                            <join 2> {- Arity: 2 -}
                                          = \ (y :: GHC.Prim.Int#)[OneShot]
                                              (wild5 :: GHC.Types.Int)[OneShot] ->
                                            Graphics.Image.Interface.Vector.Generic.$WVGImage
                                              @ Data.Vector.Storable.Vector
                                              @ (Graphics.Image.Interface.Pixel
                                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                              wild4
                                              wild5
                                              (Data.Vector.Generic.new
                                                 @ Data.Vector.Storable.Vector
                                                 @ (Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y
                                                      GHC.Types.Double)
                                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                                 (Data.Vector.Generic.New.unstream
                                                    @ Data.Vector.Storable.Vector
                                                    @ (Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double)
                                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                                    (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                       @ Data.Vector.Fusion.Util.Id
                                                       @ (Graphics.Image.Interface.Pixel
                                                            Graphics.Image.ColorSpace.Y.Y
                                                            GHC.Types.Double)
                                                       @ Data.Vector.Storable.Vector
                                                       Data.Vector.Fusion.Util.$fMonadId
                                                       (GHC.Types.I# (GHC.Prim.*# x y))
                                                       (\ (x1 :: GHC.Types.Int) ->
                                                        case x1 of k { GHC.Types.I# ipv ->
                                                        case GHC.Real.$fIntegralInt_$cdivMod
                                                               k
                                                               wild5 of ix { (,) ipv1 ipv2 ->
                                                        case Data.Vector.Generic.unsafeIndex
                                                               @ Data.Vector.Storable.Vector
                                                               @ (Graphics.Image.Interface.Pixel
                                                                    cs1 e1)
                                                               $dVector2
                                                                 `cast`
                                                               (Data.Vector.Generic.Base.Vector
                                                                  (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                                                  <Graphics.Image.Interface.Pixel
                                                                     cs1 e1>_N)_R
                                                               v1
                                                               (case ipv1 of wild6 { GHC.Types.I# y1 ->
                                                                case ipv2 of wild7 { GHC.Types.I# y2 ->
                                                                GHC.Types.I#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.*# dt2 y1)
                                                                     y2) } }) of px1 { DEFAULT ->
                                                        case Data.Vector.Generic.unsafeIndex
                                                               @ Data.Vector.Storable.Vector
                                                               @ (Graphics.Image.Interface.Pixel
                                                                    cs2 e2)
                                                               $dVector1
                                                                 `cast`
                                                               (Data.Vector.Generic.Base.Vector
                                                                  (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                                                  <Graphics.Image.Interface.Pixel
                                                                     cs2 e2>_N)_R
                                                               v2
                                                               (case ipv1 of wild6 { GHC.Types.I# y1 ->
                                                                case ipv2 of wild7 { GHC.Types.I# y2 ->
                                                                GHC.Types.I#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.*# dt4 y1)
                                                                     y2) } }) of px2 { DEFAULT ->
                                                        f ix px1 px2 } } } })
                                                         `cast`
                                                       (<GHC.Types.Int>_R
                                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                      <Graphics.Image.Interface.Pixel
                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                         GHC.Types.Double>_R)))))
                                        } in
                                        case GHC.Prim.<=# dt2 dt4 of lwild {
                                          DEFAULT -> $j3 dt4 ds6 1# -> $j3 dt2 ds3 }
                                    } in
                                    case GHC.Prim.<=# dt1 dt3 of lwild {
                                      DEFAULT -> $j2 dt3 ds5 1# -> $j2 dt1 ds2 }
                                 GHC.Types.True -> $j1 }
                            GHC.Types.True -> $j1 }
                      } in
                      case dt3 of ds7 {
                        DEFAULT -> fail1 GHC.Prim.void#
                        1#
                        -> case dt4 of ds8 {
                             DEFAULT -> fail1 GHC.Prim.void#
                             1#
                             -> case Data.Vector.Generic.unsafeIndex
                                       @ Data.Vector.Storable.Vector
                                       @ (Graphics.Image.Interface.Pixel cs2 e2)
                                       $dVector1
                                         `cast`
                                       (Data.Vector.Generic.Base.Vector
                                          (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                          <Graphics.Image.Interface.Pixel cs2 e2>_N)_R
                                       v2
                                       (GHC.Types.I# 0#) of px2 { DEFAULT ->
                                Graphics.Image.Interface.Vector.Generic.$WVGImage
                                  @ Data.Vector.Storable.Vector
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  ds2
                                  ds3
                                  (Data.Vector.Generic.new
                                     @ Data.Vector.Storable.Vector
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     Lib.$s$fArrayVScse_$s$fVectorVectora
                                     (Data.Vector.Generic.New.unstream
                                        @ Data.Vector.Storable.Vector
                                        @ (Graphics.Image.Interface.Pixel
                                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                        Lib.$s$fArrayVScse_$s$fVectorVectora
                                        (Data.Vector.Fusion.Bundle.inplace
                                           @ (Graphics.Image.Interface.Pixel cs1 e1)
                                           @ (Graphics.Image.Interface.Pixel
                                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                           @ Data.Vector.Storable.Vector
                                           (\ @ m :: * -> *
                                              ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                            let {
                                              f2 :: Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                                                    -> m (Graphics.Image.Interface.Pixel
                                                            Graphics.Image.ColorSpace.Y.Y
                                                            GHC.Types.Double)
                                              = GHC.Base.return
                                                  @ m
                                                  $dMonad
                                                  @ (Graphics.Image.Interface.Pixel
                                                       Graphics.Image.ColorSpace.Y.Y
                                                       GHC.Types.Double)
                                            } in
                                            \ (x :: Data.Vector.Fusion.Stream.Monadic.Stream
                                                      m
                                                      (Graphics.Image.Interface.Pixel
                                                         cs1 e1))[OneShot] ->
                                            Data.Vector.Fusion.Stream.Monadic.mapM
                                              @ m
                                              @ (GHC.Types.Int,
                                                 Graphics.Image.Interface.Pixel cs1 e1)
                                              @ (Graphics.Image.Interface.Pixel
                                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                              $dMonad
                                              (\ (x1 :: (GHC.Types.Int,
                                                         Graphics.Image.Interface.Pixel cs1 e1)) ->
                                               f2
                                                 (case x1 of wild2 { (,) x2 ds9 ->
                                                  case x2 of k { GHC.Types.I# ipv ->
                                                  case ds9 of px1 { DEFAULT ->
                                                  f (GHC.Real.$fIntegralInt_$cdivMod k ds3)
                                                    px1
                                                    px2 } } }))
                                              (Data.Vector.Fusion.Stream.Monadic.indexed
                                                 @ m
                                                 @ (Graphics.Image.Interface.Pixel cs1 e1)
                                                 $dMonad
                                                 x))
                                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Storable.Vector
                                              @ (Graphics.Image.Interface.Pixel cs1 e1)
                                              $dVector2
                                                `cast`
                                              (Data.Vector.Generic.Base.Vector
                                                 (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                                 <Graphics.Image.Interface.Pixel cs1 e1>_N)_R
                                              v1)))) } } } }
                  } in
                  case dt1 of ds4 {
                    DEFAULT -> fail GHC.Prim.void#
                    1#
                    -> case dt2 of ds5 {
                         DEFAULT -> fail GHC.Prim.void#
                         1#
                         -> case ds1
                                   `cast`
                                 (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                   <cs2>_N
                                                                                                                   <e2>_N) of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                            let {
                              n :: GHC.Types.Int = GHC.Types.I# dt4
                            } in
                            case Data.Vector.Generic.unsafeIndex
                                   @ Data.Vector.Storable.Vector
                                   @ (Graphics.Image.Interface.Pixel cs1 e1)
                                   $dVector2
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                      <Graphics.Image.Interface.Pixel cs1 e1>_N)_R
                                   v1
                                   (GHC.Types.I# 0#) of px1 { DEFAULT ->
                            Graphics.Image.Interface.Vector.Generic.$WVGImage
                              @ Data.Vector.Storable.Vector
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              (GHC.Types.I# dt3)
                              n
                              (Data.Vector.Generic.new
                                 @ Data.Vector.Storable.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Storable.Vector
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                    (Data.Vector.Fusion.Bundle.inplace
                                       @ (Graphics.Image.Interface.Pixel cs2 e2)
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       @ Data.Vector.Storable.Vector
                                       (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                        let {
                                          f2 :: Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                                                -> m (Graphics.Image.Interface.Pixel
                                                        Graphics.Image.ColorSpace.Y.Y
                                                        GHC.Types.Double)
                                          = GHC.Base.return
                                              @ m
                                              $dMonad
                                              @ (Graphics.Image.Interface.Pixel
                                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                        } in
                                        \ (x :: Data.Vector.Fusion.Stream.Monadic.Stream
                                                  m
                                                  (Graphics.Image.Interface.Pixel
                                                     cs2 e2))[OneShot] ->
                                        Data.Vector.Fusion.Stream.Monadic.mapM
                                          @ m
                                          @ (GHC.Types.Int, Graphics.Image.Interface.Pixel cs2 e2)
                                          @ (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                          $dMonad
                                          (\ (x1 :: (GHC.Types.Int,
                                                     Graphics.Image.Interface.Pixel cs2 e2)) ->
                                           f2
                                             (case x1 of wild2 { (,) x2 ds6 ->
                                              case x2 of k { GHC.Types.I# ipv ->
                                              case ds6 of px2 { DEFAULT ->
                                              f (GHC.Real.$fIntegralInt_$cdivMod k n)
                                                px1
                                                px2 } } }))
                                          (Data.Vector.Fusion.Stream.Monadic.indexed
                                             @ m
                                             @ (Graphics.Image.Interface.Pixel cs2 e2)
                                             $dMonad
                                             x))
                                       (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Storable.Vector
                                          @ (Graphics.Image.Interface.Pixel cs2 e2)
                                          $dVector1
                                            `cast`
                                          (Data.Vector.Generic.Base.Vector
                                             (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                             <Graphics.Image.Interface.Pixel cs2 e2>_N)_R
                                          v2)))) } } } } })
                   `cast`
                 (<(GHC.Types.Int, GHC.Types.Int)
                   -> Graphics.Image.Interface.Pixel cs1 e1
                   -> Graphics.Image.Interface.Pixel cs2 e2
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS cs1 e1>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS cs2 e2>_R
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
7ee1d01f1357b8cab48102a4d6f72df2
  $s$fArrayVScse_$s$fArrayVScse_$cmakeImage ::
    (GHC.Types.Int, GHC.Types.Int)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 2,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,C(U(U))>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (sh :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case sh of sh2 { (,) ipv ipv1 ->
                 (\ (x :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                  let {
                    $j1 :: Graphics.Image.Interface.Vector.Generic.VGImage
                             Data.Vector.Storable.Vector
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 0>
                    = case GHC.Err.error
                             @ 'GHC.Types.LiftedRep
                             @ (GHC.Types.Int, GHC.Types.Int)
                             Graphics.Image.Interface.checkDims1
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n1 :: b)[OneShot] ->
                                 GHC.Base.foldr
                                   @ GHC.Types.Char
                                   @ b
                                   c
                                   n1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Show.showLitString
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1
                                               (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                               (n :: b1)[OneShot] ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b1
                                               "Graphics.Image.Interface.Vector.Generic.makeImageVGM"#
                                               c1
                                               n))
                                         GHC.Show.$fShow[]1)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      ": dimensions are expected to be positive: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShow(,)_$cshowsPrec
                                      @ GHC.Types.Int
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShow(,)1
                                      sh2
                                      (GHC.Types.[] @ GHC.Types.Char))))
                      ret_ty (Graphics.Image.Interface.Vector.Generic.VGImage
                                Data.Vector.Storable.Vector
                                (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      of {}
                  } in
                  case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild1 {
                    GHC.Types.False
                    -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild2 {
                         GHC.Types.False
                         -> case ipv of wild { GHC.Types.I# x1 ->
                            case ipv1 of wild4 { GHC.Types.I# y ->
                            Graphics.Image.Interface.Vector.Generic.$WVGImage
                              @ Data.Vector.Storable.Vector
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              wild
                              wild4
                              (Data.Vector.Generic.new
                                 @ Data.Vector.Storable.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Storable.Vector
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                    (Data.Vector.Fusion.Bundle.Monadic.generateM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       @ Data.Vector.Storable.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (GHC.Types.I# (GHC.Prim.*# x1 y))
                                       (\ (x2 :: GHC.Types.Int) ->
                                        x (case x2 of k1 { GHC.Types.I# ipv2 ->
                                           GHC.Real.$fIntegralInt_$cdivMod k1 wild4 }))
                                         `cast`
                                       (<GHC.Types.Int>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                      <Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double>_R))))) } }
                         GHC.Types.True -> $j1 }
                    GHC.Types.True -> $j1 })
                   `cast`
                 (<(GHC.Types.Int, GHC.Types.Int)
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) }) -}
c900684529dfcb6fe643578e5af7f8fe
  $s$fArrayVScse_$s$fArrayVScse_$cmakeImageWindowed ::
    (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 5,
     Strictness: <S(S(S)S(S)),1*U(1*U(U),1*U(U))><S(S(S)S(S)),1*U(1*U(U),U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))><L,C(U(U))><L,C(U(U))>m,
     Inline: (sat-args=5),
     Unfolding: InlineRule (5, False, False)
                (\ (sh :: (GHC.Types.Int, GHC.Types.Int))
                   (wIx :: (GHC.Types.Int, GHC.Types.Int))
                   (wSz :: (GHC.Types.Int, GHC.Types.Int))
                   (f :: (GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (g :: (GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case sh of sh2 { (,) ipv ipv1 ->
                 case wIx of wIx1 { (,) ipv2 ipv3 ->
                 case wSz of wSz1 { (,) ipv4 ipv5 ->
                 let {
                   $j1 :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double
                     <join 0>
                   = case GHC.Err.error
                            @ 'GHC.Types.LiftedRep
                            @ (GHC.Types.Int, GHC.Types.Int)
                            Graphics.Image.Interface.checkDims1
                              `cast`
                            (Sym (GHC.Classes.N:IP[0]
                                      <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                            (GHC.Base.augment
                               @ GHC.Types.Char
                               (\ @ b
                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                  (n1 :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ GHC.Types.Char
                                  @ b
                                  c
                                  n1
                                  (GHC.Types.:
                                     @ GHC.Types.Char
                                     GHC.Show.$fShow(,)3
                                     (GHC.Show.showLitString
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b1
                                              (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                              (n :: b1)[OneShot] ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b1
                                              "Graphics.Image.Interface.Vector.Generic.makeImageWindowedVG (window size)"#
                                              c1
                                              n))
                                        GHC.Show.$fShow[]1)))
                               (GHC.Base.augment
                                  @ GHC.Types.Char
                                  (\ @ b
                                     (c :: GHC.Types.Char -> b -> b)[OneShot]
                                     (n1 :: b)[OneShot] ->
                                   GHC.CString.unpackFoldrCString#
                                     @ b
                                     ": dimensions are expected to be positive: "#
                                     c
                                     n1)
                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                     @ GHC.Types.Int
                                     @ GHC.Types.Int
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShowInt
                                     GHC.Show.$fShow(,)1
                                     (ipv4, ipv5)
                                     (GHC.Types.[] @ GHC.Types.Char))))
                     ret_ty (Graphics.Image.Interface.Image
                               Graphics.Image.Interface.Vector.Storable.VS
                               Graphics.Image.ColorSpace.Y.Y
                               GHC.Types.Double)
                     of {}
                 } in
                 case GHC.Classes.leInt ipv4 (GHC.Types.I# 0#) of wild2 {
                   GHC.Types.False
                   -> case GHC.Classes.leInt ipv5 (GHC.Types.I# 0#) of wild3 {
                        GHC.Types.False
                        -> let {
                             ds2 :: (GHC.Types.Int, GHC.Types.Int)
                             = let {
                                 $j2 :: (GHC.Types.Int, GHC.Types.Int) <join 0>
                                 = GHC.Err.error
                                     @ 'GHC.Types.LiftedRep
                                     @ (GHC.Types.Int, GHC.Types.Int)
                                     Graphics.Image.Interface.checkDims1
                                       `cast`
                                     (Sym (GHC.Classes.N:IP[0]
                                               <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                     (GHC.Base.augment
                                        @ GHC.Types.Char
                                        (\ @ b
                                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                                           (n1 :: b)[OneShot] ->
                                         GHC.Base.foldr
                                           @ GHC.Types.Char
                                           @ b
                                           c
                                           n1
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShow(,)3
                                              (GHC.Show.showLitString
                                                 (GHC.Base.build
                                                    @ GHC.Types.Char
                                                    (\ @ b1
                                                       (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                                       (n :: b1)[OneShot] ->
                                                     GHC.CString.unpackFoldrCString#
                                                       @ b1
                                                       "Graphics.Image.Interface.Vector.Generic.makeImageWindowedVG"#
                                                       c1
                                                       n))
                                                 GHC.Show.$fShow[]1)))
                                        (GHC.Base.augment
                                           @ GHC.Types.Char
                                           (\ @ b
                                              (c :: GHC.Types.Char -> b -> b)[OneShot]
                                              (n1 :: b)[OneShot] ->
                                            GHC.CString.unpackFoldrCString#
                                              @ b
                                              ": dimensions are expected to be positive: "#
                                              c
                                              n1)
                                           (GHC.Show.$fShow(,)_$cshowsPrec
                                              @ GHC.Types.Int
                                              @ GHC.Types.Int
                                              GHC.Show.$fShowInt
                                              GHC.Show.$fShowInt
                                              GHC.Show.$fShow(,)1
                                              sh2
                                              (GHC.Types.[] @ GHC.Types.Char))))
                               } in
                               case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild5 {
                                      GHC.Types.False -> sh2 GHC.Types.True -> $j2 }
                                 GHC.Types.True -> $j2 }
                           } in
                           let {
                             m :: GHC.Types.Int = case ds2 of wild4 { (,) m1 n -> m1 }
                           } in
                           let {
                             n :: GHC.Types.Int = case ds2 of wild4 { (,) m1 n1 -> n1 }
                           } in
                           case ds2 of ds3 { (,) ipv6 ipv7 ->
                           let {
                             ds4 :: GHC.Types.Int
                             = case ipv4 of wild4 { GHC.Types.I# x ->
                               case ipv2 of wild5 { GHC.Types.I# y ->
                               GHC.Types.I# (GHC.Prim.+# x y) } }
                           } in
                           let {
                             ds5 :: GHC.Types.Int
                             = case ipv5 of wild4 { GHC.Types.I# x ->
                               case ipv3 of wild5 { GHC.Types.I# y ->
                               GHC.Types.I# (GHC.Prim.+# x y) } }
                           } in
                           let {
                             generate :: forall s.
                                         GHC.Prim.State# s
                                         -> (# GHC.Prim.State# s,
                                               Data.Vector.Generic.Base.Mutable
                                                 Data.Vector.Storable.Vector
                                                 s
                                                 (Graphics.Image.Interface.Pixel
                                                    Graphics.Image.ColorSpace.Y.Y
                                                    GHC.Types.Double) #)
                               {- Arity: 1 -}
                             = \ @ s (s1 :: GHC.Prim.State# s) ->
                               let {
                                 $j2 :: (# GHC.Prim.State# s,
                                           Data.Vector.Generic.Base.Mutable
                                             Data.Vector.Storable.Vector
                                             s
                                             (Graphics.Image.Interface.Pixel
                                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) #)
                                   <join 0>
                                 = case GHC.Err.error
                                          @ 'GHC.Types.LiftedRep
                                          @ (GHC.ST.ST s ())
                                          (GHC.Stack.Types.PushCallStack
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString# @ b "error"#))
                                             (GHC.Stack.Types.SrcLoc
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "hip-1.5.3.0-6W0kwpuK1By8h7TKiprsj5"#))
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "Graphics.Image.Interface.Vector.Generic"#))
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "src/Graphics/Image/Interface/Vector/Generic.hs"#))
                                                (GHC.Types.I# 147#)
                                                (GHC.Types.I# 9#)
                                                (GHC.Types.I# 151#)
                                                (GHC.Types.I# 66#))
                                             GHC.Stack.Types.EmptyCallStack)
                                            `cast`
                                          (Sym (GHC.Classes.N:IP[0]
                                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                          (GHC.Base.augment
                                             @ GHC.Types.Char
                                             (\ @ b
                                                (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                (n1 :: b)[OneShot] ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "Window index is outside the image dimensions. window start: "#
                                                c
                                                n1)
                                             (GHC.Base.augment
                                                @ GHC.Types.Char
                                                (\ @ b
                                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                   (n1 :: b)[OneShot] ->
                                                 GHC.Base.foldr
                                                   @ GHC.Types.Char
                                                   @ b
                                                   c
                                                   n1
                                                   (GHC.Show.$fShow(,)_$cshowsPrec
                                                      @ GHC.Types.Int
                                                      @ GHC.Types.Int
                                                      GHC.Show.$fShowInt
                                                      GHC.Show.$fShowInt
                                                      GHC.Show.$fShow(,)1
                                                      (ipv2, ipv3)
                                                      (GHC.Types.[] @ GHC.Types.Char)))
                                                (GHC.Base.augment
                                                   @ GHC.Types.Char
                                                   (\ @ b
                                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                      (n1 :: b)[OneShot] ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      " window size: "#
                                                      c
                                                      n1)
                                                   (GHC.Base.augment
                                                      @ GHC.Types.Char
                                                      (\ @ b
                                                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                         (n1 :: b)[OneShot] ->
                                                       GHC.Base.foldr
                                                         @ GHC.Types.Char
                                                         @ b
                                                         c
                                                         n1
                                                         (GHC.Show.$fShow(,)_$cshowsPrec
                                                            @ GHC.Types.Int
                                                            @ GHC.Types.Int
                                                            GHC.Show.$fShowInt
                                                            GHC.Show.$fShowInt
                                                            GHC.Show.$fShow(,)1
                                                            (ipv4, ipv5)
                                                            (GHC.Types.[] @ GHC.Types.Char)))
                                                      (GHC.Base.augment
                                                         @ GHC.Types.Char
                                                         (\ @ b
                                                            (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                            (n1 :: b)[OneShot] ->
                                                          GHC.CString.unpackFoldrCString#
                                                            @ b
                                                            " image dimensions: "#
                                                            c
                                                            n1)
                                                         (GHC.Show.$fShow(,)_$cshowsPrec
                                                            @ GHC.Types.Int
                                                            @ GHC.Types.Int
                                                            GHC.Show.$fShowInt
                                                            GHC.Show.$fShowInt
                                                            GHC.Show.$fShow(,)1
                                                            (m, n)
                                                            (GHC.Types.[] @ GHC.Types.Char)))))))
                                   ret_ty (# GHC.Prim.State# s,
                                             Data.Vector.Generic.Base.Mutable
                                               Data.Vector.Storable.Vector
                                               s
                                               (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) #)
                                   of {}
                               } in
                               case GHC.Classes.ltInt ipv2 (GHC.Types.I# 0#) of wild4 {
                                 GHC.Types.False
                                 -> case GHC.Classes.geInt ipv2 ds4 of wild5 {
                                      GHC.Types.False
                                      -> case GHC.Classes.ltInt ipv3 (GHC.Types.I# 0#) of wild6 {
                                           GHC.Types.False
                                           -> case GHC.Classes.geInt ipv3 ds5 of wild7 {
                                                GHC.Types.False
                                                -> case GHC.Classes.gtInt ds4 m of wild8 {
                                                     GHC.Types.False
                                                     -> case GHC.Classes.gtInt ds5 n of wild9 {
                                                          GHC.Types.False
                                                          -> let {
                                                               n1 :: GHC.Types.Int
                                                               = case m of wild10 { GHC.Types.I# x ->
                                                                 case n of wild11 { GHC.Types.I# y ->
                                                                 GHC.Types.I# (GHC.Prim.*# x y) } }
                                                             } in
                                                             case GHC.Classes.ltInt
                                                                    n1
                                                                    (GHC.Types.I# 0#) of wild {
                                                               GHC.Types.False
                                                               -> case GHC.Classes.gtInt
                                                                         n1
                                                                         (GHC.Real.$fIntegralInt_$cquot
                                                                            GHC.Base.maxInt
                                                                            Foreign.Storable.$fStorableDouble5) of wild1 {
                                                                    GHC.Types.False
                                                                    -> case n1 of wild11 { GHC.Types.I# x ->
                                                                       let {
                                                                         x1 :: GHC.Prim.Int#
                                                                         = GHC.Prim.*# x 8#
                                                                       } in
                                                                       case GHC.Prim.<#
                                                                              x1
                                                                              0# of lwild {
                                                                         DEFAULT
                                                                         -> case GHC.Prim.newAlignedPinnedByteArray#
                                                                                   @ GHC.Prim.RealWorld
                                                                                   x1
                                                                                   8#
                                                                                   s1
                                                                                     `cast`
                                                                                   (GHC.Prim.State#
                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                             (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                  s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds { (#,#) ipv8 ipv9 ->
                                                                            let {
                                                                              ipv10 :: Data.Vector.Storable.Mutable.MVector
                                                                                         (Control.Monad.Primitive.PrimState
                                                                                            (GHC.ST.ST
                                                                                               s))
                                                                                         (Graphics.Image.Interface.Pixel
                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                            GHC.Types.Double)
                                                                              = Data.Vector.Storable.Mutable.$WMVector
                                                                                  @ (Control.Monad.Primitive.PrimState
                                                                                       (GHC.ST.ST
                                                                                          s))
                                                                                  @ (Graphics.Image.Interface.Pixel
                                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                                       GHC.Types.Double)
                                                                                  wild11
                                                                                  (GHC.ForeignPtr.ForeignPtr
                                                                                     @ (Graphics.Image.Interface.Pixel
                                                                                          Graphics.Image.ColorSpace.Y.Y
                                                                                          GHC.Types.Double)
                                                                                     (GHC.Prim.byteArrayContents#
                                                                                        ipv9
                                                                                          `cast`
                                                                                        (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                                                      GHC.Prim.RealWorld) GHC.Prim.ByteArray#))
                                                                                     (GHC.ForeignPtr.PlainPtr
                                                                                        ipv9))
                                                                            } in
                                                                            letrec {
                                                                              go1 :: GHC.Types.Int
                                                                                     -> GHC.ST.ST
                                                                                          s ()
                                                                                {- Arity: 1 -}
                                                                              = \ (step :: GHC.Types.Int) ->
                                                                                case step of step1 { GHC.Types.I# ipv11 ->
                                                                                case GHC.Classes.ltInt
                                                                                       step1
                                                                                       n of wild10 {
                                                                                  GHC.Types.False
                                                                                  -> (\ (s2 :: GHC.Prim.State#
                                                                                                 s) ->
                                                                                      (# s2,
                                                                                         GHC.Tuple.() #))
                                                                                       `cast`
                                                                                     (Sym (GHC.ST.N:ST[0]
                                                                                               <s>_N
                                                                                               <()>_R))
                                                                                  GHC.Types.True
                                                                                  -> (\ (s2 :: GHC.Prim.State#
                                                                                                 s) ->
                                                                                      letrec {
                                                                                        go2 :: GHC.Types.Int
                                                                                               -> GHC.ST.ST
                                                                                                    s
                                                                                                    ()
                                                                                          {- Arity: 1 -}
                                                                                        = \ (step2 :: GHC.Types.Int) ->
                                                                                          case step2 of step3 { GHC.Types.I# ipv12 ->
                                                                                          case GHC.Classes.ltInt
                                                                                                 step3
                                                                                                 ipv2 of wild14 {
                                                                                            GHC.Types.False
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                (# s3,
                                                                                                   GHC.Tuple.() #))
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R))
                                                                                            GHC.Types.True
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                case n of n2 { GHC.Types.I# ipv13 ->
                                                                                                case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                        @ GHC.Types.Double
                                                                                                        Foreign.Storable.$fStorableDouble
                                                                                                        (GHC.Ptr.Ptr
                                                                                                           @ (Graphics.Image.Interface.Pixel
                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                GHC.Types.Double)
                                                                                                           dt2)
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              (GHC.Prim.*#
                                                                                                                 ipv13
                                                                                                                 ipv12)
                                                                                                              ipv11))
                                                                                                        (g (step3,
                                                                                                            step1)))
                                                                                                       `cast`
                                                                                                     (GHC.Types.N:IO[0]
                                                                                                          <()>_R)
                                                                                                       s3
                                                                                                         `cast`
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                 (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                      s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv16 ipv14 ->
                                                                                                case GHC.Prim.touch#
                                                                                                       @ 'GHC.Types.LiftedRep
                                                                                                       @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                       dt3
                                                                                                       ipv16 of s' { DEFAULT ->
                                                                                                (go2
                                                                                                   (GHC.Types.I#
                                                                                                      (GHC.Prim.+#
                                                                                                         ipv12
                                                                                                         1#)))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <s>_N
                                                                                                     <()>_R)
                                                                                                  s'
                                                                                                    `cast`
                                                                                                  (GHC.Prim.State#
                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                             (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                               s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                            <s>_N)))_R } } } })
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R)) } }
                                                                                      } in
                                                                                      case (go2
                                                                                              (GHC.Types.I#
                                                                                                 0#))
                                                                                             `cast`
                                                                                           (GHC.ST.N:ST[0]
                                                                                                <s>_N
                                                                                                <()>_R)
                                                                                             s2 of ds7 { (#,#) ipv12 ipv13 ->
                                                                                      case ds4 of init'1 { GHC.Types.I# ipv14 ->
                                                                                      letrec {
                                                                                        go3 :: GHC.Types.Int
                                                                                               -> GHC.ST.ST
                                                                                                    s
                                                                                                    ()
                                                                                          {- Arity: 1 -}
                                                                                        = \ (step2 :: GHC.Types.Int) ->
                                                                                          case step2 of step3 { GHC.Types.I# ipv15 ->
                                                                                          case GHC.Classes.ltInt
                                                                                                 step3
                                                                                                 m of wild14 {
                                                                                            GHC.Types.False
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                (# s3,
                                                                                                   GHC.Tuple.() #))
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R))
                                                                                            GHC.Types.True
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                case n of n2 { GHC.Types.I# ipv16 ->
                                                                                                case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                        @ GHC.Types.Double
                                                                                                        Foreign.Storable.$fStorableDouble
                                                                                                        (GHC.Ptr.Ptr
                                                                                                           @ (Graphics.Image.Interface.Pixel
                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                GHC.Types.Double)
                                                                                                           dt2)
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              (GHC.Prim.*#
                                                                                                                 ipv16
                                                                                                                 ipv15)
                                                                                                              ipv11))
                                                                                                        (g (step3,
                                                                                                            step1)))
                                                                                                       `cast`
                                                                                                     (GHC.Types.N:IO[0]
                                                                                                          <()>_R)
                                                                                                       s3
                                                                                                         `cast`
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                 (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                      s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv22 ipv17 ->
                                                                                                case GHC.Prim.touch#
                                                                                                       @ 'GHC.Types.LiftedRep
                                                                                                       @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                       dt3
                                                                                                       ipv22 of s' { DEFAULT ->
                                                                                                (go3
                                                                                                   (GHC.Types.I#
                                                                                                      (GHC.Prim.+#
                                                                                                         ipv15
                                                                                                         1#)))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <s>_N
                                                                                                     <()>_R)
                                                                                                  s'
                                                                                                    `cast`
                                                                                                  (GHC.Prim.State#
                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                             (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                               s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                            <s>_N)))_R } } } })
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R)) } }
                                                                                      } in
                                                                                      case (go3
                                                                                              init'1)
                                                                                             `cast`
                                                                                           (GHC.ST.N:ST[0]
                                                                                                <s>_N
                                                                                                <()>_R)
                                                                                             ipv12 of ds8 { (#,#) ipv15 ipv16 ->
                                                                                      (go1
                                                                                         (GHC.Types.I#
                                                                                            (GHC.Prim.+#
                                                                                               ipv11
                                                                                               1#)))
                                                                                        `cast`
                                                                                      (GHC.ST.N:ST[0]
                                                                                           <s>_N
                                                                                           <()>_R)
                                                                                        ipv15 } } })
                                                                                       `cast`
                                                                                     (Sym (GHC.ST.N:ST[0]
                                                                                               <s>_N
                                                                                               <()>_R)) } }
                                                                            } in
                                                                            case (go1
                                                                                    (GHC.Types.I#
                                                                                       0#))
                                                                                   `cast`
                                                                                 (GHC.ST.N:ST[0]
                                                                                      <s>_N <()>_R)
                                                                                   ipv8
                                                                                     `cast`
                                                                                   (GHC.Prim.State#
                                                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                              (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                             <s>_N)))_R of ds7 { (#,#) ipv11 ipv12 ->
                                                                            case ipv2 of init'1 { GHC.Types.I# ipv13 ->
                                                                            letrec {
                                                                              go2 :: GHC.Types.Int
                                                                                     -> GHC.ST.ST
                                                                                          s ()
                                                                                {- Arity: 1 -}
                                                                              = \ (step :: GHC.Types.Int) ->
                                                                                case step of step1 { GHC.Types.I# ipv14 ->
                                                                                case GHC.Classes.ltInt
                                                                                       step1
                                                                                       ds4 of wild10 {
                                                                                  GHC.Types.False
                                                                                  -> (\ (s2 :: GHC.Prim.State#
                                                                                                 s) ->
                                                                                      (# s2,
                                                                                         GHC.Tuple.() #))
                                                                                       `cast`
                                                                                     (Sym (GHC.ST.N:ST[0]
                                                                                               <s>_N
                                                                                               <()>_R))
                                                                                  GHC.Types.True
                                                                                  -> (\ (s2 :: GHC.Prim.State#
                                                                                                 s) ->
                                                                                      letrec {
                                                                                        go3 :: GHC.Types.Int
                                                                                               -> GHC.ST.ST
                                                                                                    s
                                                                                                    ()
                                                                                          {- Arity: 1 -}
                                                                                        = \ (step2 :: GHC.Types.Int) ->
                                                                                          case step2 of step3 { GHC.Types.I# ipv15 ->
                                                                                          case GHC.Classes.ltInt
                                                                                                 step3
                                                                                                 ipv3 of wild14 {
                                                                                            GHC.Types.False
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                (# s3,
                                                                                                   GHC.Tuple.() #))
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R))
                                                                                            GHC.Types.True
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                case n of n2 { GHC.Types.I# ipv16 ->
                                                                                                case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                        @ GHC.Types.Double
                                                                                                        Foreign.Storable.$fStorableDouble
                                                                                                        (GHC.Ptr.Ptr
                                                                                                           @ (Graphics.Image.Interface.Pixel
                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                GHC.Types.Double)
                                                                                                           dt2)
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              (GHC.Prim.*#
                                                                                                                 ipv16
                                                                                                                 ipv14)
                                                                                                              ipv15))
                                                                                                        (g (step1,
                                                                                                            step3)))
                                                                                                       `cast`
                                                                                                     (GHC.Types.N:IO[0]
                                                                                                          <()>_R)
                                                                                                       s3
                                                                                                         `cast`
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                 (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                      s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv22 ipv17 ->
                                                                                                case GHC.Prim.touch#
                                                                                                       @ 'GHC.Types.LiftedRep
                                                                                                       @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                       dt3
                                                                                                       ipv22 of s' { DEFAULT ->
                                                                                                (go3
                                                                                                   (GHC.Types.I#
                                                                                                      (GHC.Prim.+#
                                                                                                         ipv15
                                                                                                         1#)))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <s>_N
                                                                                                     <()>_R)
                                                                                                  s'
                                                                                                    `cast`
                                                                                                  (GHC.Prim.State#
                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                             (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                               s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                            <s>_N)))_R } } } })
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R)) } }
                                                                                      } in
                                                                                      case (go3
                                                                                              (GHC.Types.I#
                                                                                                 0#))
                                                                                             `cast`
                                                                                           (GHC.ST.N:ST[0]
                                                                                                <s>_N
                                                                                                <()>_R)
                                                                                             s2 of ds8 { (#,#) ipv15 ipv16 ->
                                                                                      case ipv3 of init'2 { GHC.Types.I# ipv17 ->
                                                                                      letrec {
                                                                                        go4 :: GHC.Types.Int
                                                                                               -> GHC.ST.ST
                                                                                                    s
                                                                                                    ()
                                                                                          {- Arity: 1 -}
                                                                                        = \ (step2 :: GHC.Types.Int) ->
                                                                                          case step2 of step3 { GHC.Types.I# ipv18 ->
                                                                                          case GHC.Classes.ltInt
                                                                                                 step3
                                                                                                 ds5 of wild14 {
                                                                                            GHC.Types.False
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                (# s3,
                                                                                                   GHC.Tuple.() #))
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R))
                                                                                            GHC.Types.True
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                case n of n2 { GHC.Types.I# ipv19 ->
                                                                                                case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                        @ GHC.Types.Double
                                                                                                        Foreign.Storable.$fStorableDouble
                                                                                                        (GHC.Ptr.Ptr
                                                                                                           @ (Graphics.Image.Interface.Pixel
                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                GHC.Types.Double)
                                                                                                           dt2)
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              (GHC.Prim.*#
                                                                                                                 ipv19
                                                                                                                 ipv14)
                                                                                                              ipv18))
                                                                                                        (f (step1,
                                                                                                            step3)))
                                                                                                       `cast`
                                                                                                     (GHC.Types.N:IO[0]
                                                                                                          <()>_R)
                                                                                                       s3
                                                                                                         `cast`
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                 (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                      s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv22 ipv20 ->
                                                                                                case GHC.Prim.touch#
                                                                                                       @ 'GHC.Types.LiftedRep
                                                                                                       @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                       dt3
                                                                                                       ipv22 of s' { DEFAULT ->
                                                                                                (go4
                                                                                                   (GHC.Types.I#
                                                                                                      (GHC.Prim.+#
                                                                                                         ipv18
                                                                                                         1#)))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <s>_N
                                                                                                     <()>_R)
                                                                                                  s'
                                                                                                    `cast`
                                                                                                  (GHC.Prim.State#
                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                             (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                               s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                            <s>_N)))_R } } } })
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R)) } }
                                                                                      } in
                                                                                      case (go4
                                                                                              init'2)
                                                                                             `cast`
                                                                                           (GHC.ST.N:ST[0]
                                                                                                <s>_N
                                                                                                <()>_R)
                                                                                             ipv15 of ds9 { (#,#) ipv18 ipv19 ->
                                                                                      case ds5 of init'3 { GHC.Types.I# ipv20 ->
                                                                                      letrec {
                                                                                        go5 :: GHC.Types.Int
                                                                                               -> GHC.ST.ST
                                                                                                    s
                                                                                                    ()
                                                                                          {- Arity: 1 -}
                                                                                        = \ (step2 :: GHC.Types.Int) ->
                                                                                          case step2 of step3 { GHC.Types.I# ipv21 ->
                                                                                          case GHC.Classes.ltInt
                                                                                                 step3
                                                                                                 n of wild14 {
                                                                                            GHC.Types.False
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                (# s3,
                                                                                                   GHC.Tuple.() #))
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R))
                                                                                            GHC.Types.True
                                                                                            -> (\ (s3 :: GHC.Prim.State#
                                                                                                           s) ->
                                                                                                case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                case n of n2 { GHC.Types.I# ipv22 ->
                                                                                                case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                        @ GHC.Types.Double
                                                                                                        Foreign.Storable.$fStorableDouble
                                                                                                        (GHC.Ptr.Ptr
                                                                                                           @ (Graphics.Image.Interface.Pixel
                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                GHC.Types.Double)
                                                                                                           dt2)
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              (GHC.Prim.*#
                                                                                                                 ipv22
                                                                                                                 ipv14)
                                                                                                              ipv21))
                                                                                                        (g (step1,
                                                                                                            step3)))
                                                                                                       `cast`
                                                                                                     (GHC.Types.N:IO[0]
                                                                                                          <()>_R)
                                                                                                       s3
                                                                                                         `cast`
                                                                                                       (GHC.Prim.State#
                                                                                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                    <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                 (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                      s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv29 ipv23 ->
                                                                                                case GHC.Prim.touch#
                                                                                                       @ 'GHC.Types.LiftedRep
                                                                                                       @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                       dt3
                                                                                                       ipv29 of s' { DEFAULT ->
                                                                                                (go5
                                                                                                   (GHC.Types.I#
                                                                                                      (GHC.Prim.+#
                                                                                                         ipv21
                                                                                                         1#)))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <s>_N
                                                                                                     <()>_R)
                                                                                                  s'
                                                                                                    `cast`
                                                                                                  (GHC.Prim.State#
                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                             (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                               s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                            <s>_N)))_R } } } })
                                                                                                 `cast`
                                                                                               (Sym (GHC.ST.N:ST[0]
                                                                                                         <s>_N
                                                                                                         <()>_R)) } }
                                                                                      } in
                                                                                      case (go5
                                                                                              init'3)
                                                                                             `cast`
                                                                                           (GHC.ST.N:ST[0]
                                                                                                <s>_N
                                                                                                <()>_R)
                                                                                             ipv18 of ds10 { (#,#) ipv21 ipv22 ->
                                                                                      (go2
                                                                                         (GHC.Types.I#
                                                                                            (GHC.Prim.+#
                                                                                               ipv14
                                                                                               1#)))
                                                                                        `cast`
                                                                                      (GHC.ST.N:ST[0]
                                                                                           <s>_N
                                                                                           <()>_R)
                                                                                        ipv21 } } } } })
                                                                                       `cast`
                                                                                     (Sym (GHC.ST.N:ST[0]
                                                                                               <s>_N
                                                                                               <()>_R)) } }
                                                                            } in
                                                                            case (go2 init'1)
                                                                                   `cast`
                                                                                 (GHC.ST.N:ST[0]
                                                                                      <s>_N <()>_R)
                                                                                   ipv11 of ds8 { (#,#) ipv14 ipv15 ->
                                                                            (# ipv14,
                                                                               ipv10
                                                                                 `cast`
                                                                               (Sub (Sym (Data.Vector.Storable.D:R:MutableVector[0])) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                           <s>_N) <Graphics.Image.Interface.Pixel
                                                                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                     GHC.Types.Double>_N) #) } } } }
                                                                         1#
                                                                         -> case GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
                                                                            ret_ty (# GHC.Prim.State#
                                                                                        s,
                                                                                      Data.Vector.Generic.Base.Mutable
                                                                                        Data.Vector.Storable.Vector
                                                                                        s
                                                                                        (Graphics.Image.Interface.Pixel
                                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                                           GHC.Types.Double) #)
                                                                            of {} } }
                                                                    GHC.Types.True
                                                                    -> case GHC.Err.error
                                                                              @ 'GHC.Types.LiftedRep
                                                                              @ (GHC.ST.ST
                                                                                   s
                                                                                   (Data.Vector.Storable.Mutable.MVector
                                                                                      (Control.Monad.Primitive.PrimState
                                                                                         (GHC.ST.ST
                                                                                            s))
                                                                                      (Graphics.Image.Interface.Pixel
                                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                                         GHC.Types.Double)))
                                                                              (GHC.Stack.Types.PushCallStack
                                                                                 (GHC.Base.build
                                                                                    @ GHC.Types.Char
                                                                                    (\ @ b ->
                                                                                     GHC.CString.unpackFoldrCString#
                                                                                       @ b
                                                                                       "error"#))
                                                                                 (GHC.Stack.Types.SrcLoc
                                                                                    (GHC.Base.build
                                                                                       @ GHC.Types.Char
                                                                                       (\ @ b ->
                                                                                        GHC.CString.unpackFoldrCString#
                                                                                          @ b
                                                                                          "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                                                    (GHC.Base.build
                                                                                       @ GHC.Types.Char
                                                                                       (\ @ b ->
                                                                                        GHC.CString.unpackFoldrCString#
                                                                                          @ b
                                                                                          "Data.Vector.Storable.Mutable"#))
                                                                                    (GHC.Base.build
                                                                                       @ GHC.Types.Char
                                                                                       (\ @ b ->
                                                                                        GHC.CString.unpackFoldrCString#
                                                                                          @ b
                                                                                          "./Data/Vector/Storable/Mutable.hs"#))
                                                                                    (GHC.Types.I#
                                                                                       126#)
                                                                                    (GHC.Types.I#
                                                                                       16#)
                                                                                    (GHC.Types.I#
                                                                                       126#)
                                                                                    (GHC.Types.I#
                                                                                       79#))
                                                                                 GHC.Stack.Types.EmptyCallStack)
                                                                                `cast`
                                                                              (Sym (GHC.Classes.N:IP[0]
                                                                                        <"callStack">_N
                                                                                        <GHC.Stack.Types.CallStack>_N))
                                                                              (GHC.Base.augment
                                                                                 @ GHC.Types.Char
                                                                                 (\ @ b
                                                                                    (c :: GHC.Types.Char
                                                                                          -> b
                                                                                          -> b)[OneShot]
                                                                                    (n2 :: b)[OneShot] ->
                                                                                  GHC.CString.unpackFoldrCString#
                                                                                    @ b
                                                                                    "Storable.basicUnsafeNew: length too large: "#
                                                                                    c
                                                                                    n2)
                                                                                 (GHC.Show.showSignedInt
                                                                                    GHC.Show.$fShow(,)1
                                                                                    n1
                                                                                    (GHC.Types.[]
                                                                                       @ GHC.Types.Char)))
                                                                       ret_ty (# GHC.Prim.State# s,
                                                                                 Data.Vector.Generic.Base.Mutable
                                                                                   Data.Vector.Storable.Vector
                                                                                   s
                                                                                   (Graphics.Image.Interface.Pixel
                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                      GHC.Types.Double) #)
                                                                       of {} }
                                                               GHC.Types.True
                                                               -> case GHC.Err.error
                                                                         @ 'GHC.Types.LiftedRep
                                                                         @ (GHC.ST.ST
                                                                              s
                                                                              (Data.Vector.Storable.Mutable.MVector
                                                                                 (Control.Monad.Primitive.PrimState
                                                                                    (GHC.ST.ST s))
                                                                                 (Graphics.Image.Interface.Pixel
                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                    GHC.Types.Double)))
                                                                         (GHC.Stack.Types.PushCallStack
                                                                            (GHC.Base.build
                                                                               @ GHC.Types.Char
                                                                               (\ @ b ->
                                                                                GHC.CString.unpackFoldrCString#
                                                                                  @ b
                                                                                  "error"#))
                                                                            (GHC.Stack.Types.SrcLoc
                                                                               (GHC.Base.build
                                                                                  @ GHC.Types.Char
                                                                                  (\ @ b ->
                                                                                   GHC.CString.unpackFoldrCString#
                                                                                     @ b
                                                                                     "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                                               (GHC.Base.build
                                                                                  @ GHC.Types.Char
                                                                                  (\ @ b ->
                                                                                   GHC.CString.unpackFoldrCString#
                                                                                     @ b
                                                                                     "Data.Vector.Storable.Mutable"#))
                                                                               (GHC.Base.build
                                                                                  @ GHC.Types.Char
                                                                                  (\ @ b ->
                                                                                   GHC.CString.unpackFoldrCString#
                                                                                     @ b
                                                                                     "./Data/Vector/Storable/Mutable.hs"#))
                                                                               (GHC.Types.I# 125#)
                                                                               (GHC.Types.I# 15#)
                                                                               (GHC.Types.I# 125#)
                                                                               (GHC.Types.I# 77#))
                                                                            GHC.Stack.Types.EmptyCallStack)
                                                                           `cast`
                                                                         (Sym (GHC.Classes.N:IP[0]
                                                                                   <"callStack">_N
                                                                                   <GHC.Stack.Types.CallStack>_N))
                                                                         (GHC.Base.augment
                                                                            @ GHC.Types.Char
                                                                            (\ @ b
                                                                               (c :: GHC.Types.Char
                                                                                     -> b
                                                                                     -> b)[OneShot]
                                                                               (n2 :: b)[OneShot] ->
                                                                             GHC.CString.unpackFoldrCString#
                                                                               @ b
                                                                               "Storable.basicUnsafeNew: negative length: "#
                                                                               c
                                                                               n2)
                                                                            (GHC.Show.showSignedInt
                                                                               GHC.Show.$fShow(,)1
                                                                               n1
                                                                               (GHC.Types.[]
                                                                                  @ GHC.Types.Char)))
                                                                  ret_ty (# GHC.Prim.State# s,
                                                                            Data.Vector.Generic.Base.Mutable
                                                                              Data.Vector.Storable.Vector
                                                                              s
                                                                              (Graphics.Image.Interface.Pixel
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double) #)
                                                                  of {} }
                                                          GHC.Types.True -> $j2 }
                                                     GHC.Types.True -> $j2 }
                                                GHC.Types.True -> $j2 }
                                           GHC.Types.True -> $j2 }
                                      GHC.Types.True -> $j2 }
                                 GHC.Types.True -> $j2 }
                           } in
                           let {
                             generate1 :: forall s.
                                          GHC.ST.ST
                                            s
                                            (Data.Vector.Generic.Base.Mutable
                                               Data.Vector.Storable.Vector
                                               s
                                               (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                               {- Arity: 1, Inline: (sat-args=0),
                                  Unfolding: InlineRule (0, False, False)
                                             (\ @ s (s1 :: GHC.Prim.State# s) ->
                                              let {
                                                $j2 :: (# GHC.Prim.State# s,
                                                          Data.Vector.Generic.Base.Mutable
                                                            Data.Vector.Storable.Vector
                                                            s
                                                            (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double) #)
                                                  <join 0>
                                                = case GHC.Err.error
                                                         @ 'GHC.Types.LiftedRep
                                                         @ (GHC.ST.ST s ())
                                                         (GHC.Stack.Types.PushCallStack
                                                            (GHC.Base.build
                                                               @ GHC.Types.Char
                                                               (\ @ b ->
                                                                GHC.CString.unpackFoldrCString#
                                                                  @ b
                                                                  "error"#))
                                                            (GHC.Stack.Types.SrcLoc
                                                               (GHC.Base.build
                                                                  @ GHC.Types.Char
                                                                  (\ @ b ->
                                                                   GHC.CString.unpackFoldrCString#
                                                                     @ b
                                                                     "hip-1.5.3.0-6W0kwpuK1By8h7TKiprsj5"#))
                                                               (GHC.Base.build
                                                                  @ GHC.Types.Char
                                                                  (\ @ b ->
                                                                   GHC.CString.unpackFoldrCString#
                                                                     @ b
                                                                     "Graphics.Image.Interface.Vector.Generic"#))
                                                               (GHC.Base.build
                                                                  @ GHC.Types.Char
                                                                  (\ @ b ->
                                                                   GHC.CString.unpackFoldrCString#
                                                                     @ b
                                                                     "src/Graphics/Image/Interface/Vector/Generic.hs"#))
                                                               (GHC.Types.I# 147#)
                                                               (GHC.Types.I# 9#)
                                                               (GHC.Types.I# 151#)
                                                               (GHC.Types.I# 66#))
                                                            GHC.Stack.Types.EmptyCallStack)
                                                           `cast`
                                                         (Sym (GHC.Classes.N:IP[0]
                                                                   <"callStack">_N
                                                                   <GHC.Stack.Types.CallStack>_N))
                                                         (GHC.Base.augment
                                                            @ GHC.Types.Char
                                                            (\ @ b
                                                               (c :: GHC.Types.Char
                                                                     -> b -> b)[OneShot]
                                                               (n1 :: b)[OneShot] ->
                                                             GHC.CString.unpackFoldrCString#
                                                               @ b
                                                               "Window index is outside the image dimensions. window start: "#
                                                               c
                                                               n1)
                                                            (GHC.Base.augment
                                                               @ GHC.Types.Char
                                                               (\ @ b
                                                                  (c :: GHC.Types.Char
                                                                        -> b -> b)[OneShot]
                                                                  (n1 :: b)[OneShot] ->
                                                                GHC.Base.foldr
                                                                  @ GHC.Types.Char
                                                                  @ b
                                                                  c
                                                                  n1
                                                                  (GHC.Show.$fShow(,)_$cshowsPrec
                                                                     @ GHC.Types.Int
                                                                     @ GHC.Types.Int
                                                                     GHC.Show.$fShowInt
                                                                     GHC.Show.$fShowInt
                                                                     GHC.Show.$fShow(,)1
                                                                     (ipv2, ipv3)
                                                                     (GHC.Types.[]
                                                                        @ GHC.Types.Char)))
                                                               (GHC.Base.augment
                                                                  @ GHC.Types.Char
                                                                  (\ @ b
                                                                     (c :: GHC.Types.Char
                                                                           -> b -> b)[OneShot]
                                                                     (n1 :: b)[OneShot] ->
                                                                   GHC.CString.unpackFoldrCString#
                                                                     @ b
                                                                     " window size: "#
                                                                     c
                                                                     n1)
                                                                  (GHC.Base.augment
                                                                     @ GHC.Types.Char
                                                                     (\ @ b
                                                                        (c :: GHC.Types.Char
                                                                              -> b -> b)[OneShot]
                                                                        (n1 :: b)[OneShot] ->
                                                                      GHC.Base.foldr
                                                                        @ GHC.Types.Char
                                                                        @ b
                                                                        c
                                                                        n1
                                                                        (GHC.Show.$fShow(,)_$cshowsPrec
                                                                           @ GHC.Types.Int
                                                                           @ GHC.Types.Int
                                                                           GHC.Show.$fShowInt
                                                                           GHC.Show.$fShowInt
                                                                           GHC.Show.$fShow(,)1
                                                                           (ipv4, ipv5)
                                                                           (GHC.Types.[]
                                                                              @ GHC.Types.Char)))
                                                                     (GHC.Base.augment
                                                                        @ GHC.Types.Char
                                                                        (\ @ b
                                                                           (c :: GHC.Types.Char
                                                                                 -> b -> b)[OneShot]
                                                                           (n1 :: b)[OneShot] ->
                                                                         GHC.CString.unpackFoldrCString#
                                                                           @ b
                                                                           " image dimensions: "#
                                                                           c
                                                                           n1)
                                                                        (GHC.Show.$fShow(,)_$cshowsPrec
                                                                           @ GHC.Types.Int
                                                                           @ GHC.Types.Int
                                                                           GHC.Show.$fShowInt
                                                                           GHC.Show.$fShowInt
                                                                           GHC.Show.$fShow(,)1
                                                                           (m, n)
                                                                           (GHC.Types.[]
                                                                              @ GHC.Types.Char)))))))
                                                  ret_ty (# GHC.Prim.State# s,
                                                            Data.Vector.Generic.Base.Mutable
                                                              Data.Vector.Storable.Vector
                                                              s
                                                              (Graphics.Image.Interface.Pixel
                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                 GHC.Types.Double) #)
                                                  of {}
                                              } in
                                              case GHC.Classes.ltInt
                                                     ipv2
                                                     (GHC.Types.I# 0#) of wild4 {
                                                GHC.Types.False
                                                -> case GHC.Classes.geInt ipv2 ds4 of wild5 {
                                                     GHC.Types.False
                                                     -> case GHC.Classes.ltInt
                                                               ipv3
                                                               (GHC.Types.I# 0#) of wild6 {
                                                          GHC.Types.False
                                                          -> case GHC.Classes.geInt
                                                                    ipv3
                                                                    ds5 of wild7 {
                                                               GHC.Types.False
                                                               -> case GHC.Classes.gtInt
                                                                         ds4
                                                                         m of wild8 {
                                                                    GHC.Types.False
                                                                    -> case GHC.Classes.gtInt
                                                                              ds5
                                                                              n of wild9 {
                                                                         GHC.Types.False
                                                                         -> let {
                                                                              n1 :: GHC.Types.Int
                                                                              = case m of wild10 { GHC.Types.I# x ->
                                                                                case n of wild11 { GHC.Types.I# y ->
                                                                                GHC.Types.I#
                                                                                  (GHC.Prim.*#
                                                                                     x
                                                                                     y) } }
                                                                            } in
                                                                            case GHC.Classes.ltInt
                                                                                   n1
                                                                                   (GHC.Types.I#
                                                                                      0#) of wild {
                                                                              GHC.Types.False
                                                                              -> case GHC.Classes.gtInt
                                                                                        n1
                                                                                        (GHC.Real.$fIntegralInt_$cquot
                                                                                           GHC.Base.maxInt
                                                                                           Foreign.Storable.$fStorableDouble5) of wild1 {
                                                                                   GHC.Types.False
                                                                                   -> case n1 of wild11 { GHC.Types.I# x ->
                                                                                      let {
                                                                                        x1 :: GHC.Prim.Int#
                                                                                        = GHC.Prim.*#
                                                                                            x
                                                                                            8#
                                                                                      } in
                                                                                      case GHC.Prim.<#
                                                                                             x1
                                                                                             0# of lwild {
                                                                                        DEFAULT
                                                                                        -> case GHC.Prim.newAlignedPinnedByteArray#
                                                                                                  @ GHC.Prim.RealWorld
                                                                                                  x1
                                                                                                  8#
                                                                                                  s1
                                                                                                    `cast`
                                                                                                  (GHC.Prim.State#
                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                               <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                            (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                 s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds { (#,#) ipv8 ipv9 ->
                                                                                           let {
                                                                                             ipv10 :: Data.Vector.Storable.Mutable.MVector
                                                                                                        (Control.Monad.Primitive.PrimState
                                                                                                           (GHC.ST.ST
                                                                                                              s))
                                                                                                        (Graphics.Image.Interface.Pixel
                                                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                                                           GHC.Types.Double)
                                                                                             = Data.Vector.Storable.Mutable.$WMVector
                                                                                                 @ (Control.Monad.Primitive.PrimState
                                                                                                      (GHC.ST.ST
                                                                                                         s))
                                                                                                 @ (Graphics.Image.Interface.Pixel
                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                      GHC.Types.Double)
                                                                                                 wild11
                                                                                                 (GHC.ForeignPtr.ForeignPtr
                                                                                                    @ (Graphics.Image.Interface.Pixel
                                                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                                                         GHC.Types.Double)
                                                                                                    (GHC.Prim.byteArrayContents#
                                                                                                       ipv9
                                                                                                         `cast`
                                                                                                       (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                                                                     GHC.Prim.RealWorld) GHC.Prim.ByteArray#))
                                                                                                    (GHC.ForeignPtr.PlainPtr
                                                                                                       ipv9))
                                                                                           } in
                                                                                           letrec {
                                                                                             go1 :: GHC.Types.Int
                                                                                                    -> GHC.ST.ST
                                                                                                         s
                                                                                                         ()
                                                                                               {- Arity: 1 -}
                                                                                             = \ (step :: GHC.Types.Int) ->
                                                                                               case step of step1 { GHC.Types.I# ipv11 ->
                                                                                               case GHC.Classes.ltInt
                                                                                                      step1
                                                                                                      n of wild10 {
                                                                                                 GHC.Types.False
                                                                                                 -> (\ (s2 :: GHC.Prim.State#
                                                                                                                s) ->
                                                                                                     (# s2,
                                                                                                        GHC.Tuple.() #))
                                                                                                      `cast`
                                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                                              <s>_N
                                                                                                              <()>_R))
                                                                                                 GHC.Types.True
                                                                                                 -> (\ (s2 :: GHC.Prim.State#
                                                                                                                s) ->
                                                                                                     letrec {
                                                                                                       go2 :: GHC.Types.Int
                                                                                                              -> GHC.ST.ST
                                                                                                                   s
                                                                                                                   ()
                                                                                                         {- Arity: 1 -}
                                                                                                       = \ (step2 :: GHC.Types.Int) ->
                                                                                                         case step2 of step3 { GHC.Types.I# ipv12 ->
                                                                                                         case GHC.Classes.ltInt
                                                                                                                step3
                                                                                                                ipv2 of wild14 {
                                                                                                           GHC.Types.False
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               (# s3,
                                                                                                                  GHC.Tuple.() #))
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R))
                                                                                                           GHC.Types.True
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                               case n of n2 { GHC.Types.I# ipv13 ->
                                                                                                               case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                                       @ GHC.Types.Double
                                                                                                                       Foreign.Storable.$fStorableDouble
                                                                                                                       (GHC.Ptr.Ptr
                                                                                                                          @ (Graphics.Image.Interface.Pixel
                                                                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                                                                               GHC.Types.Double)
                                                                                                                          dt2)
                                                                                                                       (GHC.Types.I#
                                                                                                                          (GHC.Prim.+#
                                                                                                                             (GHC.Prim.*#
                                                                                                                                ipv13
                                                                                                                                ipv12)
                                                                                                                             ipv11))
                                                                                                                       (g (step3,
                                                                                                                           step1)))
                                                                                                                      `cast`
                                                                                                                    (GHC.Types.N:IO[0]
                                                                                                                         <()>_R)
                                                                                                                      s3
                                                                                                                        `cast`
                                                                                                                      (GHC.Prim.State#
                                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                   <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                                     s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv16 ipv14 ->
                                                                                                               case GHC.Prim.touch#
                                                                                                                      @ 'GHC.Types.LiftedRep
                                                                                                                      @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                                      dt3
                                                                                                                      ipv16 of s' { DEFAULT ->
                                                                                                               (go2
                                                                                                                  (GHC.Types.I#
                                                                                                                     (GHC.Prim.+#
                                                                                                                        ipv12
                                                                                                                        1#)))
                                                                                                                 `cast`
                                                                                                               (GHC.ST.N:ST[0]
                                                                                                                    <s>_N
                                                                                                                    <()>_R)
                                                                                                                 s'
                                                                                                                   `cast`
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                                            (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                                              s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                           <s>_N)))_R } } } })
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R)) } }
                                                                                                     } in
                                                                                                     case (go2
                                                                                                             (GHC.Types.I#
                                                                                                                0#))
                                                                                                            `cast`
                                                                                                          (GHC.ST.N:ST[0]
                                                                                                               <s>_N
                                                                                                               <()>_R)
                                                                                                            s2 of ds7 { (#,#) ipv12 ipv13 ->
                                                                                                     case ds4 of init'1 { GHC.Types.I# ipv14 ->
                                                                                                     letrec {
                                                                                                       go3 :: GHC.Types.Int
                                                                                                              -> GHC.ST.ST
                                                                                                                   s
                                                                                                                   ()
                                                                                                         {- Arity: 1 -}
                                                                                                       = \ (step2 :: GHC.Types.Int) ->
                                                                                                         case step2 of step3 { GHC.Types.I# ipv15 ->
                                                                                                         case GHC.Classes.ltInt
                                                                                                                step3
                                                                                                                m of wild14 {
                                                                                                           GHC.Types.False
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               (# s3,
                                                                                                                  GHC.Tuple.() #))
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R))
                                                                                                           GHC.Types.True
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                               case n of n2 { GHC.Types.I# ipv16 ->
                                                                                                               case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                                       @ GHC.Types.Double
                                                                                                                       Foreign.Storable.$fStorableDouble
                                                                                                                       (GHC.Ptr.Ptr
                                                                                                                          @ (Graphics.Image.Interface.Pixel
                                                                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                                                                               GHC.Types.Double)
                                                                                                                          dt2)
                                                                                                                       (GHC.Types.I#
                                                                                                                          (GHC.Prim.+#
                                                                                                                             (GHC.Prim.*#
                                                                                                                                ipv16
                                                                                                                                ipv15)
                                                                                                                             ipv11))
                                                                                                                       (g (step3,
                                                                                                                           step1)))
                                                                                                                      `cast`
                                                                                                                    (GHC.Types.N:IO[0]
                                                                                                                         <()>_R)
                                                                                                                      s3
                                                                                                                        `cast`
                                                                                                                      (GHC.Prim.State#
                                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                   <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                                     s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv22 ipv17 ->
                                                                                                               case GHC.Prim.touch#
                                                                                                                      @ 'GHC.Types.LiftedRep
                                                                                                                      @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                                      dt3
                                                                                                                      ipv22 of s' { DEFAULT ->
                                                                                                               (go3
                                                                                                                  (GHC.Types.I#
                                                                                                                     (GHC.Prim.+#
                                                                                                                        ipv15
                                                                                                                        1#)))
                                                                                                                 `cast`
                                                                                                               (GHC.ST.N:ST[0]
                                                                                                                    <s>_N
                                                                                                                    <()>_R)
                                                                                                                 s'
                                                                                                                   `cast`
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                                            (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                                              s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                           <s>_N)))_R } } } })
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R)) } }
                                                                                                     } in
                                                                                                     case (go3
                                                                                                             init'1)
                                                                                                            `cast`
                                                                                                          (GHC.ST.N:ST[0]
                                                                                                               <s>_N
                                                                                                               <()>_R)
                                                                                                            ipv12 of ds8 { (#,#) ipv15 ipv16 ->
                                                                                                     (go1
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              ipv11
                                                                                                              1#)))
                                                                                                       `cast`
                                                                                                     (GHC.ST.N:ST[0]
                                                                                                          <s>_N
                                                                                                          <()>_R)
                                                                                                       ipv15 } } })
                                                                                                      `cast`
                                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                                              <s>_N
                                                                                                              <()>_R)) } }
                                                                                           } in
                                                                                           case (go1
                                                                                                   (GHC.Types.I#
                                                                                                      0#))
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <s>_N
                                                                                                     <()>_R)
                                                                                                  ipv8
                                                                                                    `cast`
                                                                                                  (GHC.Prim.State#
                                                                                                     (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                             (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                               s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                            <s>_N)))_R of ds7 { (#,#) ipv11 ipv12 ->
                                                                                           case ipv2 of init'1 { GHC.Types.I# ipv13 ->
                                                                                           letrec {
                                                                                             go2 :: GHC.Types.Int
                                                                                                    -> GHC.ST.ST
                                                                                                         s
                                                                                                         ()
                                                                                               {- Arity: 1 -}
                                                                                             = \ (step :: GHC.Types.Int) ->
                                                                                               case step of step1 { GHC.Types.I# ipv14 ->
                                                                                               case GHC.Classes.ltInt
                                                                                                      step1
                                                                                                      ds4 of wild10 {
                                                                                                 GHC.Types.False
                                                                                                 -> (\ (s2 :: GHC.Prim.State#
                                                                                                                s) ->
                                                                                                     (# s2,
                                                                                                        GHC.Tuple.() #))
                                                                                                      `cast`
                                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                                              <s>_N
                                                                                                              <()>_R))
                                                                                                 GHC.Types.True
                                                                                                 -> (\ (s2 :: GHC.Prim.State#
                                                                                                                s) ->
                                                                                                     letrec {
                                                                                                       go3 :: GHC.Types.Int
                                                                                                              -> GHC.ST.ST
                                                                                                                   s
                                                                                                                   ()
                                                                                                         {- Arity: 1 -}
                                                                                                       = \ (step2 :: GHC.Types.Int) ->
                                                                                                         case step2 of step3 { GHC.Types.I# ipv15 ->
                                                                                                         case GHC.Classes.ltInt
                                                                                                                step3
                                                                                                                ipv3 of wild14 {
                                                                                                           GHC.Types.False
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               (# s3,
                                                                                                                  GHC.Tuple.() #))
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R))
                                                                                                           GHC.Types.True
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                               case n of n2 { GHC.Types.I# ipv16 ->
                                                                                                               case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                                       @ GHC.Types.Double
                                                                                                                       Foreign.Storable.$fStorableDouble
                                                                                                                       (GHC.Ptr.Ptr
                                                                                                                          @ (Graphics.Image.Interface.Pixel
                                                                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                                                                               GHC.Types.Double)
                                                                                                                          dt2)
                                                                                                                       (GHC.Types.I#
                                                                                                                          (GHC.Prim.+#
                                                                                                                             (GHC.Prim.*#
                                                                                                                                ipv16
                                                                                                                                ipv14)
                                                                                                                             ipv15))
                                                                                                                       (g (step1,
                                                                                                                           step3)))
                                                                                                                      `cast`
                                                                                                                    (GHC.Types.N:IO[0]
                                                                                                                         <()>_R)
                                                                                                                      s3
                                                                                                                        `cast`
                                                                                                                      (GHC.Prim.State#
                                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                   <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                                     s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv22 ipv17 ->
                                                                                                               case GHC.Prim.touch#
                                                                                                                      @ 'GHC.Types.LiftedRep
                                                                                                                      @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                                      dt3
                                                                                                                      ipv22 of s' { DEFAULT ->
                                                                                                               (go3
                                                                                                                  (GHC.Types.I#
                                                                                                                     (GHC.Prim.+#
                                                                                                                        ipv15
                                                                                                                        1#)))
                                                                                                                 `cast`
                                                                                                               (GHC.ST.N:ST[0]
                                                                                                                    <s>_N
                                                                                                                    <()>_R)
                                                                                                                 s'
                                                                                                                   `cast`
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                                            (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                                              s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                           <s>_N)))_R } } } })
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R)) } }
                                                                                                     } in
                                                                                                     case (go3
                                                                                                             (GHC.Types.I#
                                                                                                                0#))
                                                                                                            `cast`
                                                                                                          (GHC.ST.N:ST[0]
                                                                                                               <s>_N
                                                                                                               <()>_R)
                                                                                                            s2 of ds8 { (#,#) ipv15 ipv16 ->
                                                                                                     case ipv3 of init'2 { GHC.Types.I# ipv17 ->
                                                                                                     letrec {
                                                                                                       go4 :: GHC.Types.Int
                                                                                                              -> GHC.ST.ST
                                                                                                                   s
                                                                                                                   ()
                                                                                                         {- Arity: 1 -}
                                                                                                       = \ (step2 :: GHC.Types.Int) ->
                                                                                                         case step2 of step3 { GHC.Types.I# ipv18 ->
                                                                                                         case GHC.Classes.ltInt
                                                                                                                step3
                                                                                                                ds5 of wild14 {
                                                                                                           GHC.Types.False
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               (# s3,
                                                                                                                  GHC.Tuple.() #))
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R))
                                                                                                           GHC.Types.True
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                               case n of n2 { GHC.Types.I# ipv19 ->
                                                                                                               case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                                       @ GHC.Types.Double
                                                                                                                       Foreign.Storable.$fStorableDouble
                                                                                                                       (GHC.Ptr.Ptr
                                                                                                                          @ (Graphics.Image.Interface.Pixel
                                                                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                                                                               GHC.Types.Double)
                                                                                                                          dt2)
                                                                                                                       (GHC.Types.I#
                                                                                                                          (GHC.Prim.+#
                                                                                                                             (GHC.Prim.*#
                                                                                                                                ipv19
                                                                                                                                ipv14)
                                                                                                                             ipv18))
                                                                                                                       (f (step1,
                                                                                                                           step3)))
                                                                                                                      `cast`
                                                                                                                    (GHC.Types.N:IO[0]
                                                                                                                         <()>_R)
                                                                                                                      s3
                                                                                                                        `cast`
                                                                                                                      (GHC.Prim.State#
                                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                   <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                                     s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv22 ipv20 ->
                                                                                                               case GHC.Prim.touch#
                                                                                                                      @ 'GHC.Types.LiftedRep
                                                                                                                      @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                                      dt3
                                                                                                                      ipv22 of s' { DEFAULT ->
                                                                                                               (go4
                                                                                                                  (GHC.Types.I#
                                                                                                                     (GHC.Prim.+#
                                                                                                                        ipv18
                                                                                                                        1#)))
                                                                                                                 `cast`
                                                                                                               (GHC.ST.N:ST[0]
                                                                                                                    <s>_N
                                                                                                                    <()>_R)
                                                                                                                 s'
                                                                                                                   `cast`
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                                            (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                                              s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                           <s>_N)))_R } } } })
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R)) } }
                                                                                                     } in
                                                                                                     case (go4
                                                                                                             init'2)
                                                                                                            `cast`
                                                                                                          (GHC.ST.N:ST[0]
                                                                                                               <s>_N
                                                                                                               <()>_R)
                                                                                                            ipv15 of ds9 { (#,#) ipv18 ipv19 ->
                                                                                                     case ds5 of init'3 { GHC.Types.I# ipv20 ->
                                                                                                     letrec {
                                                                                                       go5 :: GHC.Types.Int
                                                                                                              -> GHC.ST.ST
                                                                                                                   s
                                                                                                                   ()
                                                                                                         {- Arity: 1 -}
                                                                                                       = \ (step2 :: GHC.Types.Int) ->
                                                                                                         case step2 of step3 { GHC.Types.I# ipv21 ->
                                                                                                         case GHC.Classes.ltInt
                                                                                                                step3
                                                                                                                n of wild14 {
                                                                                                           GHC.Types.False
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               (# s3,
                                                                                                                  GHC.Tuple.() #))
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R))
                                                                                                           GHC.Types.True
                                                                                                           -> (\ (s3 :: GHC.Prim.State#
                                                                                                                          s) ->
                                                                                                               case ipv10 of wild15 { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                                                                                               case n of n2 { GHC.Types.I# ipv22 ->
                                                                                                               case (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                                                                                                                       @ GHC.Types.Double
                                                                                                                       Foreign.Storable.$fStorableDouble
                                                                                                                       (GHC.Ptr.Ptr
                                                                                                                          @ (Graphics.Image.Interface.Pixel
                                                                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                                                                               GHC.Types.Double)
                                                                                                                          dt2)
                                                                                                                       (GHC.Types.I#
                                                                                                                          (GHC.Prim.+#
                                                                                                                             (GHC.Prim.*#
                                                                                                                                ipv22
                                                                                                                                ipv14)
                                                                                                                             ipv21))
                                                                                                                       (g (step1,
                                                                                                                           step3)))
                                                                                                                      `cast`
                                                                                                                    (GHC.Types.N:IO[0]
                                                                                                                         <()>_R)
                                                                                                                      s3
                                                                                                                        `cast`
                                                                                                                      (GHC.Prim.State#
                                                                                                                         (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                   <s>_N) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                (UnsafeCo nominal (GHC.ST.ST
                                                                                                                                                                     s) GHC.Types.IO))_N ; Control.Monad.Primitive.D:R:PrimStateIO[0])))_R of ds1 { (#,#) ipv29 ipv23 ->
                                                                                                               case GHC.Prim.touch#
                                                                                                                      @ 'GHC.Types.LiftedRep
                                                                                                                      @ GHC.ForeignPtr.ForeignPtrContents
                                                                                                                      dt3
                                                                                                                      ipv29 of s' { DEFAULT ->
                                                                                                               (go5
                                                                                                                  (GHC.Types.I#
                                                                                                                     (GHC.Prim.+#
                                                                                                                        ipv21
                                                                                                                        1#)))
                                                                                                                 `cast`
                                                                                                               (GHC.ST.N:ST[0]
                                                                                                                    <s>_N
                                                                                                                    <()>_R)
                                                                                                                 s'
                                                                                                                   `cast`
                                                                                                                 (GHC.Prim.State#
                                                                                                                    (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; ((Control.Monad.Primitive.PrimState
                                                                                                                                                                            (UnsafeCo nominal GHC.Types.IO (GHC.ST.ST
                                                                                                                                                                                                              s)))_N ; Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                                                                                           <s>_N)))_R } } } })
                                                                                                                `cast`
                                                                                                              (Sym (GHC.ST.N:ST[0]
                                                                                                                        <s>_N
                                                                                                                        <()>_R)) } }
                                                                                                     } in
                                                                                                     case (go5
                                                                                                             init'3)
                                                                                                            `cast`
                                                                                                          (GHC.ST.N:ST[0]
                                                                                                               <s>_N
                                                                                                               <()>_R)
                                                                                                            ipv18 of ds10 { (#,#) ipv21 ipv22 ->
                                                                                                     (go2
                                                                                                        (GHC.Types.I#
                                                                                                           (GHC.Prim.+#
                                                                                                              ipv14
                                                                                                              1#)))
                                                                                                       `cast`
                                                                                                     (GHC.ST.N:ST[0]
                                                                                                          <s>_N
                                                                                                          <()>_R)
                                                                                                       ipv21 } } } } })
                                                                                                      `cast`
                                                                                                    (Sym (GHC.ST.N:ST[0]
                                                                                                              <s>_N
                                                                                                              <()>_R)) } }
                                                                                           } in
                                                                                           case (go2
                                                                                                   init'1)
                                                                                                  `cast`
                                                                                                (GHC.ST.N:ST[0]
                                                                                                     <s>_N
                                                                                                     <()>_R)
                                                                                                  ipv11 of ds8 { (#,#) ipv14 ipv15 ->
                                                                                           (# ipv14,
                                                                                              ipv10
                                                                                                `cast`
                                                                                              (Sub (Sym (Data.Vector.Storable.D:R:MutableVector[0])) (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                                                                                                          <s>_N) <Graphics.Image.Interface.Pixel
                                                                                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                    GHC.Types.Double>_N) #) } } } }
                                                                                        1#
                                                                                        -> case GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
                                                                                           ret_ty (# GHC.Prim.State#
                                                                                                       s,
                                                                                                     Data.Vector.Generic.Base.Mutable
                                                                                                       Data.Vector.Storable.Vector
                                                                                                       s
                                                                                                       (Graphics.Image.Interface.Pixel
                                                                                                          Graphics.Image.ColorSpace.Y.Y
                                                                                                          GHC.Types.Double) #)
                                                                                           of {} } }
                                                                                   GHC.Types.True
                                                                                   -> case GHC.Err.error
                                                                                             @ 'GHC.Types.LiftedRep
                                                                                             @ (GHC.ST.ST
                                                                                                  s
                                                                                                  (Data.Vector.Storable.Mutable.MVector
                                                                                                     (Control.Monad.Primitive.PrimState
                                                                                                        (GHC.ST.ST
                                                                                                           s))
                                                                                                     (Graphics.Image.Interface.Pixel
                                                                                                        Graphics.Image.ColorSpace.Y.Y
                                                                                                        GHC.Types.Double)))
                                                                                             (GHC.Stack.Types.PushCallStack
                                                                                                (GHC.Base.build
                                                                                                   @ GHC.Types.Char
                                                                                                   (\ @ b ->
                                                                                                    GHC.CString.unpackFoldrCString#
                                                                                                      @ b
                                                                                                      "error"#))
                                                                                                (GHC.Stack.Types.SrcLoc
                                                                                                   (GHC.Base.build
                                                                                                      @ GHC.Types.Char
                                                                                                      (\ @ b ->
                                                                                                       GHC.CString.unpackFoldrCString#
                                                                                                         @ b
                                                                                                         "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                                                                   (GHC.Base.build
                                                                                                      @ GHC.Types.Char
                                                                                                      (\ @ b ->
                                                                                                       GHC.CString.unpackFoldrCString#
                                                                                                         @ b
                                                                                                         "Data.Vector.Storable.Mutable"#))
                                                                                                   (GHC.Base.build
                                                                                                      @ GHC.Types.Char
                                                                                                      (\ @ b ->
                                                                                                       GHC.CString.unpackFoldrCString#
                                                                                                         @ b
                                                                                                         "./Data/Vector/Storable/Mutable.hs"#))
                                                                                                   (GHC.Types.I#
                                                                                                      126#)
                                                                                                   (GHC.Types.I#
                                                                                                      16#)
                                                                                                   (GHC.Types.I#
                                                                                                      126#)
                                                                                                   (GHC.Types.I#
                                                                                                      79#))
                                                                                                GHC.Stack.Types.EmptyCallStack)
                                                                                               `cast`
                                                                                             (Sym (GHC.Classes.N:IP[0]
                                                                                                       <"callStack">_N
                                                                                                       <GHC.Stack.Types.CallStack>_N))
                                                                                             (GHC.Base.augment
                                                                                                @ GHC.Types.Char
                                                                                                (\ @ b
                                                                                                   (c :: GHC.Types.Char
                                                                                                         -> b
                                                                                                         -> b)[OneShot]
                                                                                                   (n2 :: b)[OneShot] ->
                                                                                                 GHC.CString.unpackFoldrCString#
                                                                                                   @ b
                                                                                                   "Storable.basicUnsafeNew: length too large: "#
                                                                                                   c
                                                                                                   n2)
                                                                                                (GHC.Show.showSignedInt
                                                                                                   GHC.Show.$fShow(,)1
                                                                                                   n1
                                                                                                   (GHC.Types.[]
                                                                                                      @ GHC.Types.Char)))
                                                                                      ret_ty (# GHC.Prim.State#
                                                                                                  s,
                                                                                                Data.Vector.Generic.Base.Mutable
                                                                                                  Data.Vector.Storable.Vector
                                                                                                  s
                                                                                                  (Graphics.Image.Interface.Pixel
                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                     GHC.Types.Double) #)
                                                                                      of {} }
                                                                              GHC.Types.True
                                                                              -> case GHC.Err.error
                                                                                        @ 'GHC.Types.LiftedRep
                                                                                        @ (GHC.ST.ST
                                                                                             s
                                                                                             (Data.Vector.Storable.Mutable.MVector
                                                                                                (Control.Monad.Primitive.PrimState
                                                                                                   (GHC.ST.ST
                                                                                                      s))
                                                                                                (Graphics.Image.Interface.Pixel
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)))
                                                                                        (GHC.Stack.Types.PushCallStack
                                                                                           (GHC.Base.build
                                                                                              @ GHC.Types.Char
                                                                                              (\ @ b ->
                                                                                               GHC.CString.unpackFoldrCString#
                                                                                                 @ b
                                                                                                 "error"#))
                                                                                           (GHC.Stack.Types.SrcLoc
                                                                                              (GHC.Base.build
                                                                                                 @ GHC.Types.Char
                                                                                                 (\ @ b ->
                                                                                                  GHC.CString.unpackFoldrCString#
                                                                                                    @ b
                                                                                                    "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                                                              (GHC.Base.build
                                                                                                 @ GHC.Types.Char
                                                                                                 (\ @ b ->
                                                                                                  GHC.CString.unpackFoldrCString#
                                                                                                    @ b
                                                                                                    "Data.Vector.Storable.Mutable"#))
                                                                                              (GHC.Base.build
                                                                                                 @ GHC.Types.Char
                                                                                                 (\ @ b ->
                                                                                                  GHC.CString.unpackFoldrCString#
                                                                                                    @ b
                                                                                                    "./Data/Vector/Storable/Mutable.hs"#))
                                                                                              (GHC.Types.I#
                                                                                                 125#)
                                                                                              (GHC.Types.I#
                                                                                                 15#)
                                                                                              (GHC.Types.I#
                                                                                                 125#)
                                                                                              (GHC.Types.I#
                                                                                                 77#))
                                                                                           GHC.Stack.Types.EmptyCallStack)
                                                                                          `cast`
                                                                                        (Sym (GHC.Classes.N:IP[0]
                                                                                                  <"callStack">_N
                                                                                                  <GHC.Stack.Types.CallStack>_N))
                                                                                        (GHC.Base.augment
                                                                                           @ GHC.Types.Char
                                                                                           (\ @ b
                                                                                              (c :: GHC.Types.Char
                                                                                                    -> b
                                                                                                    -> b)[OneShot]
                                                                                              (n2 :: b)[OneShot] ->
                                                                                            GHC.CString.unpackFoldrCString#
                                                                                              @ b
                                                                                              "Storable.basicUnsafeNew: negative length: "#
                                                                                              c
                                                                                              n2)
                                                                                           (GHC.Show.showSignedInt
                                                                                              GHC.Show.$fShow(,)1
                                                                                              n1
                                                                                              (GHC.Types.[]
                                                                                                 @ GHC.Types.Char)))
                                                                                 ret_ty (# GHC.Prim.State#
                                                                                             s,
                                                                                           Data.Vector.Generic.Base.Mutable
                                                                                             Data.Vector.Storable.Vector
                                                                                             s
                                                                                             (Graphics.Image.Interface.Pixel
                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                GHC.Types.Double) #)
                                                                                 of {} }
                                                                         GHC.Types.True -> $j2 }
                                                                    GHC.Types.True -> $j2 }
                                                               GHC.Types.True -> $j2 }
                                                          GHC.Types.True -> $j2 }
                                                     GHC.Types.True -> $j2 }
                                                GHC.Types.True -> $j2 })
                                               `cast`
                                             (forall (s :: <*>_N).
                                              Sym (GHC.ST.N:ST[0]
                                                       <s>_N
                                                       <Data.Vector.Generic.Base.Mutable
                                                          Data.Vector.Storable.Vector
                                                          s
                                                          (Graphics.Image.Interface.Pixel
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double)>_R)) -}
                             = generate
                                 `cast`
                               (forall (s :: <*>_N).
                                Sym (GHC.ST.N:ST[0]
                                         <s>_N
                                         <Data.Vector.Generic.Base.Mutable
                                            Data.Vector.Storable.Vector
                                            s
                                            (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R))
                           } in
                           (Graphics.Image.Interface.Vector.Generic.$WVGImage
                              @ Data.Vector.Storable.Vector
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              m
                              n
                              (Data.Vector.Generic.new
                                 @ Data.Vector.Storable.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                 (Data.Vector.Generic.New.New
                                    @ Data.Vector.Storable.Vector
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    generate1)))
                             `cast`
                           (Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                     <Graphics.Image.ColorSpace.Y.Y>_N
                                     <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) }
                        GHC.Types.True -> $j1 }
                   GHC.Types.True -> $j1 } } } }) -}
3a5fb48cebb9d02d725493c976c4c034
  $s$fArrayVScse_$s$fArrayVScse_$cmap ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Vector.Storable.VS cs' e' =>
    (Graphics.Image.Interface.Pixel cs' e'
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs' e'
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 3,
     Strictness: <S(S(LLLC(S(S))LLLL)LLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(A,A,A,1*C1(U(U)),A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(U(U))><S(LLS),1*U(U,U,U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ cs'
                   @ e'
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Vector.Storable.VS cs' e') ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs' e')
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs'
                       @ e'
                       $dArray
                 } in
                 (\ (f :: Graphics.Image.Interface.Pixel cs' e'
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS cs' e') ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs'>_N <e'>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                         <cs'>_N
                                                                                                         <e'>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                  Graphics.Image.Interface.Vector.Generic.$WVGImage
                    @ Data.Vector.Storable.Vector
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (GHC.Types.I# dt1)
                    (GHC.Types.I# dt2)
                    (Data.Vector.Generic.new
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       Lib.$s$fArrayVScse_$s$fVectorVectora
                       (Data.Vector.Generic.New.unstream
                          @ Data.Vector.Storable.Vector
                          @ (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          Lib.$s$fArrayVScse_$s$fVectorVectora
                          (Data.Vector.Fusion.Bundle.inplace
                             @ (Graphics.Image.Interface.Pixel cs' e')
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             @ Data.Vector.Storable.Vector
                             (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                              Data.Vector.Fusion.Stream.Monadic.map
                                @ m
                                @ (Graphics.Image.Interface.Pixel cs' e')
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                $dMonad
                                f)
                             (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                             (Data.Vector.Generic.stream
                                @ Data.Vector.Storable.Vector
                                @ (Graphics.Image.Interface.Pixel cs' e')
                                $dVector1
                                  `cast`
                                (Data.Vector.Generic.Base.Vector
                                   (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                   <Graphics.Image.Interface.Pixel cs' e'>_N)_R
                                v1)))) })
                   `cast`
                 (<Graphics.Image.Interface.Pixel cs' e'
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS cs' e'>_R
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
f75ac31beb511752692907795db9d711
  $s$fArrayVScse_$s$fArrayVScse_$ctoVector ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Vector
         Graphics.Image.Interface.Vector.Storable.VS
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,U(U,U,U))>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 v1 })
                  `cast`
                (<Graphics.Image.Interface.Image
                    Graphics.Image.Interface.Vector.Storable.VS
                    Graphics.Image.ColorSpace.Y.Y
                    GHC.Types.Double>_R
                 ->_R Sub (Sym (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])) <Graphics.Image.Interface.Pixel
                                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                                              GHC.Types.Double>_N) -}
16c6b3e05c37f67177dcc0ad0722108d
  $s$fArrayVScse_$s$fArrayVScse_$ctranspose ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 1, Strictness: <S(SSS(LSL)),1*U(U,U,U(A,U,U))>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 let {
                   m :: GHC.Types.Int = GHC.Types.I# dt1
                 } in
                 case (Data.Vector.Fusion.Bundle.Monadic.length
                         @ Data.Vector.Fusion.Util.Id
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         Data.Vector.Fusion.Util.$fMonadId
                         (Data.Vector.Fusion.Bundle.Monadic.fromVector
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Storable.Vector
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            Data.Vector.Fusion.Util.$fMonadId
                            Lib.$s$fArrayVScse_$s$fVectorVectora
                            v1))
                        `cast`
                      (Data.Vector.Fusion.Util.N:Id[0]
                           <GHC.Types.Int>_R) of v3 { GHC.Types.I# ipv ->
                 Graphics.Image.Interface.Vector.Generic.$WVGImage
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (GHC.Types.I# dt2)
                   m
                   (Data.Vector.Generic.new
                      @ Data.Vector.Storable.Vector
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      Lib.$s$fArrayVScse_$s$fVectorVectora
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         Lib.$s$fArrayVScse_$s$fVectorVectora
                         (Data.Vector.Fusion.Bundle.Monadic.unbox
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Vector.Storable.Vector
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            Data.Vector.Fusion.Util.$fMonadId
                            (Data.Vector.Fusion.Bundle.Monadic.mapM
                               @ Data.Vector.Fusion.Util.Id
                               @ GHC.Types.Int
                               @ (Data.Vector.Fusion.Util.Box
                                    (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                               @ Data.Vector.Storable.Vector
                               Data.Vector.Fusion.Util.$fMonadId
                               (\ (x :: GHC.Types.Int) ->
                                case v1 of wild1 { Data.Vector.Storable.Vector dt3 dt4 dt5 ->
                                Data.Vector.Fusion.Util.Box
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  (case Graphics.Image.ColorSpace.Y.$fStorablePixel3
                                          @ GHC.Types.Double
                                          Foreign.Storable.$fStorableDouble
                                          (GHC.Ptr.Ptr
                                             @ (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                             dt4)
                                          x
                                          GHC.Prim.realWorld# of ds1 { (#,#) ipv1 ipv2 ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.LiftedRep
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          dt5
                                          ipv1 of s' { DEFAULT ->
                                   ipv2 } }) })
                                 `cast`
                               (<GHC.Types.Int>_R
                                ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                              <Data.Vector.Fusion.Util.Box
                                                 (Graphics.Image.Interface.Pixel
                                                    Graphics.Image.ColorSpace.Y.Y
                                                    GHC.Types.Double)>_R))
                               (Data.Vector.Fusion.Bundle.Monadic.generateM
                                  @ Data.Vector.Fusion.Util.Id
                                  @ GHC.Types.Int
                                  @ Data.Vector.Storable.Vector
                                  Data.Vector.Fusion.Util.$fMonadId
                                  (GHC.Types.I# (GHC.Prim.*# dt1 dt2))
                                  (\ (x :: GHC.Types.Int) ->
                                   case x of k1 { GHC.Types.I# ipv1 ->
                                   case GHC.Real.$fIntegralInt_$cdivMod k1 m of wild1 { (,) i j ->
                                   case j of wild2 { GHC.Types.I# y ->
                                   case i of wild3 { GHC.Types.I# y1 ->
                                   GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# dt2 y) y1) } } } })
                                    `cast`
                                  (<GHC.Types.Int>_R
                                   ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                 <GHC.Types.Int>_R))))))) } })
                  `cast`
                (<Graphics.Image.Interface.Image
                    Graphics.Image.Interface.Vector.Storable.VS
                    Graphics.Image.ColorSpace.Y.Y
                    GHC.Types.Double>_R
                 ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                               <Graphics.Image.ColorSpace.Y.Y>_N
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) -}
1df100aeb6bc7a351860ba2bfbd40f8d
  $s$fArrayVScse_$s$fArrayVScse_$ctraverse ::
    Graphics.Image.Interface.Array
      Graphics.Image.Interface.Vector.Storable.VS cs' e' =>
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS cs' e'
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int))
    -> (((GHC.Types.Int, GHC.Types.Int)
         -> Graphics.Image.Interface.Pixel cs' e')
        -> (GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 4,
     Strictness: <L,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LLS),1*U(U,U,U)><C(S(S(S)S(S))),1*C1(U(1*U(U),1*U(U)))><L,1*C1(C(U(U)))>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ cs'
                   @ e'
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Vector.Storable.VS cs' e') ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs' e')
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs'
                       @ e'
                       $dArray
                 } in
                 (\ (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS cs' e')
                    (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> (GHC.Types.Int, GHC.Types.Int))
                    (g :: ((GHC.Types.Int, GHC.Types.Int)
                           -> Graphics.Image.Interface.Pixel cs' e')
                          -> (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs'>_N <e'>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                         <cs'>_N
                                                                                                         <e'>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                  let {
                    m :: GHC.Types.Int = GHC.Types.I# dt1
                  } in
                  let {
                    n :: GHC.Types.Int = GHC.Types.I# dt2
                  } in
                  let {
                    f1 :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                    = g (Graphics.Image.Interface.Vector.Generic.indexV
                           @ Data.Vector.Storable.Vector
                           @ (Graphics.Image.Interface.Pixel cs' e')
                           $dVector1
                             `cast`
                           (Data.Vector.Generic.Base.Vector
                              (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                              <Graphics.Image.Interface.Pixel cs' e'>_N)_R
                           (m, n)
                           v1)
                  } in
                  case f (m, n) of sz { (,) ipv ipv1 ->
                  let {
                    $j1 :: Graphics.Image.Interface.Vector.Generic.VGImage
                             Data.Vector.Storable.Vector
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 0>
                    = case GHC.Err.error
                             @ 'GHC.Types.LiftedRep
                             @ (GHC.Types.Int, GHC.Types.Int)
                             Graphics.Image.Interface.checkDims1
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n1 :: b)[OneShot] ->
                                 GHC.Base.foldr
                                   @ GHC.Types.Char
                                   @ b
                                   c
                                   n1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Show.showLitString
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1
                                               (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                               (n2 :: b1)[OneShot] ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b1
                                               "Graphics.Image.Interface.Vector.Generic.makeImageVGM"#
                                               c1
                                               n2))
                                         GHC.Show.$fShow[]1)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n1 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      ": dimensions are expected to be positive: "#
                                      c
                                      n1)
                                   (GHC.Show.$fShow(,)_$cshowsPrec
                                      @ GHC.Types.Int
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShow(,)1
                                      sz
                                      (GHC.Types.[] @ GHC.Types.Char))))
                      ret_ty (Graphics.Image.Interface.Vector.Generic.VGImage
                                Data.Vector.Storable.Vector
                                (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      of {}
                  } in
                  case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild1 {
                    GHC.Types.False
                    -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild2 {
                         GHC.Types.False
                         -> case ipv of wild4 { GHC.Types.I# x ->
                            case ipv1 of wild5 { GHC.Types.I# y ->
                            Graphics.Image.Interface.Vector.Generic.$WVGImage
                              @ Data.Vector.Storable.Vector
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              wild4
                              wild5
                              (Data.Vector.Generic.new
                                 @ Data.Vector.Storable.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Storable.Vector
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                    (Data.Vector.Fusion.Bundle.Monadic.generateM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       @ Data.Vector.Storable.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (GHC.Types.I# (GHC.Prim.*# x y))
                                       (\ (x1 :: GHC.Types.Int) ->
                                        f1
                                          (case x1 of k1 { GHC.Types.I# ipv2 ->
                                           GHC.Real.$fIntegralInt_$cdivMod k1 wild5 }))
                                         `cast`
                                       (<GHC.Types.Int>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                      <Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double>_R))))) } }
                         GHC.Types.True -> $j1 }
                    GHC.Types.True -> $j1 } } })
                   `cast`
                 (<Graphics.Image.Interface.Image
                     Graphics.Image.Interface.Vector.Storable.VS cs' e'>_R
                  ->_R <(GHC.Types.Int, GHC.Types.Int)
                        -> (GHC.Types.Int, GHC.Types.Int)>_R
                  ->_R <((GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel cs' e')
                        -> (GHC.Types.Int, GHC.Types.Int)
                        -> Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
6bdb1cc51b6f6b9a2bb9e88d87c9051b
  $s$fArrayVScse_$s$fArrayVScse_$ctraverse2 ::
    (Graphics.Image.Interface.Array
       Graphics.Image.Interface.Vector.Storable.VS cs1 e1,
     Graphics.Image.Interface.Array
       Graphics.Image.Interface.Vector.Storable.VS cs2 e2) =>
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS cs1 e1
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs2 e2
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int)
        -> (GHC.Types.Int, GHC.Types.Int))
    -> (((GHC.Types.Int, GHC.Types.Int)
         -> Graphics.Image.Interface.Pixel cs1 e1)
        -> ((GHC.Types.Int, GHC.Types.Int)
            -> Graphics.Image.Interface.Pixel cs2 e2)
        -> (GHC.Types.Int, GHC.Types.Int)
        -> Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 6,
     Strictness: <L,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(1*U(A,A,A,A,A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)><C(C(S(S(S)S(S)))),1*C1(C1(U(1*U(U),1*U(U))))><L,1*C1(C1(C(U(U))))>m,
     Inline: (sat-args=4),
     Unfolding: InlineRule (4, False, False)
                (\ @ cs1
                   @ e1
                   @ cs2
                   @ e2
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Vector.Storable.VS cs1 e1)
                   ($dArray1 :: Graphics.Image.Interface.Array
                                  Graphics.Image.Interface.Vector.Storable.VS cs2 e2) ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs2 e2)
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs2
                       @ e2
                       $dArray1
                 } in
                 let {
                   $dVector2 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs1 e1)
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs1
                       @ e1
                       $dArray
                 } in
                 (\ (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS cs1 e1)
                    (ds1 :: Graphics.Image.Interface.Image
                              Graphics.Image.Interface.Vector.Storable.VS cs2 e2)
                    (f :: (GHC.Types.Int, GHC.Types.Int)
                          -> (GHC.Types.Int, GHC.Types.Int)
                          -> (GHC.Types.Int, GHC.Types.Int))
                    (g :: ((GHC.Types.Int, GHC.Types.Int)
                           -> Graphics.Image.Interface.Pixel cs1 e1)
                          -> ((GHC.Types.Int, GHC.Types.Int)
                              -> Graphics.Image.Interface.Pixel cs2 e2)
                          -> (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs1>_N <e1>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                         <cs1>_N
                                                                                                         <e1>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                  let {
                    m1 :: GHC.Types.Int = GHC.Types.I# dt1
                  } in
                  let {
                    n1 :: GHC.Types.Int = GHC.Types.I# dt2
                  } in
                  case ds1
                         `cast`
                       (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                         <cs2>_N
                                                                                                         <e2>_N) of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                  let {
                    m2 :: GHC.Types.Int = GHC.Types.I# dt3
                  } in
                  let {
                    n2 :: GHC.Types.Int = GHC.Types.I# dt4
                  } in
                  let {
                    f1 :: (GHC.Types.Int, GHC.Types.Int)
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                    = g (Graphics.Image.Interface.Vector.Generic.indexV
                           @ Data.Vector.Storable.Vector
                           @ (Graphics.Image.Interface.Pixel cs1 e1)
                           $dVector2
                             `cast`
                           (Data.Vector.Generic.Base.Vector
                              (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                              <Graphics.Image.Interface.Pixel cs1 e1>_N)_R
                           (m1, n1)
                           v1)
                        (Graphics.Image.Interface.Vector.Generic.indexV
                           @ Data.Vector.Storable.Vector
                           @ (Graphics.Image.Interface.Pixel cs2 e2)
                           $dVector1
                             `cast`
                           (Data.Vector.Generic.Base.Vector
                              (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                              <Graphics.Image.Interface.Pixel cs2 e2>_N)_R
                           (m2, n2)
                           v2)
                  } in
                  case f (m1, n1) (m2, n2) of sz { (,) ipv ipv1 ->
                  let {
                    $j1 :: Graphics.Image.Interface.Vector.Generic.VGImage
                             Data.Vector.Storable.Vector
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 0>
                    = case GHC.Err.error
                             @ 'GHC.Types.LiftedRep
                             @ (GHC.Types.Int, GHC.Types.Int)
                             Graphics.Image.Interface.checkDims1
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             (GHC.Base.augment
                                @ GHC.Types.Char
                                (\ @ b
                                   (c :: GHC.Types.Char -> b -> b)[OneShot]
                                   (n4 :: b)[OneShot] ->
                                 GHC.Base.foldr
                                   @ GHC.Types.Char
                                   @ b
                                   c
                                   n4
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)3
                                      (GHC.Show.showLitString
                                         (GHC.Base.build
                                            @ GHC.Types.Char
                                            (\ @ b1
                                               (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                               (n :: b1)[OneShot] ->
                                             GHC.CString.unpackFoldrCString#
                                               @ b1
                                               "Graphics.Image.Interface.Vector.Generic.makeImageVGM"#
                                               c1
                                               n))
                                         GHC.Show.$fShow[]1)))
                                (GHC.Base.augment
                                   @ GHC.Types.Char
                                   (\ @ b
                                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                                      (n4 :: b)[OneShot] ->
                                    GHC.CString.unpackFoldrCString#
                                      @ b
                                      ": dimensions are expected to be positive: "#
                                      c
                                      n4)
                                   (GHC.Show.$fShow(,)_$cshowsPrec
                                      @ GHC.Types.Int
                                      @ GHC.Types.Int
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShowInt
                                      GHC.Show.$fShow(,)1
                                      sz
                                      (GHC.Types.[] @ GHC.Types.Char))))
                      ret_ty (Graphics.Image.Interface.Vector.Generic.VGImage
                                Data.Vector.Storable.Vector
                                (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      of {}
                  } in
                  case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild2 {
                    GHC.Types.False
                    -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild3 {
                         GHC.Types.False
                         -> case ipv of wild4 { GHC.Types.I# x ->
                            case ipv1 of wild5 { GHC.Types.I# y ->
                            Graphics.Image.Interface.Vector.Generic.$WVGImage
                              @ Data.Vector.Storable.Vector
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              wild4
                              wild5
                              (Data.Vector.Generic.new
                                 @ Data.Vector.Storable.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Storable.Vector
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                    (Data.Vector.Fusion.Bundle.Monadic.generateM
                                       @ Data.Vector.Fusion.Util.Id
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       @ Data.Vector.Storable.Vector
                                       Data.Vector.Fusion.Util.$fMonadId
                                       (GHC.Types.I# (GHC.Prim.*# x y))
                                       (\ (x1 :: GHC.Types.Int) ->
                                        f1
                                          (case x1 of k1 { GHC.Types.I# ipv2 ->
                                           GHC.Real.$fIntegralInt_$cdivMod k1 wild5 }))
                                         `cast`
                                       (<GHC.Types.Int>_R
                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                      <Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double>_R))))) } }
                         GHC.Types.True -> $j1 }
                    GHC.Types.True -> $j1 } } } })
                   `cast`
                 (<Graphics.Image.Interface.Image
                     Graphics.Image.Interface.Vector.Storable.VS cs1 e1>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS cs2 e2>_R
                  ->_R <(GHC.Types.Int, GHC.Types.Int)
                        -> (GHC.Types.Int, GHC.Types.Int)
                        -> (GHC.Types.Int, GHC.Types.Int)>_R
                  ->_R <((GHC.Types.Int, GHC.Types.Int)
                         -> Graphics.Image.Interface.Pixel cs1 e1)
                        -> ((GHC.Types.Int, GHC.Types.Int)
                            -> Graphics.Image.Interface.Pixel cs2 e2)
                        -> (GHC.Types.Int, GHC.Types.Int)
                        -> Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
868c51549dfd88cb11e5d2b8c17067ab
  $s$fArrayVScse_$s$fArrayVScse_$czipWith ::
    (Graphics.Image.Interface.Array
       Graphics.Image.Interface.Vector.Storable.VS cs1 e1,
     Graphics.Image.Interface.Array
       Graphics.Image.Interface.Vector.Storable.VS cs2 e2) =>
    (Graphics.Image.Interface.Pixel cs1 e1
     -> Graphics.Image.Interface.Pixel cs2 e2
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs1 e1
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs2 e2
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 5,
     Strictness: <L,1*U(1*U(A,A,A,1*C1(U(U)),A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(1*U(A,A,A,1*C1(U(U)),A,C(C1(C1(U))),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C(U(U)))><S(SLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ cs1
                   @ e1
                   @ cs2
                   @ e2
                   ($dArray :: Graphics.Image.Interface.Array
                                 Graphics.Image.Interface.Vector.Storable.VS cs1 e1)
                   ($dArray1 :: Graphics.Image.Interface.Array
                                  Graphics.Image.Interface.Vector.Storable.VS cs2 e2) ->
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs2 e2)
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs2
                       @ e2
                       $dArray1
                 } in
                 let {
                   $dVector2 :: Data.Vector.Generic.Base.Vector
                                  (Graphics.Image.Interface.Vector
                                     Graphics.Image.Interface.Vector.Storable.VS)
                                  (Graphics.Image.Interface.Pixel cs1 e1)
                   = Graphics.Image.Interface.$p1Array
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs1
                       @ e1
                       $dArray
                 } in
                 (\ (f :: Graphics.Image.Interface.Pixel cs1 e1
                          -> Graphics.Image.Interface.Pixel cs2 e2
                          -> Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    (ds :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS cs1 e1)
                    (ds1 :: Graphics.Image.Interface.Image
                              Graphics.Image.Interface.Vector.Storable.VS cs2 e2) ->
                  case ds
                         `cast`
                       (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs1>_N <e1>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                         <cs1>_N
                                                                                                         <e1>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                  let {
                    ds2 :: GHC.Types.Int = GHC.Types.I# dt1
                  } in
                  let {
                    ds3 :: GHC.Types.Int = GHC.Types.I# dt2
                  } in
                  let {
                    fail :: GHC.Prim.Void#
                            -> Graphics.Image.Interface.Vector.Generic.VGImage
                                 Data.Vector.Storable.Vector
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      <join 1> {- Arity: 1 -}
                    = \ (ds4 :: GHC.Prim.Void#)[OneShot] ->
                      case ds1
                             `cast`
                           (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                             <cs2>_N
                                                                                                             <e2>_N) of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                      let {
                        ds5 :: GHC.Types.Int = GHC.Types.I# dt3
                      } in
                      let {
                        ds6 :: GHC.Types.Int = GHC.Types.I# dt4
                      } in
                      let {
                        fail1 :: GHC.Prim.Void#
                                 -> Graphics.Image.Interface.Vector.Generic.VGImage
                                      Data.Vector.Storable.Vector
                                      (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          <join 1> {- Arity: 1 -}
                        = \ (ds7 :: GHC.Prim.Void#)[OneShot] ->
                          let {
                            $j1 :: Graphics.Image.Interface.Vector.Generic.VGImage
                                     Data.Vector.Storable.Vector
                                     (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              <join 0>
                            = Graphics.Image.Interface.Vector.Generic.$WVGImage
                                @ Data.Vector.Storable.Vector
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                ds2
                                ds3
                                (Data.Vector.Generic.new
                                   @ Data.Vector.Storable.Vector
                                   @ (Graphics.Image.Interface.Pixel
                                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                   Lib.$s$fArrayVScse_$s$fVectorVectora
                                   (Data.Vector.Generic.New.unstream
                                      @ Data.Vector.Storable.Vector
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      Lib.$s$fArrayVScse_$s$fVectorVectora
                                      (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                         @ Data.Vector.Fusion.Util.Id
                                         @ (Graphics.Image.Interface.Pixel cs1 e1)
                                         @ (Graphics.Image.Interface.Pixel cs2 e2)
                                         @ (Graphics.Image.Interface.Pixel
                                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                         @ Data.Vector.Storable.Vector
                                         Data.Vector.Fusion.Util.$fMonadId
                                         (\ (a1 :: Graphics.Image.Interface.Pixel cs1 e1)
                                            (b1 :: Graphics.Image.Interface.Pixel
                                                     cs2 e2)[OneShot] ->
                                          f a1 b1)
                                           `cast`
                                         (<Graphics.Image.Interface.Pixel cs1 e1>_R
                                          ->_R <Graphics.Image.Interface.Pixel cs2 e2>_R
                                          ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                        <Graphics.Image.Interface.Pixel
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double>_R))
                                         (Data.Vector.Generic.stream
                                            @ Data.Vector.Storable.Vector
                                            @ (Graphics.Image.Interface.Pixel cs1 e1)
                                            $dVector2
                                              `cast`
                                            (Data.Vector.Generic.Base.Vector
                                               (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                               <Graphics.Image.Interface.Pixel cs1 e1>_N)_R
                                            v1)
                                         (Data.Vector.Generic.stream
                                            @ Data.Vector.Storable.Vector
                                            @ (Graphics.Image.Interface.Pixel cs2 e2)
                                            $dVector1
                                              `cast`
                                            (Data.Vector.Generic.Base.Vector
                                               (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                               <Graphics.Image.Interface.Pixel cs2 e2>_N)_R
                                            v2))))
                          } in
                          case GHC.Classes.eqInt ds2 ds5 of wild2 {
                            GHC.Types.False
                            -> case GHC.Classes.eqInt ds3 ds6 of wild3 {
                                 GHC.Types.False
                                 -> let {
                                      $j2 :: GHC.Prim.Int#
                                             -> GHC.Types.Int
                                             -> Graphics.Image.Interface.Vector.Generic.VGImage
                                                  Data.Vector.Storable.Vector
                                                  (Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                        <join 2> {- Arity: 2 -}
                                      = \ (x :: GHC.Prim.Int#)[OneShot]
                                          (wild4 :: GHC.Types.Int)[OneShot] ->
                                        let {
                                          $j3 :: GHC.Prim.Int#
                                                 -> GHC.Types.Int
                                                 -> Graphics.Image.Interface.Vector.Generic.VGImage
                                                      Data.Vector.Storable.Vector
                                                      (Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double)
                                            <join 2> {- Arity: 2 -}
                                          = \ (y :: GHC.Prim.Int#)[OneShot]
                                              (wild5 :: GHC.Types.Int)[OneShot] ->
                                            Graphics.Image.Interface.Vector.Generic.$WVGImage
                                              @ Data.Vector.Storable.Vector
                                              @ (Graphics.Image.Interface.Pixel
                                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                              wild4
                                              wild5
                                              (Data.Vector.Generic.new
                                                 @ Data.Vector.Storable.Vector
                                                 @ (Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y
                                                      GHC.Types.Double)
                                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                                 (Data.Vector.Generic.New.unstream
                                                    @ Data.Vector.Storable.Vector
                                                    @ (Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double)
                                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                                    (Data.Vector.Fusion.Bundle.Monadic.generateM
                                                       @ Data.Vector.Fusion.Util.Id
                                                       @ (Graphics.Image.Interface.Pixel
                                                            Graphics.Image.ColorSpace.Y.Y
                                                            GHC.Types.Double)
                                                       @ Data.Vector.Storable.Vector
                                                       Data.Vector.Fusion.Util.$fMonadId
                                                       (GHC.Types.I# (GHC.Prim.*# x y))
                                                       (\ (x1 :: GHC.Types.Int) ->
                                                        case x1 of k { GHC.Types.I# ipv ->
                                                        case GHC.Real.$fIntegralInt_$cdivMod
                                                               k
                                                               wild5 of ix { (,) ipv1 ipv2 ->
                                                        case Data.Vector.Generic.unsafeIndex
                                                               @ Data.Vector.Storable.Vector
                                                               @ (Graphics.Image.Interface.Pixel
                                                                    cs1 e1)
                                                               $dVector2
                                                                 `cast`
                                                               (Data.Vector.Generic.Base.Vector
                                                                  (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                                                  <Graphics.Image.Interface.Pixel
                                                                     cs1 e1>_N)_R
                                                               v1
                                                               (case ipv1 of wild6 { GHC.Types.I# y1 ->
                                                                case ipv2 of wild7 { GHC.Types.I# y2 ->
                                                                GHC.Types.I#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.*# dt2 y1)
                                                                     y2) } }) of px1 { DEFAULT ->
                                                        case Data.Vector.Generic.unsafeIndex
                                                               @ Data.Vector.Storable.Vector
                                                               @ (Graphics.Image.Interface.Pixel
                                                                    cs2 e2)
                                                               $dVector1
                                                                 `cast`
                                                               (Data.Vector.Generic.Base.Vector
                                                                  (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                                                  <Graphics.Image.Interface.Pixel
                                                                     cs2 e2>_N)_R
                                                               v2
                                                               (case ipv1 of wild6 { GHC.Types.I# y1 ->
                                                                case ipv2 of wild7 { GHC.Types.I# y2 ->
                                                                GHC.Types.I#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.*# dt4 y1)
                                                                     y2) } }) of px2 { DEFAULT ->
                                                        f px1 px2 } } } })
                                                         `cast`
                                                       (<GHC.Types.Int>_R
                                                        ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                      <Graphics.Image.Interface.Pixel
                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                         GHC.Types.Double>_R)))))
                                        } in
                                        case GHC.Prim.<=# dt2 dt4 of lwild {
                                          DEFAULT -> $j3 dt4 ds6 1# -> $j3 dt2 ds3 }
                                    } in
                                    case GHC.Prim.<=# dt1 dt3 of lwild {
                                      DEFAULT -> $j2 dt3 ds5 1# -> $j2 dt1 ds2 }
                                 GHC.Types.True -> $j1 }
                            GHC.Types.True -> $j1 }
                      } in
                      case dt3 of ds7 {
                        DEFAULT -> fail1 GHC.Prim.void#
                        1#
                        -> case dt4 of ds8 {
                             DEFAULT -> fail1 GHC.Prim.void#
                             1#
                             -> case Data.Vector.Generic.unsafeIndex
                                       @ Data.Vector.Storable.Vector
                                       @ (Graphics.Image.Interface.Pixel cs2 e2)
                                       $dVector1
                                         `cast`
                                       (Data.Vector.Generic.Base.Vector
                                          (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                          <Graphics.Image.Interface.Pixel cs2 e2>_N)_R
                                       v2
                                       (GHC.Types.I# 0#) of px2 { DEFAULT ->
                                Graphics.Image.Interface.Vector.Generic.$WVGImage
                                  @ Data.Vector.Storable.Vector
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  ds2
                                  ds3
                                  (Data.Vector.Generic.new
                                     @ Data.Vector.Storable.Vector
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     Lib.$s$fArrayVScse_$s$fVectorVectora
                                     (Data.Vector.Generic.New.unstream
                                        @ Data.Vector.Storable.Vector
                                        @ (Graphics.Image.Interface.Pixel
                                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                        Lib.$s$fArrayVScse_$s$fVectorVectora
                                        (Data.Vector.Fusion.Bundle.inplace
                                           @ (Graphics.Image.Interface.Pixel cs1 e1)
                                           @ (Graphics.Image.Interface.Pixel
                                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                           @ Data.Vector.Storable.Vector
                                           (\ @ m :: * -> *
                                              ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                            Data.Vector.Fusion.Stream.Monadic.mapM
                                              @ m
                                              @ (Graphics.Image.Interface.Pixel cs1 e1)
                                              @ (Graphics.Image.Interface.Pixel
                                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                              $dMonad
                                              (let {
                                                 f1 :: Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double
                                                       -> m (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double)
                                                 = GHC.Base.return
                                                     @ m
                                                     $dMonad
                                                     @ (Graphics.Image.Interface.Pixel
                                                          Graphics.Image.ColorSpace.Y.Y
                                                          GHC.Types.Double)
                                               } in
                                               \ (x :: Graphics.Image.Interface.Pixel cs1 e1) ->
                                               f1 (f x px2)))
                                           (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                           (Data.Vector.Generic.stream
                                              @ Data.Vector.Storable.Vector
                                              @ (Graphics.Image.Interface.Pixel cs1 e1)
                                              $dVector2
                                                `cast`
                                              (Data.Vector.Generic.Base.Vector
                                                 (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                                 <Graphics.Image.Interface.Pixel cs1 e1>_N)_R
                                              v1)))) } } } }
                  } in
                  case dt1 of ds4 {
                    DEFAULT -> fail GHC.Prim.void#
                    1#
                    -> case dt2 of ds5 {
                         DEFAULT -> fail GHC.Prim.void#
                         1#
                         -> case ds1
                                   `cast`
                                 (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs2>_N <e2>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                   <cs2>_N
                                                                                                                   <e2>_N) of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                            case Data.Vector.Generic.unsafeIndex
                                   @ Data.Vector.Storable.Vector
                                   @ (Graphics.Image.Interface.Pixel cs1 e1)
                                   $dVector2
                                     `cast`
                                   (Data.Vector.Generic.Base.Vector
                                      (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                      <Graphics.Image.Interface.Pixel cs1 e1>_N)_R
                                   v1
                                   (GHC.Types.I# 0#) of px1 { DEFAULT ->
                            Graphics.Image.Interface.Vector.Generic.$WVGImage
                              @ Data.Vector.Storable.Vector
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              (GHC.Types.I# dt3)
                              (GHC.Types.I# dt4)
                              (Data.Vector.Generic.new
                                 @ Data.Vector.Storable.Vector
                                 @ (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                 Lib.$s$fArrayVScse_$s$fVectorVectora
                                 (Data.Vector.Generic.New.unstream
                                    @ Data.Vector.Storable.Vector
                                    @ (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                    Lib.$s$fArrayVScse_$s$fVectorVectora
                                    (Data.Vector.Fusion.Bundle.inplace
                                       @ (Graphics.Image.Interface.Pixel cs2 e2)
                                       @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       @ Data.Vector.Storable.Vector
                                       (\ @ m :: * -> * ($dMonad :: GHC.Base.Monad m)[OneShot] ->
                                        let {
                                          f1 :: Graphics.Image.Interface.Pixel cs2 e2
                                                -> Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                                          = f px1
                                        } in
                                        Data.Vector.Fusion.Stream.Monadic.mapM
                                          @ m
                                          @ (Graphics.Image.Interface.Pixel cs2 e2)
                                          @ (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                          $dMonad
                                          (let {
                                             f2 :: Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                                                   -> m (Graphics.Image.Interface.Pixel
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double)
                                             = GHC.Base.return
                                                 @ m
                                                 $dMonad
                                                 @ (Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y
                                                      GHC.Types.Double)
                                           } in
                                           \ (x :: Graphics.Image.Interface.Pixel cs2 e2) ->
                                           f2 (f1 x)))
                                       (GHC.Base.id @ Data.Vector.Fusion.Bundle.Size.Size)
                                       (Data.Vector.Generic.stream
                                          @ Data.Vector.Storable.Vector
                                          @ (Graphics.Image.Interface.Pixel cs2 e2)
                                          $dVector1
                                            `cast`
                                          (Data.Vector.Generic.Base.Vector
                                             (Graphics.Image.Interface.Vector.Storable.D:R:VectorVS[0])
                                             <Graphics.Image.Interface.Pixel cs2 e2>_N)_R
                                          v2)))) } } } } })
                   `cast`
                 (<Graphics.Image.Interface.Pixel cs1 e1
                   -> Graphics.Image.Interface.Pixel cs2 e2
                   -> Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS cs1 e1>_R
                  ->_R <Graphics.Image.Interface.Image
                          Graphics.Image.Interface.Vector.Storable.VS cs2 e2>_R
                  ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                <Graphics.Image.ColorSpace.Y.Y>_N
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
77bd760ec78f535ff53f980ad28c2028
  $s$fArrayVScse_$s$fArrayVScse_$c|*| ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
  {- Arity: 2,
     Strictness: <S(SSS(SSL)),1*U(U,U,U(U,U,U))><S(SSS(LSL)),1*U(U,U,U(A,U,U))>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double)
                   (ds1 :: Graphics.Image.Interface.Image
                             Graphics.Image.Interface.Vector.Storable.VS
                             Graphics.Image.ColorSpace.Y.Y
                             GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 let {
                   n1 :: GHC.Types.Int = GHC.Types.I# dt2
                 } in
                 let {
                   ds2 :: Graphics.Image.Interface.Vector.Generic.VGImage
                            Data.Vector.Storable.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   = case ds1
                            `cast`
                          (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                    <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                    <GHC.Types.Double>_N) of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                     let {
                       m :: GHC.Types.Int = GHC.Types.I# dt3
                     } in
                     case (Data.Vector.Fusion.Bundle.Monadic.length
                             @ Data.Vector.Fusion.Util.Id
                             @ Data.Vector.Storable.Vector
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             Data.Vector.Fusion.Util.$fMonadId
                             (Data.Vector.Fusion.Bundle.Monadic.fromVector
                                @ Data.Vector.Fusion.Util.Id
                                @ Data.Vector.Storable.Vector
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                Data.Vector.Fusion.Util.$fMonadId
                                Lib.$s$fArrayVScse_$s$fVectorVectora
                                v2))
                            `cast`
                          (Data.Vector.Fusion.Util.N:Id[0]
                               <GHC.Types.Int>_R) of v3 { GHC.Types.I# ipv ->
                     Graphics.Image.Interface.Vector.Generic.$WVGImage
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       (GHC.Types.I# dt4)
                       m
                       (Data.Vector.Generic.new
                          @ Data.Vector.Storable.Vector
                          @ (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          Lib.$s$fArrayVScse_$s$fVectorVectora
                          (Data.Vector.Generic.New.unstream
                             @ Data.Vector.Storable.Vector
                             @ (Graphics.Image.Interface.Pixel
                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                             Lib.$s$fArrayVScse_$s$fVectorVectora
                             (Data.Vector.Fusion.Bundle.Monadic.unbox
                                @ Data.Vector.Fusion.Util.Id
                                @ Data.Vector.Storable.Vector
                                @ (Graphics.Image.Interface.Pixel
                                     Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                Data.Vector.Fusion.Util.$fMonadId
                                (Data.Vector.Fusion.Bundle.Monadic.mapM
                                   @ Data.Vector.Fusion.Util.Id
                                   @ GHC.Types.Int
                                   @ (Data.Vector.Fusion.Util.Box
                                        (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                   @ Data.Vector.Storable.Vector
                                   Data.Vector.Fusion.Util.$fMonadId
                                   (\ (x :: GHC.Types.Int) ->
                                    case v2 of wild2 { Data.Vector.Storable.Vector dt5 dt6 dt7 ->
                                    Data.Vector.Fusion.Util.Box
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      (case Graphics.Image.ColorSpace.Y.$fStorablePixel3
                                              @ GHC.Types.Double
                                              Foreign.Storable.$fStorableDouble
                                              (GHC.Ptr.Ptr
                                                 @ (Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y
                                                      GHC.Types.Double)
                                                 dt6)
                                              x
                                              GHC.Prim.realWorld# of ds3 { (#,#) ipv1 ipv2 ->
                                       case GHC.Prim.touch#
                                              @ 'GHC.Types.LiftedRep
                                              @ GHC.ForeignPtr.ForeignPtrContents
                                              dt7
                                              ipv1 of s' { DEFAULT ->
                                       ipv2 } }) })
                                     `cast`
                                   (<GHC.Types.Int>_R
                                    ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                  <Data.Vector.Fusion.Util.Box
                                                     (Graphics.Image.Interface.Pixel
                                                        Graphics.Image.ColorSpace.Y.Y
                                                        GHC.Types.Double)>_R))
                                   (Data.Vector.Fusion.Bundle.Monadic.generateM
                                      @ Data.Vector.Fusion.Util.Id
                                      @ GHC.Types.Int
                                      @ Data.Vector.Storable.Vector
                                      Data.Vector.Fusion.Util.$fMonadId
                                      (GHC.Types.I# (GHC.Prim.*# dt3 dt4))
                                      (\ (x :: GHC.Types.Int) ->
                                       case x of k1 { GHC.Types.I# ipv1 ->
                                       case GHC.Real.$fIntegralInt_$cdivMod
                                              k1
                                              m of wild2 { (,) i j ->
                                       case j of wild3 { GHC.Types.I# y ->
                                       case i of wild4 { GHC.Types.I# y1 ->
                                       GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# dt4 y) y1) } } } })
                                        `cast`
                                      (<GHC.Types.Int>_R
                                       ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                     <GHC.Types.Int>_R))))))) } }
                 } in
                 let {
                   m2 :: GHC.Types.Int
                   = case ds2 of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v2 ->
                     GHC.Types.I# dt4 }
                 } in
                 let {
                   v2 :: Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   = case ds2 of wild1 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v4 ->
                     v4 }
                 } in
                 case GHC.Classes.neInt n1 m2 of wild1 {
                   GHC.Types.False
                   -> let {
                        ipv :: GHC.Types.Int = GHC.Types.I# dt1
                      } in
                      let {
                        ipv1 :: GHC.Types.Int
                        = case ds2 of wild2 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v4 ->
                          GHC.Types.I# dt3 }
                      } in
                      let {
                        $j1 :: Graphics.Image.Interface.Vector.Generic.VGImage
                                 Data.Vector.Storable.Vector
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          <join 0>
                        = case GHC.Err.error
                                 @ 'GHC.Types.LiftedRep
                                 @ (GHC.Types.Int, GHC.Types.Int)
                                 Graphics.Image.Interface.checkDims1
                                   `cast`
                                 (Sym (GHC.Classes.N:IP[0]
                                           <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                 (GHC.Base.augment
                                    @ GHC.Types.Char
                                    (\ @ b
                                       (c :: GHC.Types.Char -> b -> b)[OneShot]
                                       (n2 :: b)[OneShot] ->
                                     GHC.Base.foldr
                                       @ GHC.Types.Char
                                       @ b
                                       c
                                       n2
                                       (GHC.Types.:
                                          @ GHC.Types.Char
                                          GHC.Show.$fShow(,)3
                                          (GHC.Show.showLitString
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b1
                                                   (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                                   (n :: b1)[OneShot] ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b1
                                                   "Graphics.Image.Interface.Vector.Generic.makeImageVGM"#
                                                   c1
                                                   n))
                                             GHC.Show.$fShow[]1)))
                                    (GHC.Base.augment
                                       @ GHC.Types.Char
                                       (\ @ b
                                          (c :: GHC.Types.Char -> b -> b)[OneShot]
                                          (n2 :: b)[OneShot] ->
                                        GHC.CString.unpackFoldrCString#
                                          @ b
                                          ": dimensions are expected to be positive: "#
                                          c
                                          n2)
                                       (GHC.Show.$fShow(,)_$cshowsPrec
                                          @ GHC.Types.Int
                                          @ GHC.Types.Int
                                          GHC.Show.$fShowInt
                                          GHC.Show.$fShowInt
                                          GHC.Show.$fShow(,)1
                                          (ipv, ipv1)
                                          (GHC.Types.[] @ GHC.Types.Char))))
                          ret_ty (Graphics.Image.Interface.Vector.Generic.VGImage
                                    Data.Vector.Storable.Vector
                                    (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                          of {}
                      } in
                      case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild2 {
                        GHC.Types.False
                        -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild3 {
                             GHC.Types.False
                             -> case ipv1 of wild4 { GHC.Types.I# y ->
                                Graphics.Image.Interface.Vector.Generic.$WVGImage
                                  @ Data.Vector.Storable.Vector
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  ipv
                                  wild4
                                  (Data.Vector.Generic.new
                                     @ Data.Vector.Storable.Vector
                                     @ (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                     Lib.$s$fArrayVScse_$s$fVectorVectora
                                     (Data.Vector.Generic.New.unstream
                                        @ Data.Vector.Storable.Vector
                                        @ (Graphics.Image.Interface.Pixel
                                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                        Lib.$s$fArrayVScse_$s$fVectorVectora
                                        (Data.Vector.Fusion.Bundle.Monadic.generateM
                                           @ Data.Vector.Fusion.Util.Id
                                           @ (Graphics.Image.Interface.Pixel
                                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                           @ Data.Vector.Storable.Vector
                                           Data.Vector.Fusion.Util.$fMonadId
                                           (GHC.Types.I# (GHC.Prim.*# dt1 y))
                                           (\ (x :: GHC.Types.Int) ->
                                            case x of k1 { GHC.Types.I# ipv2 ->
                                            case GHC.Real.$fIntegralInt_$cdivMod
                                                   k1
                                                   wild4 of wild5 { (,) i j ->
                                            (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                                               @ Data.Vector.Fusion.Util.Id
                                               @ (Graphics.Image.Interface.Pixel
                                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                               @ (Graphics.Image.Interface.Pixel
                                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                               @ Data.Vector.Storable.Vector
                                               Data.Vector.Fusion.Util.$fMonadId
                                               GHC.Float.plusDouble
                                                 `cast`
                                               ((Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                          <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                                                ->_R (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                                                ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                              (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                                                      <GHC.Types.Double>_N)))
                                               (GHC.Types.D# 0.0##)
                                                 `cast`
                                               (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                         <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                                               (Data.Vector.Fusion.Bundle.Monadic.zipWithM
                                                  @ Data.Vector.Fusion.Util.Id
                                                  @ (Graphics.Image.Interface.Pixel
                                                       Graphics.Image.ColorSpace.Y.Y
                                                       GHC.Types.Double)
                                                  @ (Graphics.Image.Interface.Pixel
                                                       Graphics.Image.ColorSpace.Y.Y
                                                       GHC.Types.Double)
                                                  @ (Graphics.Image.Interface.Pixel
                                                       Graphics.Image.ColorSpace.Y.Y
                                                       GHC.Types.Double)
                                                  @ Data.Vector.Storable.Vector
                                                  Data.Vector.Fusion.Util.$fMonadId
                                                  GHC.Float.timesDouble
                                                    `cast`
                                                  ((Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                             <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                                                   ->_R (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N)
                                                   ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                                 (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                                                         <GHC.Types.Double>_N)))
                                                  (Data.Vector.Generic.stream
                                                     @ Data.Vector.Storable.Vector
                                                     @ (Graphics.Image.Interface.Pixel
                                                          Graphics.Image.ColorSpace.Y.Y
                                                          GHC.Types.Double)
                                                     Lib.$s$fArrayVScse_$s$fVectorVectora
                                                     (case i of wild6 { GHC.Types.I# x1 ->
                                                      Data.Vector.Generic.slice
                                                        @ Data.Vector.Storable.Vector
                                                        @ (Graphics.Image.Interface.Pixel
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double)
                                                        Lib.$s$fArrayVScse_$s$fVectorVectora
                                                        (GHC.Types.I# (GHC.Prim.*# x1 dt2))
                                                        n1
                                                        v1 }))
                                                  (Data.Vector.Generic.stream
                                                     @ Data.Vector.Storable.Vector
                                                     @ (Graphics.Image.Interface.Pixel
                                                          Graphics.Image.ColorSpace.Y.Y
                                                          GHC.Types.Double)
                                                     Lib.$s$fArrayVScse_$s$fVectorVectora
                                                     (case j of wild6 { GHC.Types.I# x1 ->
                                                      case m2 of wild7 { GHC.Types.I# y1 ->
                                                      Data.Vector.Generic.slice
                                                        @ Data.Vector.Storable.Vector
                                                        @ (Graphics.Image.Interface.Pixel
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double)
                                                        Lib.$s$fArrayVScse_$s$fVectorVectora
                                                        (GHC.Types.I# (GHC.Prim.*# x1 y1))
                                                        wild7
                                                        v2 } }))))
                                              `cast`
                                            (Data.Vector.Fusion.Util.N:Id[0]
                                                 <Graphics.Image.Interface.Pixel
                                                    Graphics.Image.ColorSpace.Y.Y
                                                    GHC.Types.Double>_R) } })
                                             `cast`
                                           (<GHC.Types.Int>_R
                                            ->_R Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                          <Graphics.Image.Interface.Pixel
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double>_R))))) }
                             GHC.Types.True -> $j1 }
                        GHC.Types.True -> $j1 }
                   GHC.Types.True
                   -> Graphics.Image.Interface.Vector.Generic.errorVG
                        @ (Graphics.Image.Interface.Vector.Generic.VGImage
                             Data.Vector.Storable.Vector
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                        (GHC.Base.build
                           @ GHC.Types.Char
                           (\ @ b -> GHC.CString.unpackFoldrCString# @ b "multVG"#))
                        (GHC.Base.augment
                           @ GHC.Types.Char
                           (\ @ b
                              (c :: GHC.Types.Char -> b -> b)[OneShot]
                              (n :: b)[OneShot] ->
                            GHC.CString.unpackFoldrCString#
                              @ b
                              "Inner dimensions of images must agree, but received: "#
                              c
                              n)
                           (GHC.Base.augment
                              @ GHC.Types.Char
                              (\ @ b
                                 (c :: GHC.Types.Char -> b -> b)[OneShot]
                                 (n :: b)[OneShot] ->
                               GHC.Base.foldr
                                 @ GHC.Types.Char
                                 @ b
                                 c
                                 n
                                 (GHC.Show.$fShow(,)_$cshowsPrec
                                    @ GHC.Types.Int
                                    @ GHC.Types.Int
                                    GHC.Show.$fShowInt
                                    GHC.Show.$fShowInt
                                    GHC.Show.$fShow(,)1
                                    (GHC.Types.I# dt1, n1)
                                    (GHC.Types.[] @ GHC.Types.Char)))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n :: b)[OneShot] ->
                                  GHC.CString.unpackFoldrCString# @ b " X "# c n)
                                 (GHC.Show.$fShow(,)_$cshowsPrec
                                    @ GHC.Types.Int
                                    @ GHC.Types.Int
                                    GHC.Show.$fShowInt
                                    GHC.Show.$fShowInt
                                    GHC.Show.$fShow(,)1
                                    (m2,
                                     case ds2 of wild2 { Graphics.Image.Interface.Vector.Generic.VGImage dt3 dt4 v4 ->
                                     GHC.Types.I# dt3 })
                                    (GHC.Types.[] @ GHC.Types.Char))))) } })
                  `cast`
                (<Graphics.Image.Interface.Image
                    Graphics.Image.Interface.Vector.Storable.VS
                    Graphics.Image.ColorSpace.Y.Y
                    GHC.Types.Double>_R
                 ->_R <Graphics.Image.Interface.Image
                         Graphics.Image.Interface.Vector.Storable.VS
                         Graphics.Image.ColorSpace.Y.Y
                         GHC.Types.Double>_R
                 ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                               <Graphics.Image.ColorSpace.Y.Y>_N
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N) -}
cde82f8aeacb670f82143e1926478050
  $s$fArrayVScse_$s$fBaseArrayVScse ::
    Graphics.Image.Interface.BaseArray
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.Image.Interface.Vector.Storable.VS
                  @ Graphics.Image.ColorSpace.Y.Y
                  @ GHC.Types.Double
                  Graphics.Image.Interface.Vector.Storable.$fBaseArrayVScse1
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Graphics.Image.Interface.Vector.Storable.VS>_N)
                  Lib.$s$fArrayRPUcse_$s$fColorSpaceYe
                  Lib.$s$fArrayVScse1
                    `cast`
                  (Sub (Sym (Graphics.Image.Interface.Vector.Storable.D:R:SuperClassVScse[0]
                                 <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)))
                  Lib.$s$fArrayVScse_$s$fBaseArrayVScse_$cdims -}
6dcc2c2cbee8d6bc385e2f5e0b8dc18d
  $s$fArrayVScse_$s$fBaseArrayVScse_$cdims ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (Graphics.Image.Interface.Vector.Generic.dimsVG
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                  `cast`
                ((Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                           <Graphics.Image.ColorSpace.Y.Y>_N
                           <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                 ->_R <(GHC.Types.Int, GHC.Types.Int)>_R) -}
b8ac4164358d89b55575871f11acf615
  $s$fArrayVScse_$s$fMArrayVScse ::
    Graphics.Image.Interface.MArray
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Graphics.Image.Interface.Vector.Storable.VS
                  @ Graphics.Image.ColorSpace.Y.Y
                  @ GHC.Types.Double
                  Lib.$s$fArrayVScse_$s$fBaseArrayVScse
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cunsafeIndex
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cdeepSeqImage
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldl
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldr
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmakeImageM
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmapM
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmapM_
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldM
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldM_
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmdims
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cthaw
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfreeze
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cnew
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cread
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cwrite
                  Lib.$s$fArrayVScse_$s$fMArrayVScse_$cswap -}
f2ea596c31c3f6c8c1fe29e154c003f6
  $s$fArrayVScse_$s$fMArrayVScse_$cdeepSeqImage ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double)
                   (b1 :: a) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 b1 }) -}
7a41564773eadaa870b238f0ba23979c
  $s$fArrayVScse_$s$fMArrayVScse_$cfoldM ::
    (GHC.Base.Functor m, GHC.Base.Monad m) =>
    (a
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> m a)
    -> a
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> m a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(C1(U))><S,1*U><S(LLS),1*U(A,A,U(U,U,U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ a
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dMonad :: GHC.Base.Monad m)
                   (f :: a
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> m a)
                   (px0 :: a)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0 of px1 { DEFAULT ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 Data.Vector.Fusion.Bundle.Monadic.foldlM'
                   @ m
                   @ a
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   @ Data.Vector.Storable.Vector
                   $dMonad
                   f
                   px1
                   (Data.Vector.Fusion.Bundle.lift
                      @ m
                      @ Data.Vector.Storable.Vector
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      $dMonad
                      (Data.Vector.Generic.stream
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         Lib.$s$fArrayVScse_$s$fVectorVectora
                         v1)) } }) -}
8d8820632c59588bd9f442e5d1feb9ff
  $s$fArrayVScse_$s$fMArrayVScse_$cfoldM_ ::
    (GHC.Base.Functor m, GHC.Base.Monad m) =>
    (a
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> m a)
    -> a
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> m ()
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LLC(C(S))LL),U(A,C(C1(U)),1*C1(C1(U)),C(U),A)><L,C(C1(U))><S,1*U><S(LLS),1*U(A,A,U(U,U,U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ m :: * -> *
                   @ a
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dMonad :: GHC.Base.Monad m)
                   (f :: a
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> m a)
                   (px0 :: a)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0 of px1 { DEFAULT ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ a
                   @ ()
                   (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                      @ m
                      @ a
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      @ Data.Vector.Storable.Vector
                      $dMonad
                      f
                      px1
                      (Data.Vector.Fusion.Bundle.lift
                         @ m
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         $dMonad
                         (Data.Vector.Generic.stream
                            @ Data.Vector.Storable.Vector
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            Lib.$s$fArrayVScse_$s$fVectorVectora
                            v1)))
                   (GHC.Base.return @ m $dMonad @ () GHC.Tuple.()) } }) -}
4405816d440876aed2ff821e3d264a87
  $s$fArrayVScse_$s$fMArrayVScse_$cfoldl ::
    (a
     -> Graphics.Image.Interface.Pixel
          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> a)
    -> a
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S(LLS(SLL)),1*U(A,A,U(U,U,U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   (f :: a
                         -> Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> a)
                   (px0 :: a)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0 of px1 { DEFAULT ->
                 case f of f1 { DEFAULT ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ Data.Vector.Storable.Vector
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a)
                       (b1 :: Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)[OneShot] ->
                     f1 a1 b1)
                      `cast`
                    (<a>_R
                     ->_R <Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    px1
                    (Data.Vector.Generic.stream
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       Lib.$s$fArrayVScse_$s$fVectorVectora
                       v1))
                   `cast`
                 (Data.Vector.Fusion.Util.N:Id[0] <a>_R) } } }) -}
3393abdc400811c349a1a3a65c7b1bce
  $s$fArrayVScse_$s$fMArrayVScse_$cfoldr ::
    (Graphics.Image.Interface.Pixel
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> a -> a)
    -> a
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S(LLS(SLL)),1*U(A,A,U(1*U,U,U))>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   (f :: Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> a -> a)
                   (px0 :: a)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case px0 of px1 { DEFAULT ->
                 case f of f1 { DEFAULT ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 (Data.Vector.Fusion.Bundle.Monadic.foldlM'
                    @ Data.Vector.Fusion.Util.Id
                    @ a
                    @ (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                    @ GHC.Types.Any
                    Data.Vector.Fusion.Util.$fMonadId
                    (\ (a1 :: a)
                       (b1 :: Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)[OneShot] ->
                     f1 b1 a1)
                      `cast`
                    (<a>_R
                     ->_R <Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R
                     ->_R Sym (Data.Vector.Fusion.Util.N:Id[0] <a>_R))
                    px1
                    (Data.Vector.Generic.streamR
                       @ Data.Vector.Storable.Vector
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       @ GHC.Types.Any
                       Lib.$s$fArrayVScse_$s$fVectorVectora
                       v1))
                   `cast`
                 (Data.Vector.Fusion.Util.N:Id[0] <a>_R) } } }) -}
75b9e5fa875746a4ad68a9010f0e2e43
  $s$fArrayVScse_$s$fMArrayVScse_$cfreeze ::
    (GHC.Base.Functor m, Control.Monad.Primitive.PrimMonad m) =>
    Graphics.Image.Interface.MImage
      (Control.Monad.Primitive.PrimState m)
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> m (Graphics.Image.Interface.Image
            Graphics.Image.Interface.Vector.Storable.VS
            Graphics.Image.ColorSpace.Y.Y
            GHC.Types.Double)
  {- Arity: 3,
     Strictness: <L,A><S(S(S(S(C(C(S))L)LLLLL)LLLL)L),U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,1*U(U,U,U(U,U,U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (ds :: Graphics.Image.Interface.MImage
                            (Control.Monad.Primitive.PrimState m)
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 GHC.Base.fmap
                   @ m
                   $dFunctor1
                   @ (Graphics.Image.Interface.Vector.Generic.VGImage
                        Data.Vector.Storable.Vector
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Graphics.Image.Interface.Image
                        Graphics.Image.Interface.Vector.Storable.VS
                        Graphics.Image.ColorSpace.Y.Y
                        GHC.Types.Double)
                   (\ (v :: Graphics.Image.Interface.Vector.Generic.VGImage
                              Data.Vector.Storable.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    v)
                     `cast`
                   (<Graphics.Image.Interface.Vector.Generic.VGImage
                       Data.Vector.Storable.Vector
                       (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                    ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                   (case ds
                           `cast`
                         (Graphics.Image.Interface.Vector.Storable.D:R:MImagesVScse0[0]
                              <Control.Monad.Primitive.PrimState
                                 m>_N <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:MImagesVScse[0]
                                                                                                   <Control.Monad.Primitive.PrimState
                                                                                                      m>_N
                                                                                                   <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                   <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.MVGImage dt1 dt2 mv ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative
                         @ m
                         (GHC.Base.$p1Monad
                            @ m
                            (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)))
                      @ (Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Graphics.Image.Interface.Vector.Generic.VGImage
                           Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (Graphics.Image.Interface.Vector.Generic.$WVGImage
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (GHC.Types.I# dt1)
                         (GHC.Types.I# dt2))
                      (GHC.Base.>>=
                         @ m
                         (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)
                         @ (Data.Vector.Generic.Base.Mutable
                              Data.Vector.Storable.Vector
                              (Control.Monad.Primitive.PrimState m)
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         @ (Data.Vector.Storable.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                         (let {
                            $dMonad1 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          GHC.Base.>>=
                            @ m
                            $dMonad1
                            @ (Data.Vector.Generic.Base.Mutable
                                 Data.Vector.Storable.Vector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            @ (Data.Vector.Generic.Base.Mutable
                                 Data.Vector.Storable.Vector
                                 (Control.Monad.Primitive.PrimState m)
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            (let {
                               n :: GHC.Types.Int
                               = case mv
                                        `cast`
                                      (Sub (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                          m>_N <Graphics.Image.Interface.Pixel
                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                  GHC.Types.Double>_N) of wild1 { Data.Vector.Storable.Mutable.MVector dt3 dt4 dt5 ->
                                 GHC.Types.I# dt3 }
                             } in
                             case GHC.Classes.ltInt n (GHC.Types.I# 0#) of wild1 {
                               GHC.Types.False
                               -> case GHC.Classes.gtInt
                                         n
                                         (GHC.Real.$fIntegralInt_$cquot
                                            GHC.Base.maxInt
                                            Foreign.Storable.$fStorableDouble5) of wild2 {
                                    GHC.Types.False
                                    -> (Control.Monad.Primitive.primitive
                                          @ m
                                          $dPrimMonad
                                          @ (Data.Vector.Storable.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                          (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                           case n of wild3 { GHC.Types.I# x ->
                                           let {
                                             x1 :: GHC.Prim.Int# = GHC.Prim.*# x 8#
                                           } in
                                           case GHC.Prim.<# x1 0# of lwild {
                                             DEFAULT
                                             -> case GHC.Prim.newAlignedPinnedByteArray#
                                                       @ GHC.Prim.RealWorld
                                                       x1
                                                       8#
                                                       s of ds1 { (#,#) ipv ipv1 ->
                                                (# ipv,
                                                   Data.Vector.Storable.Mutable.$WMVector
                                                     @ (Control.Monad.Primitive.PrimState m)
                                                     @ (Graphics.Image.Interface.Pixel
                                                          Graphics.Image.ColorSpace.Y.Y
                                                          GHC.Types.Double)
                                                     wild3
                                                     (GHC.ForeignPtr.ForeignPtr
                                                        @ (Graphics.Image.Interface.Pixel
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double)
                                                        (GHC.Prim.byteArrayContents#
                                                           ipv1
                                                             `cast`
                                                           (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                         GHC.Prim.RealWorld) GHC.Prim.ByteArray#))
                                                        (GHC.ForeignPtr.PlainPtr ipv1)) #) }
                                             1#
                                             -> case GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
                                                ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          Data.Vector.Storable.Mutable.MVector
                                                            (Control.Monad.Primitive.PrimState m)
                                                            (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double) #)
                                                of {} } })
                                            `cast`
                                          ((GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                                     (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                           ->_R ((#,#)
                                                   <'GHC.Types.TupleRep '[]>_R
                                                   <'GHC.Types.LiftedRep>_R
                                                   (GHC.Prim.State#
                                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                                             (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                                   <Data.Vector.Storable.Mutable.MVector
                                                      (Control.Monad.Primitive.PrimState m)
                                                      (Graphics.Image.Interface.Pixel
                                                         Graphics.Image.ColorSpace.Y.Y
                                                         GHC.Types.Double)>_R)_R))
                                         `cast`
                                       (<m>_R (Sym (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                  m>_N <Graphics.Image.Interface.Pixel
                                                                                                          Graphics.Image.ColorSpace.Y.Y
                                                                                                          GHC.Types.Double>_N))
                                    GHC.Types.True
                                    -> (GHC.Err.error
                                          @ 'GHC.Types.LiftedRep
                                          @ (m (Data.Vector.Storable.Mutable.MVector
                                                  (Control.Monad.Primitive.PrimState m)
                                                  (Graphics.Image.Interface.Pixel
                                                     Graphics.Image.ColorSpace.Y.Y
                                                     GHC.Types.Double)))
                                          (GHC.Stack.Types.PushCallStack
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString# @ b "error"#))
                                             (GHC.Stack.Types.SrcLoc
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "Data.Vector.Storable.Mutable"#))
                                                (GHC.Base.build
                                                   @ GHC.Types.Char
                                                   (\ @ b ->
                                                    GHC.CString.unpackFoldrCString#
                                                      @ b
                                                      "./Data/Vector/Storable/Mutable.hs"#))
                                                (GHC.Types.I# 126#)
                                                (GHC.Types.I# 16#)
                                                (GHC.Types.I# 126#)
                                                (GHC.Types.I# 79#))
                                             GHC.Stack.Types.EmptyCallStack)
                                            `cast`
                                          (Sym (GHC.Classes.N:IP[0]
                                                    <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                          (GHC.Base.augment
                                             @ GHC.Types.Char
                                             (\ @ b
                                                (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                (n1 :: b)[OneShot] ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b
                                                "Storable.basicUnsafeNew: length too large: "#
                                                c
                                                n1)
                                             (GHC.Show.showSignedInt
                                                GHC.Show.$fShow(,)1
                                                n
                                                (GHC.Types.[] @ GHC.Types.Char))))
                                         `cast`
                                       (<m>_R (Sym (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                  m>_N <Graphics.Image.Interface.Pixel
                                                                                                          Graphics.Image.ColorSpace.Y.Y
                                                                                                          GHC.Types.Double>_N)) }
                               GHC.Types.True
                               -> (GHC.Err.error
                                     @ 'GHC.Types.LiftedRep
                                     @ (m (Data.Vector.Storable.Mutable.MVector
                                             (Control.Monad.Primitive.PrimState m)
                                             (Graphics.Image.Interface.Pixel
                                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)))
                                     (GHC.Stack.Types.PushCallStack
                                        (GHC.Base.build
                                           @ GHC.Types.Char
                                           (\ @ b -> GHC.CString.unpackFoldrCString# @ b "error"#))
                                        (GHC.Stack.Types.SrcLoc
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 "Data.Vector.Storable.Mutable"#))
                                           (GHC.Base.build
                                              @ GHC.Types.Char
                                              (\ @ b ->
                                               GHC.CString.unpackFoldrCString#
                                                 @ b
                                                 "./Data/Vector/Storable/Mutable.hs"#))
                                           (GHC.Types.I# 125#)
                                           (GHC.Types.I# 15#)
                                           (GHC.Types.I# 125#)
                                           (GHC.Types.I# 77#))
                                        GHC.Stack.Types.EmptyCallStack)
                                       `cast`
                                     (Sym (GHC.Classes.N:IP[0]
                                               <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                     (GHC.Base.augment
                                        @ GHC.Types.Char
                                        (\ @ b
                                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                                           (n1 :: b)[OneShot] ->
                                         GHC.CString.unpackFoldrCString#
                                           @ b
                                           "Storable.basicUnsafeNew: negative length: "#
                                           c
                                           n1)
                                        (GHC.Show.showSignedInt
                                           GHC.Show.$fShow(,)1
                                           n
                                           (GHC.Types.[] @ GHC.Types.Char))))
                                    `cast`
                                  (<m>_R (Sym (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                             m>_N <Graphics.Image.Interface.Pixel
                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                     GHC.Types.Double>_N)) })
                            (\ (v' :: Data.Vector.Generic.Base.Mutable
                                        Data.Vector.Storable.Vector
                                        (Control.Monad.Primitive.PrimState m)
                                        (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                             GHC.Base.>>
                               @ m
                               $dMonad1
                               @ ()
                               @ (Data.Vector.Generic.Base.Mutable
                                    Data.Vector.Storable.Vector
                                    (Control.Monad.Primitive.PrimState m)
                                    (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                               (case v'
                                       `cast`
                                     (Sub (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                         m>_N <Graphics.Image.Interface.Pixel
                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                 GHC.Types.Double>_N) of nt { Data.Vector.Storable.Mutable.MVector ipv ipv1 ipv2 ->
                                case mv
                                       `cast`
                                     (Sub (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                         m>_N <Graphics.Image.Interface.Pixel
                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                 GHC.Types.Double>_N) of nt1 { Data.Vector.Storable.Mutable.MVector ipv3 ipv4 ipv5 ->
                                Control.Monad.Primitive.primitive
                                  @ m
                                  $dPrimMonad
                                  @ ()
                                  (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                   case {__pkg_ccall base-4.11.1.0 GHC.Prim.Addr#
                                                                   -> GHC.Prim.Addr#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Addr# #)}
                                          ipv1
                                          ipv4
                                          (GHC.Prim.int2Word# (GHC.Prim.*# ipv 8#))
                                          s of wild3 { (#,#) ds4 ds5 ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.LiftedRep
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv5
                                          ds4 of s' { DEFAULT ->
                                   case GHC.Prim.touch#
                                          @ 'GHC.Types.LiftedRep
                                          @ GHC.ForeignPtr.ForeignPtrContents
                                          ipv2
                                          s' of s'1 { DEFAULT ->
                                   (# s'1, GHC.Tuple.() #) } } })
                                    `cast`
                                  ((GHC.Prim.State#
                                      (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                             (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                   ->_R ((#,#)
                                           <'GHC.Types.TupleRep '[]>_R
                                           <'GHC.Types.LiftedRep>_R
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                                     (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                           <()>_R)_R) } })
                               (GHC.Base.return
                                  @ m
                                  $dMonad1
                                  @ (Data.Vector.Generic.Base.Mutable
                                       Data.Vector.Storable.Vector
                                       (Control.Monad.Primitive.PrimState m)
                                       (Graphics.Image.Interface.Pixel
                                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                  v')))
                         (let {
                            $dMonad1 :: GHC.Base.Monad m
                            = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                          } in
                          \ (ds1 :: Data.Vector.Generic.Base.Mutable
                                      Data.Vector.Storable.Vector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                          case ds1
                                 `cast`
                               (Sub (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                   m>_N <Graphics.Image.Interface.Pixel
                                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                                           GHC.Types.Double>_N) of wild1 { Data.Vector.Storable.Mutable.MVector dt3 dt4 dt5 ->
                          GHC.Base.return
                            @ m
                            $dMonad1
                            @ (Data.Vector.Storable.Vector
                                 (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                            (Data.Vector.Storable.$WVector
                               @ (Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                               (GHC.Types.I# dt3)
                               (GHC.ForeignPtr.ForeignPtr
                                  @ (Graphics.Image.Interface.Pixel
                                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                  dt4
                                  dt5)) })) })) -}
e2b6330cc666cf5bffeb64bdb766d56a
  $s$fArrayVScse_$s$fMArrayVScse_$cmakeImageM ::
    (GHC.Base.Functor m, GHC.Base.Monad m) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> ((GHC.Types.Int, GHC.Types.Int)
        -> m (Graphics.Image.Interface.Pixel
                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
    -> m (Graphics.Image.Interface.Image
            Graphics.Image.Interface.Vector.Storable.VS
            Graphics.Image.ColorSpace.Y.Y
            GHC.Types.Double)
  {- Arity: 4,
     Strictness: <L,A><S(S(S(C(C(S))L)LLLLL)LLLL),U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S,1*U(1*U(U),1*U(U))><L,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (sh :: (GHC.Types.Int, GHC.Types.Int))
                   (f :: (GHC.Types.Int, GHC.Types.Int)
                         -> m (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case sh of sh2 { (,) ipv ipv1 ->
                 GHC.Base.fmap
                   @ m
                   $dFunctor1
                   @ (Graphics.Image.Interface.Vector.Generic.VGImage
                        Data.Vector.Storable.Vector
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Graphics.Image.Interface.Image
                        Graphics.Image.Interface.Vector.Storable.VS
                        Graphics.Image.ColorSpace.Y.Y
                        GHC.Types.Double)
                   (\ (v :: Graphics.Image.Interface.Vector.Generic.VGImage
                              Data.Vector.Storable.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    v)
                     `cast`
                   (<Graphics.Image.Interface.Vector.Generic.VGImage
                       Data.Vector.Storable.Vector
                       (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                    ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                   (case f of f1 { DEFAULT ->
                    let {
                      ds :: (GHC.Types.Int, GHC.Types.Int)
                      = let {
                          $j1 :: (GHC.Types.Int, GHC.Types.Int) <join 0>
                          = GHC.Err.error
                              @ 'GHC.Types.LiftedRep
                              @ (GHC.Types.Int, GHC.Types.Int)
                              Graphics.Image.Interface.checkDims1
                                `cast`
                              (Sym (GHC.Classes.N:IP[0]
                                        <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                              (GHC.Base.augment
                                 @ GHC.Types.Char
                                 (\ @ b
                                    (c :: GHC.Types.Char -> b -> b)[OneShot]
                                    (n1 :: b)[OneShot] ->
                                  GHC.Base.foldr
                                    @ GHC.Types.Char
                                    @ b
                                    c
                                    n1
                                    (GHC.Types.:
                                       @ GHC.Types.Char
                                       GHC.Show.$fShow(,)3
                                       (GHC.Show.showLitString
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b1
                                                (c1 :: GHC.Types.Char -> b1 -> b1)[OneShot]
                                                (n :: b1)[OneShot] ->
                                              GHC.CString.unpackFoldrCString#
                                                @ b1
                                                "Graphics.Image.Interface.Vector.Generic.makeImageMVG"#
                                                c1
                                                n))
                                          GHC.Show.$fShow[]1)))
                                 (GHC.Base.augment
                                    @ GHC.Types.Char
                                    (\ @ b
                                       (c :: GHC.Types.Char -> b -> b)[OneShot]
                                       (n1 :: b)[OneShot] ->
                                     GHC.CString.unpackFoldrCString#
                                       @ b
                                       ": dimensions are expected to be positive: "#
                                       c
                                       n1)
                                    (GHC.Show.$fShow(,)_$cshowsPrec
                                       @ GHC.Types.Int
                                       @ GHC.Types.Int
                                       GHC.Show.$fShowInt
                                       GHC.Show.$fShowInt
                                       GHC.Show.$fShow(,)1
                                       sh2
                                       (GHC.Types.[] @ GHC.Types.Char))))
                        } in
                        case GHC.Classes.leInt ipv (GHC.Types.I# 0#) of wild1 {
                          GHC.Types.False
                          -> case GHC.Classes.leInt ipv1 (GHC.Types.I# 0#) of wild2 {
                               GHC.Types.False -> sh2 GHC.Types.True -> $j1 }
                          GHC.Types.True -> $j1 }
                    } in
                    let {
                      m1 :: GHC.Types.Int = case ds of wild { (,) m2 n -> m2 }
                    } in
                    let {
                      n :: GHC.Types.Int = case ds of wild { (,) m2 n1 -> n1 }
                    } in
                    case ds of ds1 { (,) ipv2 ipv3 ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ (Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Graphics.Image.Interface.Vector.Generic.VGImage
                           Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (Graphics.Image.Interface.Vector.Generic.$WVGImage
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         m1
                         n)
                      (Data.Vector.Generic.unstreamM
                         @ m
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         @ GHC.Types.Any
                         $dMonad
                         Lib.$s$fArrayVScse_$s$fVectorVectora
                         (case m1 of wild { GHC.Types.I# x ->
                          case n of wild1 { GHC.Types.I# y ->
                          Data.Vector.Fusion.Bundle.Monadic.generateM
                            @ m
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            @ GHC.Types.Any
                            $dMonad
                            (GHC.Types.I# (GHC.Prim.*# x y))
                            (\ (x1 :: GHC.Types.Int) ->
                             f1
                               (case x1 of k1 { GHC.Types.I# ipv4 ->
                                GHC.Real.$fIntegralInt_$cdivMod k1 wild1 })) } })) } }) }) -}
4ff0204186796cf81233ba77b9a6c7be
  $s$fArrayVScse_$s$fMArrayVScse_$cmapM ::
    (Graphics.Image.Interface.MArray
       Graphics.Image.Interface.Vector.Storable.VS cs' e',
     GHC.Base.Functor m, GHC.Base.Monad m) =>
    (Graphics.Image.Interface.Pixel cs' e'
     -> m (Graphics.Image.Interface.Pixel
             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS cs' e'
    -> m (Graphics.Image.Interface.Image
            Graphics.Image.Interface.Vector.Storable.VS
            Graphics.Image.ColorSpace.Y.Y
            GHC.Types.Double)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(A,A,1*U(A,1*U(A,A,C(C1(C1(U(U,1*U)))),A,A,A,A,A)),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,A><S(S(S(C(C(S))L)LLLLL)LLLL),U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><L,C(U)><L,1*U(U,U,U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ cs'
                   @ e'
                   @ m :: * -> *
                   ($dMArray :: Graphics.Image.Interface.MArray
                                  Graphics.Image.Interface.Vector.Storable.VS cs' e')
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 let {
                   $dBaseArray1 :: Graphics.Image.Interface.BaseArray
                                     Graphics.Image.Interface.Vector.Storable.VS cs' e'
                   = Graphics.Image.Interface.$p1MArray
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs'
                       @ e'
                       $dMArray
                 } in
                 let {
                   irred1 :: Graphics.Image.Interface.SuperClass
                               Graphics.Image.Interface.Vector.Storable.VS cs' e'
                   = Graphics.Image.Interface.$p3BaseArray
                       @ Graphics.Image.Interface.Vector.Storable.VS
                       @ cs'
                       @ e'
                       $dBaseArray1
                 } in
                 let {
                   $dStorable1 :: Foreign.Storable.Storable
                                    (Graphics.Image.Interface.Pixel cs' e')
                   = GHC.Classes.$p2(%,%)
                       @ (Graphics.Image.Interface.ColorSpace cs' e')
                       @ (Foreign.Storable.Storable
                            (Graphics.Image.Interface.Pixel cs' e'))
                       irred1
                         `cast`
                       (Sub (Graphics.Image.Interface.Vector.Storable.D:R:SuperClassVScse[0]
                                 <cs'>_N <e'>_N))
                 } in
                 let {
                   $dVector1 :: Data.Vector.Generic.Base.Vector
                                  Data.Vector.Storable.Vector
                                  (Graphics.Image.Interface.Pixel cs' e')
                   = Data.Vector.Storable.$fVectorVectora
                       @ (Graphics.Image.Interface.Pixel cs' e')
                       $dStorable1
                 } in
                 \ (f :: Graphics.Image.Interface.Pixel cs' e'
                         -> m (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS cs' e') ->
                 GHC.Base.fmap
                   @ m
                   $dFunctor1
                   @ (Graphics.Image.Interface.Vector.Generic.VGImage
                        Data.Vector.Storable.Vector
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Graphics.Image.Interface.Image
                        Graphics.Image.Interface.Vector.Storable.VS
                        Graphics.Image.ColorSpace.Y.Y
                        GHC.Types.Double)
                   (\ (v :: Graphics.Image.Interface.Vector.Generic.VGImage
                              Data.Vector.Storable.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    v)
                     `cast`
                   (<Graphics.Image.Interface.Vector.Generic.VGImage
                       Data.Vector.Storable.Vector
                       (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                    ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                   (case ds
                           `cast`
                         (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <cs'>_N <e'>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                           <cs'>_N
                                                                                                           <e'>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ (Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Graphics.Image.Interface.Vector.Generic.VGImage
                           Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (Graphics.Image.Interface.Vector.Generic.$WVGImage
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (GHC.Types.I# dt1)
                         (GHC.Types.I# dt2))
                      (Data.Vector.Generic.unstreamM
                         @ m
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         @ Data.Vector.Storable.Vector
                         $dMonad
                         Lib.$s$fArrayVScse_$s$fVectorVectora
                         (Data.Vector.Fusion.Bundle.Monadic.mapM
                            @ m
                            @ (Graphics.Image.Interface.Pixel cs' e')
                            @ (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                            @ Data.Vector.Storable.Vector
                            $dMonad
                            f
                            (Data.Vector.Fusion.Bundle.lift
                               @ m
                               @ Data.Vector.Storable.Vector
                               @ (Graphics.Image.Interface.Pixel cs' e')
                               $dMonad
                               (Data.Vector.Generic.stream
                                  @ Data.Vector.Storable.Vector
                                  @ (Graphics.Image.Interface.Pixel cs' e')
                                  $dVector1
                                  v1)))) })) -}
43d2a45202119417a13472cae12dd728
  $s$fArrayVScse_$s$fMArrayVScse_$cmapM_ ::
    (GHC.Base.Functor m, GHC.Base.Monad m) =>
    (Graphics.Image.Interface.Pixel
       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
     -> m b)
    -> Graphics.Image.Interface.Image
         Graphics.Image.Interface.Vector.Storable.VS
         Graphics.Image.ColorSpace.Y.Y
         GHC.Types.Double
    -> m ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,A><S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><L,C(U)><S(LLS),1*U(A,A,U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   @ b
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dMonad :: GHC.Base.Monad m)
                   (f :: Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
                         -> m b)
                   (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 Data.Vector.Fusion.Bundle.Monadic.mapM_
                   @ m
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   @ b
                   @ Data.Vector.Storable.Vector
                   $dMonad
                   f
                   (Data.Vector.Fusion.Bundle.lift
                      @ m
                      @ Data.Vector.Storable.Vector
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      $dMonad
                      (Data.Vector.Generic.stream
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         Lib.$s$fArrayVScse_$s$fVectorVectora
                         v1)) }) -}
0877ab209835fcbbdd69c4787e099754
  $s$fArrayVScse_$s$fMArrayVScse_$cmdims ::
    Graphics.Image.Interface.MImage
      s
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s
                   (ds :: Graphics.Image.Interface.MImage
                            s
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 Graphics.Image.Interface.Vector.Generic.mdimsVG
                   @ s
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   ds
                     `cast`
                   (Graphics.Image.Interface.Vector.Storable.D:R:MImagesVScse0[0]
                        <s>_N <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:MImagesVScse[0]
                                                                                           <s>_N
                                                                                           <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                           <GHC.Types.Double>_N)) -}
f138416197c29e11071d055ef9d1434a
  $s$fArrayVScse_$s$fMArrayVScse_$cnew ::
    (GHC.Base.Functor m, Control.Monad.Primitive.PrimMonad m) =>
    (GHC.Types.Int, GHC.Types.Int)
    -> m (Graphics.Image.Interface.MImage
            (Control.Monad.Primitive.PrimState m)
            Graphics.Image.Interface.Vector.Storable.VS
            Graphics.Image.ColorSpace.Y.Y
            GHC.Types.Double)
  {- Arity: 3,
     Strictness: <L,A><S(S(S(S(C(C(S))L)LLLLL)LLLL)L),U(U(U(U(C(C1(U)),A),A,A,A,A,A),1*C1(C1(U)),C(C1(U)),C(U),A),C(U))><S,1*U(U(U),U(U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (ix :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case ix of ix1 { (,) ipv ipv1 ->
                 GHC.Base.fmap
                   @ m
                   $dFunctor1
                   @ (Graphics.Image.Interface.Vector.Generic.MVGImage
                        (Control.Monad.Primitive.PrimState m)
                        Data.Vector.Storable.Vector
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Graphics.Image.Interface.MImage
                        (Control.Monad.Primitive.PrimState m)
                        Graphics.Image.Interface.Vector.Storable.VS
                        Graphics.Image.ColorSpace.Y.Y
                        GHC.Types.Double)
                   (\ (v :: Graphics.Image.Interface.Vector.Generic.MVGImage
                              (Control.Monad.Primitive.PrimState m)
                              Data.Vector.Storable.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    v)
                     `cast`
                   (<Graphics.Image.Interface.Vector.Generic.MVGImage
                       (Control.Monad.Primitive.PrimState m)
                       Data.Vector.Storable.Vector
                       (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                    ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:MImagesVScse[0]
                                  <Control.Monad.Primitive.PrimState m>_N
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:MImagesVScse0[0]
                                                                   <Control.Monad.Primitive.PrimState
                                                                      m>_N) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                   (GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative
                         @ m
                         (GHC.Base.$p1Monad
                            @ m
                            (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)))
                      @ (Data.Vector.Generic.Base.Mutable
                           Data.Vector.Storable.Vector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Graphics.Image.Interface.Vector.Generic.MVGImage
                           (Control.Monad.Primitive.PrimState m)
                           Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (Graphics.Image.Interface.Vector.Generic.$WMVGImage
                         @ (Control.Monad.Primitive.PrimState m)
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         ipv
                         ipv1)
                      (let {
                         $dMonad1 :: GHC.Base.Monad m
                         = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                       } in
                       let {
                         n1 :: GHC.Types.Int
                         = case ipv of wild1 { GHC.Types.I# x ->
                           case ipv1 of wild2 { GHC.Types.I# y ->
                           GHC.Types.I# (GHC.Prim.*# x y) } }
                       } in
                       case GHC.Classes.geInt n1 (GHC.Types.I# 0#) of wild1 {
                         GHC.Types.False
                         -> case n1 of wild2 { GHC.Types.I# n# ->
                            Data.Vector.Internal.Check.checkError
                              @ (m (Data.Vector.Generic.Base.Mutable
                                      Data.Vector.Storable.Vector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)))
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b ->
                                  GHC.CString.unpackFoldrCString#
                                    @ b
                                    "./Data/Vector/Generic/Mutable.hs"#))
                              (GHC.Types.I# 585#)
                              Data.Vector.Internal.Check.Bounds
                              (GHC.Base.build
                                 @ GHC.Types.Char
                                 (\ @ b -> GHC.CString.unpackFoldrCString# @ b "new"#))
                              (Data.Vector.Internal.Check.checkLength_msg# n#) }
                         GHC.Types.True
                         -> GHC.Base.>>=
                              @ m
                              $dMonad1
                              @ (Data.Vector.Generic.Base.Mutable
                                   Data.Vector.Storable.Vector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                              @ (Data.Vector.Generic.Base.Mutable
                                   Data.Vector.Storable.Vector
                                   (Control.Monad.Primitive.PrimState m)
                                   (Graphics.Image.Interface.Pixel
                                      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                              (case GHC.Classes.ltInt n1 (GHC.Types.I# 0#) of wild {
                                 GHC.Types.False
                                 -> case GHC.Classes.gtInt
                                           n1
                                           (GHC.Real.$fIntegralInt_$cquot
                                              GHC.Base.maxInt
                                              Foreign.Storable.$fStorableDouble5) of wild2 {
                                      GHC.Types.False
                                      -> (Control.Monad.Primitive.primitive
                                            @ m
                                            $dPrimMonad
                                            @ (Data.Vector.Storable.Mutable.MVector
                                                 (Control.Monad.Primitive.PrimState m)
                                                 (Graphics.Image.Interface.Pixel
                                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                            (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                             case n1 of wild3 { GHC.Types.I# x ->
                                             let {
                                               x1 :: GHC.Prim.Int# = GHC.Prim.*# x 8#
                                             } in
                                             case GHC.Prim.<# x1 0# of lwild {
                                               DEFAULT
                                               -> case GHC.Prim.newAlignedPinnedByteArray#
                                                         @ GHC.Prim.RealWorld
                                                         x1
                                                         8#
                                                         s of ds { (#,#) ipv2 ipv3 ->
                                                  (# ipv2,
                                                     Data.Vector.Storable.Mutable.$WMVector
                                                       @ (Control.Monad.Primitive.PrimState m)
                                                       @ (Graphics.Image.Interface.Pixel
                                                            Graphics.Image.ColorSpace.Y.Y
                                                            GHC.Types.Double)
                                                       wild3
                                                       (GHC.ForeignPtr.ForeignPtr
                                                          @ (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double)
                                                          (GHC.Prim.byteArrayContents#
                                                             ipv3
                                                               `cast`
                                                             (UnsafeCo representational (GHC.Prim.MutableByteArray#
                                                                                           GHC.Prim.RealWorld) GHC.Prim.ByteArray#))
                                                          (GHC.ForeignPtr.PlainPtr ipv3)) #) }
                                               1#
                                               -> case GHC.ForeignPtr.mallocPlainForeignPtrAlignedBytes2
                                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            Data.Vector.Storable.Mutable.MVector
                                                              (Control.Monad.Primitive.PrimState m)
                                                              (Graphics.Image.Interface.Pixel
                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                 GHC.Types.Double) #)
                                                  of {} } })
                                              `cast`
                                            ((GHC.Prim.State#
                                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                             ->_R ((#,#)
                                                     <'GHC.Types.TupleRep '[]>_R
                                                     <'GHC.Types.LiftedRep>_R
                                                     (GHC.Prim.State#
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                                     <Data.Vector.Storable.Mutable.MVector
                                                        (Control.Monad.Primitive.PrimState m)
                                                        (Graphics.Image.Interface.Pixel
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double)>_R)_R))
                                           `cast`
                                         (<m>_R (Sym (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                    m>_N <Graphics.Image.Interface.Pixel
                                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                                            GHC.Types.Double>_N))
                                      GHC.Types.True
                                      -> (GHC.Err.error
                                            @ 'GHC.Types.LiftedRep
                                            @ (m (Data.Vector.Storable.Mutable.MVector
                                                    (Control.Monad.Primitive.PrimState m)
                                                    (Graphics.Image.Interface.Pixel
                                                       Graphics.Image.ColorSpace.Y.Y
                                                       GHC.Types.Double)))
                                            (GHC.Stack.Types.PushCallStack
                                               (GHC.Base.build
                                                  @ GHC.Types.Char
                                                  (\ @ b ->
                                                   GHC.CString.unpackFoldrCString# @ b "error"#))
                                               (GHC.Stack.Types.SrcLoc
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "Data.Vector.Storable.Mutable"#))
                                                  (GHC.Base.build
                                                     @ GHC.Types.Char
                                                     (\ @ b ->
                                                      GHC.CString.unpackFoldrCString#
                                                        @ b
                                                        "./Data/Vector/Storable/Mutable.hs"#))
                                                  (GHC.Types.I# 126#)
                                                  (GHC.Types.I# 16#)
                                                  (GHC.Types.I# 126#)
                                                  (GHC.Types.I# 79#))
                                               GHC.Stack.Types.EmptyCallStack)
                                              `cast`
                                            (Sym (GHC.Classes.N:IP[0]
                                                      <"callStack">_N
                                                      <GHC.Stack.Types.CallStack>_N))
                                            (GHC.Base.augment
                                               @ GHC.Types.Char
                                               (\ @ b
                                                  (c :: GHC.Types.Char -> b -> b)[OneShot]
                                                  (n2 :: b)[OneShot] ->
                                                GHC.CString.unpackFoldrCString#
                                                  @ b
                                                  "Storable.basicUnsafeNew: length too large: "#
                                                  c
                                                  n2)
                                               (GHC.Show.showSignedInt
                                                  GHC.Show.$fShow(,)1
                                                  n1
                                                  (GHC.Types.[] @ GHC.Types.Char))))
                                           `cast`
                                         (<m>_R (Sym (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                                    m>_N <Graphics.Image.Interface.Pixel
                                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                                            GHC.Types.Double>_N)) }
                                 GHC.Types.True
                                 -> (GHC.Err.error
                                       @ 'GHC.Types.LiftedRep
                                       @ (m (Data.Vector.Storable.Mutable.MVector
                                               (Control.Monad.Primitive.PrimState m)
                                               (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)))
                                       (GHC.Stack.Types.PushCallStack
                                          (GHC.Base.build
                                             @ GHC.Types.Char
                                             (\ @ b ->
                                              GHC.CString.unpackFoldrCString# @ b "error"#))
                                          (GHC.Stack.Types.SrcLoc
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "vector-0.12.0.1-4awQG9XUvVEBfJgKGHBhOb"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "Data.Vector.Storable.Mutable"#))
                                             (GHC.Base.build
                                                @ GHC.Types.Char
                                                (\ @ b ->
                                                 GHC.CString.unpackFoldrCString#
                                                   @ b
                                                   "./Data/Vector/Storable/Mutable.hs"#))
                                             (GHC.Types.I# 125#)
                                             (GHC.Types.I# 15#)
                                             (GHC.Types.I# 125#)
                                             (GHC.Types.I# 77#))
                                          GHC.Stack.Types.EmptyCallStack)
                                         `cast`
                                       (Sym (GHC.Classes.N:IP[0]
                                                 <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                                       (GHC.Base.augment
                                          @ GHC.Types.Char
                                          (\ @ b
                                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                                             (n2 :: b)[OneShot] ->
                                           GHC.CString.unpackFoldrCString#
                                             @ b
                                             "Storable.basicUnsafeNew: negative length: "#
                                             c
                                             n2)
                                          (GHC.Show.showSignedInt
                                             GHC.Show.$fShow(,)1
                                             n1
                                             (GHC.Types.[] @ GHC.Types.Char))))
                                      `cast`
                                    (<m>_R (Sym (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                               m>_N <Graphics.Image.Interface.Pixel
                                                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                                                       GHC.Types.Double>_N)) })
                              (\ (v1 :: Data.Vector.Generic.Base.Mutable
                                          Data.Vector.Storable.Vector
                                          (Control.Monad.Primitive.PrimState m)
                                          (Graphics.Image.Interface.Pixel
                                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                               GHC.Base.>>
                                 @ m
                                 $dMonad1
                                 @ ()
                                 @ (Data.Vector.Generic.Base.Mutable
                                      Data.Vector.Storable.Vector
                                      (Control.Monad.Primitive.PrimState m)
                                      (Graphics.Image.Interface.Pixel
                                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                 (case v1
                                         `cast`
                                       (Sub (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                                           m>_N <Graphics.Image.Interface.Pixel
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double>_N) of wild { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                                  Control.Monad.Primitive.primitive
                                    @ m
                                    $dPrimMonad
                                    @ ()
                                    (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case {__pkg_ccall primitive-0.6.3.0 GHC.Prim.Addr#
                                                                         -> GHC.Prim.Int#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld #)}
                                            dt2
                                            0#
                                            (GHC.Prim.int2Word# (GHC.Prim.*# dt1 8#))
                                            0##
                                            s of wild3 { Unit# ds9 ->
                                     case GHC.Prim.touch#
                                            @ 'GHC.Types.LiftedRep
                                            @ GHC.ForeignPtr.ForeignPtrContents
                                            dt3
                                            ds9 of s' { DEFAULT ->
                                     (# s', GHC.Tuple.() #) } })
                                      `cast`
                                    ((GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                               (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                     ->_R ((#,#)
                                             <'GHC.Types.TupleRep '[]>_R
                                             <'GHC.Types.LiftedRep>_R
                                             (GHC.Prim.State#
                                                (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                                       (UnsafeCo nominal GHC.Types.IO m))_N))_R
                                             <()>_R)_R) })
                                 (GHC.Base.return
                                    @ m
                                    $dMonad1
                                    @ (Data.Vector.Generic.Base.Mutable
                                         Data.Vector.Storable.Vector
                                         (Control.Monad.Primitive.PrimState m)
                                         (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                                    v1)) })) }) -}
eab52d0efd450b5ce45e473cda4f4496
  $s$fArrayVScse_$s$fMArrayVScse_$cread ::
    (GHC.Base.Functor m, Control.Monad.Primitive.PrimMonad m) =>
    Graphics.Image.Interface.MImage
      (Control.Monad.Primitive.PrimState m)
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> (GHC.Types.Int, GHC.Types.Int)
    -> m (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 4, Strictness: <L,A><L,U><L,U(A,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ m :: * -> *
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Graphics.Image.Interface.MImage
                            (Control.Monad.Primitive.PrimState m)
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 Graphics.Image.Interface.Vector.Generic.readVG
                   @ m
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   $dPrimMonad
                   Lib.$s$fArrayVScse_$s$fMVectorMVectora
                     `cast`
                   (Data.Vector.Generic.Mutable.Base.MVector
                      (Sym (Data.Vector.Storable.D:R:MutableVector[0]))
                      <Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_N)_R
                   ds
                     `cast`
                   (Graphics.Image.Interface.Vector.Storable.D:R:MImagesVScse0[0]
                        <Control.Monad.Primitive.PrimState
                           m>_N <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:MImagesVScse[0]
                                                                                             <Control.Monad.Primitive.PrimState
                                                                                                m>_N
                                                                                             <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                             <GHC.Types.Double>_N)) -}
547d0fbfa0de126251960bc7080bb6c1
  $s$fArrayVScse_$s$fMArrayVScse_$cswap ::
    (GHC.Base.Functor m, Control.Monad.Primitive.PrimMonad m) =>
    Graphics.Image.Interface.MImage
      (Control.Monad.Primitive.PrimState m)
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
    -> m ()
  {- Arity: 5, Strictness: <L,A><L,U(U(U,U,U,U,U),U)><L,U(A,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ m :: * -> *
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Graphics.Image.Interface.MImage
                            (Control.Monad.Primitive.PrimState m)
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 Graphics.Image.Interface.Vector.Generic.swapVG
                   @ m
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   $dPrimMonad
                   Lib.$s$fArrayVScse_$s$fMVectorMVectora
                     `cast`
                   (Data.Vector.Generic.Mutable.Base.MVector
                      (Sym (Data.Vector.Storable.D:R:MutableVector[0]))
                      <Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_N)_R
                   ds
                     `cast`
                   (Graphics.Image.Interface.Vector.Storable.D:R:MImagesVScse0[0]
                        <Control.Monad.Primitive.PrimState
                           m>_N <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:MImagesVScse[0]
                                                                                             <Control.Monad.Primitive.PrimState
                                                                                                m>_N
                                                                                             <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                             <GHC.Types.Double>_N)) -}
3cd7565909168542e71d92be1c04257a
  $s$fArrayVScse_$s$fMArrayVScse_$cthaw ::
    (GHC.Base.Functor m, Control.Monad.Primitive.PrimMonad m) =>
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> m (Graphics.Image.Interface.MImage
            (Control.Monad.Primitive.PrimState m)
            Graphics.Image.Interface.Vector.Storable.VS
            Graphics.Image.ColorSpace.Y.Y
            GHC.Types.Double)
  {- Arity: 3,
     Strictness: <L,A><S(S(S(S(C(C(S))L)LLLLL)LLLL)L),U(U(U(U(C(C1(U)),A),A,A,A,A,A),1*C1(C1(U)),C(C1(U)),C(U),A),C(U))><L,1*U(U,U,U(U,U,U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dApplicative
                 } in
                 \ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 GHC.Base.fmap
                   @ m
                   $dFunctor1
                   @ (Graphics.Image.Interface.Vector.Generic.MVGImage
                        (Control.Monad.Primitive.PrimState m)
                        Data.Vector.Storable.Vector
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   @ (Graphics.Image.Interface.MImage
                        (Control.Monad.Primitive.PrimState m)
                        Graphics.Image.Interface.Vector.Storable.VS
                        Graphics.Image.ColorSpace.Y.Y
                        GHC.Types.Double)
                   (\ (v :: Graphics.Image.Interface.Vector.Generic.MVGImage
                              (Control.Monad.Primitive.PrimState m)
                              Data.Vector.Storable.Vector
                              (Graphics.Image.Interface.Pixel
                                 Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                    v)
                     `cast`
                   (<Graphics.Image.Interface.Vector.Generic.MVGImage
                       (Control.Monad.Primitive.PrimState m)
                       Data.Vector.Storable.Vector
                       (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                    ->_R Sym (Graphics.Image.Interface.Vector.Storable.N:R:MImagesVScse[0]
                                  <Control.Monad.Primitive.PrimState m>_N
                                  <Graphics.Image.ColorSpace.Y.Y>_N
                                  <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Vector.Storable.D:R:MImagesVScse0[0]
                                                                   <Control.Monad.Primitive.PrimState
                                                                      m>_N) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)
                   (case ds
                           `cast`
                         (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                   <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                   <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v2 ->
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative
                         @ m
                         (GHC.Base.$p1Monad
                            @ m
                            (Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad)))
                      @ (Data.Vector.Generic.Base.Mutable
                           Data.Vector.Storable.Vector
                           (Control.Monad.Primitive.PrimState m)
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      @ (Graphics.Image.Interface.Vector.Generic.MVGImage
                           (Control.Monad.Primitive.PrimState m)
                           Data.Vector.Storable.Vector
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                      (Graphics.Image.Interface.Vector.Generic.$WMVGImage
                         @ (Control.Monad.Primitive.PrimState m)
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         (GHC.Types.I# dt1)
                         (GHC.Types.I# dt2))
                      (Data.Vector.Generic.thaw
                         @ m
                         @ Data.Vector.Storable.Vector
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         $dPrimMonad
                         Lib.$s$fArrayVScse_$s$fVectorVectora
                         v2) })) -}
1faf4271a6d4cbfee166712c201d1609
  $s$fArrayVScse_$s$fMArrayVScse_$cunsafeIndex ::
    Graphics.Image.Interface.Image
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LSS(LSL)),1*U(A,U,U(A,U,U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Graphics.Image.Interface.Image
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 case ds
                        `cast`
                      (Graphics.Image.Interface.Vector.Storable.D:R:ImageVScse0[0] <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:ImageVScse[0]
                                                                                                                                                <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                                                                                <GHC.Types.Double>_N) of wild { Graphics.Image.Interface.Vector.Generic.VGImage dt1 dt2 v1 ->
                 \ (x :: (GHC.Types.Int, GHC.Types.Int)) ->
                 Data.Vector.Generic.unsafeIndex
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   Lib.$s$fArrayVScse_$s$fVectorVectora
                   v1
                   (case x of wild1 { (,) i j ->
                    case i of wild2 { GHC.Types.I# y ->
                    case j of wild3 { GHC.Types.I# y1 ->
                    GHC.Types.I# (GHC.Prim.+# (GHC.Prim.*# dt2 y) y1) } } }) }) -}
c49ec8b2370555b82e2594a51ae991f3
  $s$fArrayVScse_$s$fMArrayVScse_$cwrite ::
    (GHC.Base.Functor m, Control.Monad.Primitive.PrimMonad m) =>
    Graphics.Image.Interface.MImage
      (Control.Monad.Primitive.PrimState m)
      Graphics.Image.Interface.Vector.Storable.VS
      Graphics.Image.ColorSpace.Y.Y
      GHC.Types.Double
    -> (GHC.Types.Int, GHC.Types.Int)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> m ()
  {- Arity: 5, Strictness: <L,A><L,U><L,U(A,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ m :: * -> *
                   ($dFunctor :: GHC.Base.Functor m)
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Graphics.Image.Interface.MImage
                            (Control.Monad.Primitive.PrimState m)
                            Graphics.Image.Interface.Vector.Storable.VS
                            Graphics.Image.ColorSpace.Y.Y
                            GHC.Types.Double) ->
                 Graphics.Image.Interface.Vector.Generic.writeVG
                   @ m
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   $dPrimMonad
                   Lib.$s$fArrayVScse_$s$fMVectorMVectora
                     `cast`
                   (Data.Vector.Generic.Mutable.Base.MVector
                      (Sym (Data.Vector.Storable.D:R:MutableVector[0]))
                      <Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_N)_R
                   ds
                     `cast`
                   (Graphics.Image.Interface.Vector.Storable.D:R:MImagesVScse0[0]
                        <Control.Monad.Primitive.PrimState
                           m>_N <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N ; Graphics.Image.Interface.Vector.Storable.N:R:MImagesVScse[0]
                                                                                             <Control.Monad.Primitive.PrimState
                                                                                                m>_N
                                                                                             <Graphics.Image.ColorSpace.Y.Y>_N
                                                                                             <GHC.Types.Double>_N)) -}
3e8751dcefdca7affd81ab6ac9585e1f
  $s$fArrayVScse_$s$fMVectorMVectora ::
    Data.Vector.Generic.Mutable.Base.MVector
      Data.Vector.Storable.Mutable.MVector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Storable.Mutable.MVector
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicLength
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeSlice
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicOverlaps
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeNew
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (\ @ m :: * -> *
                     ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                   Data.Vector.Storable.Mutable.storableZero
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     @ m
                     Lib.$s$fArrayVScse_$s$fStorablePixel
                     $dPrimMonad)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeReplicate
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeRead
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeWrite
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicClear
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (\ @ m :: * -> *
                     ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                   Data.Vector.Storable.Mutable.storableSet
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     @ m
                     Lib.$s$fArrayVScse_$s$fStorablePixel
                     $dPrimMonad)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeCopy
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeMove
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel)
                  (Data.Vector.Storable.Mutable.$fMVectorMVectora_$cbasicUnsafeGrow
                     @ (Graphics.Image.Interface.Pixel
                          Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                     Lib.$s$fArrayVScse_$s$fStorablePixel) -}
645bea1767320f6da905770094ec0009
  $s$fArrayVScse_$s$fStorablePixel ::
    Foreign.Storable.Storable
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayVScse_$s$fStorablePixel_$csizeOf
                  Lib.$s$fArrayVScse_$s$fStorablePixel_$calignment
                  (Graphics.Image.ColorSpace.Y.$fStorablePixel3
                     @ GHC.Types.Double
                     Foreign.Storable.$fStorableDouble)
                    `cast`
                  (<GHC.Ptr.Ptr
                      (Graphics.Image.Interface.Pixel
                         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R))
                  (Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff
                     @ GHC.Types.Double
                     Foreign.Storable.$fStorableDouble)
                  (\ @ b
                     (ptr :: GHC.Ptr.Ptr b)
                     (off :: GHC.Types.Int)
                     (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case ptr of wild { GHC.Ptr.Ptr addr ->
                   case off of wild1 { GHC.Types.I# d ->
                   case GHC.Prim.readDoubleOffAddr#
                          @ GHC.Prim.RealWorld
                          (GHC.Prim.plusAddr# addr d)
                          0#
                          eta of ds2 { (#,#) ipv ipv1 ->
                   (# ipv,
                      (GHC.Types.D# ipv1)
                        `cast`
                      (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) #) } } })
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Ptr.Ptr b>_R
                   ->_R <GHC.Types.Int>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Graphics.Image.Interface.Pixel
                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R))
                  (\ @ b
                     (ptr :: GHC.Ptr.Ptr b)
                     (off :: GHC.Types.Int)
                     (eta :: Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                   case ptr of wild { GHC.Ptr.Ptr addr ->
                   case off of wild1 { GHC.Types.I# d ->
                   (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case eta
                           `cast`
                         (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                                 <GHC.Types.Double>_N) of wild2 { GHC.Types.D# x ->
                    case GHC.Prim.writeDoubleOffAddr#
                           @ GHC.Prim.RealWorld
                           (GHC.Prim.plusAddr# addr d)
                           0#
                           x
                           eta1 of s2 { DEFAULT ->
                    (# s2, GHC.Tuple.() #) } })
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <()>_R)) } })
                  Lib.$s$fArrayVScse_$s$fStorablePixel_$cpeek
                  Lib.$s$fArrayVScse_$s$fStorablePixel_$cpoke -}
9311c4ee643fffbbc9daf78bd00cfcc0
  $s$fArrayVScse_$s$fStorablePixel_$calignment ::
    Graphics.Image.Interface.Pixel
      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 Foreign.Storable.$fStorableDouble5) -}
8f4efd192a5bd9945a4356d7713aee7d
  $s$fArrayVScse_$s$fStorablePixel_$cpeek ::
    GHC.Ptr.Ptr
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.IO
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (p :: GHC.Ptr.Ptr
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case p of p1 { GHC.Ptr.Ptr ipv ->
                 (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case GHC.Prim.readDoubleOffAddr#
                         @ GHC.Prim.RealWorld
                         ipv
                         0#
                         s of ds2 { (#,#) ipv1 ipv2 ->
                  (# ipv1,
                     (GHC.Types.D# ipv2)
                       `cast`
                     (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                               <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) #) })
                   `cast`
                 (Sym (GHC.Types.N:IO[0]
                           <Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_R)) }) -}
6069fdc58aac5f0d1bb7daff58266cbb
  $s$fArrayVScse_$s$fStorablePixel_$cpoke ::
    GHC.Ptr.Ptr
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (p :: GHC.Ptr.Ptr
                           (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case p of p1 { GHC.Ptr.Ptr ipv ->
                 (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case ds
                         `cast`
                       (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                               <GHC.Types.Double>_N) of wild2 { GHC.Types.D# x ->
                  case GHC.Prim.writeDoubleOffAddr#
                         @ GHC.Prim.RealWorld
                         ipv
                         0#
                         x
                         eta of s2 { DEFAULT ->
                  (# s2, GHC.Tuple.() #) } })
                   `cast`
                 (Sym (GHC.Types.N:IO[0] <()>_R)) }) -}
2ea959f8545728effdcbef2ab23e9b73
  $s$fArrayVScse_$s$fStorablePixel_$csizeOf ::
    Graphics.Image.Interface.Pixel
      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ (ds :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 Foreign.Storable.$fStorableDouble5) -}
bb4cd0b879e33eafdeb3e9f1ddc0781e
  $s$fArrayVScse_$s$fVectorVectora ::
    Data.Vector.Generic.Base.Vector
      Data.Vector.Storable.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Data.Vector.Storable.Vector
                  @ (Graphics.Image.Interface.Pixel
                       Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                  Lib.$s$fArrayVScse_$s$fMVectorMVectora
                    `cast`
                  (Data.Vector.Generic.Mutable.Base.MVector
                     (Sym (Data.Vector.Storable.D:R:MutableVector[0]))
                     <Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double>_N)_R
                  Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeFreeze
                  Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeThaw
                  Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicLength
                  Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeSlice
                  Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeIndexM
                  Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeCopy
                  Lib.$s$fArrayVScse_$s$fVectorVectora_$celemseq -}
dcc0c3f70f7bd208215e089cde8964dd
  $s$fArrayVScse_$s$fVectorVectora_$cbasicLength ::
    Data.Vector.Storable.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(U,A,A)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (ds :: Data.Vector.Storable.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds of wild { Data.Vector.Storable.Vector dt1 dt2 dt3 ->
                 GHC.Types.I# dt1 }) -}
4d08bb178233d73b75f35117609338ea
  $s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeCopy ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Storable.Vector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Storable.Vector
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S,1*U(U,U,U)><S,1*U(A,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m)
                   (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Storable.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (ds1 :: Data.Vector.Storable.Vector
                             (Graphics.Image.Interface.Pixel
                                Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Sub (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                          m>_N <Graphics.Image.Interface.Pixel
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double>_N) of wild { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                 case ds1 of wild1 { Data.Vector.Storable.Vector dt4 dt5 dt6 ->
                 Control.Monad.Primitive.primitive
                   @ m
                   $dPrimMonad
                   @ ()
                   (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case {__pkg_ccall base-4.11.1.0 GHC.Prim.Addr#
                                                    -> GHC.Prim.Addr#
                                                    -> GHC.Prim.Word#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Addr# #)}
                           dt2
                           dt5
                           (GHC.Prim.int2Word# (GHC.Prim.*# dt1 8#))
                           s of wild3 { (#,#) ds4 ds5 ->
                    case GHC.Prim.touch#
                           @ 'GHC.Types.LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt6
                           ds4 of s' { DEFAULT ->
                    case GHC.Prim.touch#
                           @ 'GHC.Types.LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt3
                           s' of s'1 { DEFAULT ->
                    (# s'1, GHC.Tuple.() #) } } })
                     `cast`
                   ((GHC.Prim.State#
                       (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                              (UnsafeCo nominal GHC.Types.IO m))_N))_R
                    ->_R ((#,#)
                            <'GHC.Types.TupleRep '[]>_R
                            <'GHC.Types.LiftedRep>_R
                            (GHC.Prim.State#
                               (Sym (Control.Monad.Primitive.D:R:PrimStateIO[0]) ; (Control.Monad.Primitive.PrimState
                                                                                      (UnsafeCo nominal GHC.Types.IO m))_N))_R
                            <()>_R)_R) } }) -}
1b7d3150803360bd8196fee29657c6ce
  $s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeFreeze ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Generic.Base.Mutable
      Data.Vector.Storable.Vector
      (Control.Monad.Primitive.PrimState m)
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m (Data.Vector.Storable.Vector
            (Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><S,1*U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Generic.Base.Mutable
                            Data.Vector.Storable.Vector
                            (Control.Monad.Primitive.PrimState m)
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds
                        `cast`
                      (Sub (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                          m>_N <Graphics.Image.Interface.Pixel
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double>_N) of wild { Data.Vector.Storable.Mutable.MVector dt1 dt2 dt3 ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ (Data.Vector.Storable.Vector
                        (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (Data.Vector.Storable.$WVector
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      (GHC.Types.I# dt1)
                      (GHC.ForeignPtr.ForeignPtr
                         @ (Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                         dt2
                         dt3)) }) -}
2e9347aee991d493ac9f7c4d914905f3
  $s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeIndexM ::
    GHC.Base.Monad m =>
    Data.Vector.Storable.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> m (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S,1*U(A,U,U)><L,1*U(U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (ds :: Data.Vector.Storable.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (i :: GHC.Types.Int) ->
                 case ds of wild { Data.Vector.Storable.Vector dt1 dt2 dt3 ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (case Graphics.Image.ColorSpace.Y.$fStorablePixel3
                           @ GHC.Types.Double
                           Foreign.Storable.$fStorableDouble
                           (GHC.Ptr.Ptr
                              @ (Graphics.Image.Interface.Pixel
                                   Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                              dt2)
                           i
                           GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                    case GHC.Prim.touch#
                           @ 'GHC.Types.LiftedRep
                           @ GHC.ForeignPtr.ForeignPtrContents
                           dt3
                           ipv of s' { DEFAULT ->
                    ipv1 } }) }) -}
03eadaf0e73142fe8dd11411c241f16b
  $s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeSlice ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Data.Vector.Storable.Vector
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Data.Vector.Storable.Vector
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(LSL),1*U(A,U,U)>m,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ (i :: GHC.Types.Int)
                   (n :: GHC.Types.Int)
                   (ds :: Data.Vector.Storable.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds of wild { Data.Vector.Storable.Vector dt1 dt2 dt3 ->
                 case i of wild1 { GHC.Types.I# x ->
                 Data.Vector.Storable.$WVector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   n
                   (GHC.ForeignPtr.ForeignPtr
                      @ (Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                      (GHC.Prim.plusAddr# dt2 (GHC.Prim.*# x 8#))
                      dt3) } }) -}
c18443264dac562cdb934428199b83c2
  $s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeThaw ::
    Control.Monad.Primitive.PrimMonad m =>
    Data.Vector.Storable.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> m (Data.Vector.Generic.Base.Mutable
            Data.Vector.Storable.Vector
            (Control.Monad.Primitive.PrimState m)
            (Graphics.Image.Interface.Pixel
               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLC(S)L)L),1*U(1*U(A,A,A,1*C1(U),A),A)><S,1*U(U,U,U)>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ m :: * -> *
                   ($dPrimMonad :: Control.Monad.Primitive.PrimMonad m) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Primitive.$p1PrimMonad @ m $dPrimMonad
                 } in
                 \ (ds :: Data.Vector.Storable.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)) ->
                 case ds of wild { Data.Vector.Storable.Vector dt1 dt2 dt3 ->
                 (GHC.Base.return
                    @ m
                    $dMonad
                    @ (Data.Vector.Storable.Mutable.MVector
                         (Control.Monad.Primitive.PrimState m)
                         (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                    (Data.Vector.Storable.Mutable.$WMVector
                       @ (Control.Monad.Primitive.PrimState m)
                       @ (Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                       (GHC.Types.I# dt1)
                       (GHC.ForeignPtr.ForeignPtr
                          @ (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                          dt2
                          dt3)))
                   `cast`
                 (<m>_R (Sym (Data.Vector.Storable.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                            m>_N <Graphics.Image.Interface.Pixel
                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                    GHC.Types.Double>_N)) }) -}
a72855d2c7abc06f5a21c42b358da287
  $s$fArrayVScse_$s$fVectorVectora_$celemseq ::
    Data.Vector.Storable.Vector
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> b
    -> b
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><S,1*H><S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ b
                   (ds :: Data.Vector.Storable.Vector
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (v :: Graphics.Image.Interface.Pixel
                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   (v1 :: b) ->
                 case v `cast`
                      (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                              <GHC.Types.Double>_N) of nt { GHC.Types.D# ipv ->
                 v1 }) -}
2539392dfee5754154e136e9ac8ffe68
  $s$fColorSpaceYe_$ctoListPx ::
    Graphics.Image.Interface.Pixel
      Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> [GHC.Types.Double]
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: InlineRule (1, True, True)
                (Graphics.Image.ColorSpace.Y.$w$ctoListPx1 @ GHC.Types.Double) -}
b91db4db8fc9c662fbfb9573f1f19598
  $s$fStorablePixel1 ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 case GHC.Prim.readDoubleOffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# addr d)
                        0#
                        eta of ds2 { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Types.D# ipv1)
                      `cast`
                    (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                              <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) #) } } }) -}
43893d5b75911730ba648eff34a51636
  $s$fStorablePixel3 ::
    GHC.Ptr.Ptr
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Ptr.Ptr
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (w2 :: GHC.Types.Int)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { GHC.Ptr.Ptr ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 case GHC.Prim.readDoubleOffAddr#
                        @ GHC.Prim.RealWorld
                        (GHC.Prim.plusAddr# ww1 (GHC.Prim.*# ww3 8#))
                        0#
                        w3 of ds2 { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Types.D# ipv1)
                      `cast`
                    (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                              <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) #) } } }) -}
1f02ffa7db646da5d502f85c657d656c
  $s$fStorablePixel_$cpokeByteOff ::
    GHC.Ptr.Ptr b
    -> GHC.Types.Int
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   (ptr :: GHC.Ptr.Ptr b)
                   (off :: GHC.Types.Int)
                   (eta :: Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case ptr of wild { GHC.Ptr.Ptr addr ->
                 case off of wild1 { GHC.Types.I# d ->
                 (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case eta
                         `cast`
                       (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                               <GHC.Types.Double>_N) of wild2 { GHC.Types.D# x ->
                  case GHC.Prim.writeDoubleOffAddr#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# addr d)
                         0#
                         x
                         eta1 of s2 { DEFAULT ->
                  (# s2, GHC.Tuple.() #) } })
                   `cast`
                 (Sym (GHC.Types.N:IO[0] <()>_R)) } }) -}
1c1fe39621536259222f12b8a9495f16
  $s$fStorablePixel_$cpokeElemOff ::
    GHC.Ptr.Ptr
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
    -> GHC.Types.Int
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
    -> GHC.Types.IO ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w1 :: GHC.Ptr.Ptr
                            (Graphics.Image.Interface.Pixel
                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double))
                   (w2 :: GHC.Types.Int)
                   (w3 :: Graphics.Image.Interface.Pixel
                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double) ->
                 case w1 of ww { GHC.Ptr.Ptr ww1 ->
                 case w2 of ww2 { GHC.Types.I# ww3 ->
                 (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case w3
                         `cast`
                       (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0] <GHC.Types.Double>_N ; Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                                                                                               <GHC.Types.Double>_N) of wild2 { GHC.Types.D# x ->
                  case GHC.Prim.writeDoubleOffAddr#
                         @ GHC.Prim.RealWorld
                         (GHC.Prim.plusAddr# ww1 (GHC.Prim.*# ww3 8#))
                         0#
                         x
                         eta of s2 { DEFAULT ->
                  (# s2, GHC.Tuple.() #) } })
                   `cast`
                 (Sym (GHC.Types.N:IO[0] <()>_R)) } }) -}
982f878b5f4d9452709d56cb5d3a0783
  $sfromListsVG ::
    [[Graphics.Image.Interface.Pixel
        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]]
    -> Graphics.Image.Interface.Vector.Generic.VGImage
         Data.Vector.Storable.Vector
         (Graphics.Image.Interface.Pixel
            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- Arity: 1, Strictness: <S,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: [[Graphics.Image.Interface.Pixel
                              Graphics.Image.ColorSpace.Y.Y GHC.Types.Double]]) ->
                 case Graphics.Image.Interface.Vector.Generic.$wfromListsVG
                        @ Data.Vector.Storable.Vector
                        @ (Graphics.Image.Interface.Pixel
                             Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                        Lib.$s$fArrayVScse_$s$fVectorVectora
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Graphics.Image.Interface.Vector.Generic.VGImage
                   @ Data.Vector.Storable.Vector
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   ww1
                   ww2
                   ww3 }) -}
20e8cc1fa122520a07bdad50b416ccaa
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
8d2e26d78fbb0a691128e480fb869b33
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
8c538c6b3494624091641f07241086a5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
e137dae345cbb187caafba1231227029
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
bdbd77c355de1c186158c8dbfa1e5ac1
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("image-triangles-0.1.0.0-BiEiu2CzRvH4EcZBOTYVL9"#) -}
e6c8901730128e4c909b8e3c05c8b691
  displayGradGrayImage :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Lib.displayGradGrayImage1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <()>_R)) -}
256a36ffb675db5dd49d6a591c754272
  displayGradGrayImage1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (Graphics.Image.IO.displayImage2
                   @ Graphics.Image.ColorSpace.Y.Y
                   @ GHC.Types.Double
                   @ Graphics.Image.Interface.Repa.Unboxed.RPU
                   Lib.$s$fArrayVScse
                   Lib.$s$fArrayRPUcse
                   Graphics.Image.IO.Formats.JuicyPixels.$fWritableImageTIF4
                   Graphics.Image.IO.defaultViewer
                   GHC.Types.False
                   Lib.displayGradGrayImage2
                     `cast`
                   (Sym (Graphics.Image.Interface.Repa.Unboxed.N:R:ImageRPUcse[0]
                             <Graphics.Image.ColorSpace.Y.Y>_N
                             <GHC.Types.Double>_N) ; Sym (Graphics.Image.Interface.Repa.Unboxed.D:R:ImageRPUcse0[0]) <Graphics.Image.ColorSpace.Y.Y>_N <GHC.Types.Double>_N)) -}
86dce557a6839af862907d5dda405957
  displayGradGrayImage2 ::
    Graphics.Image.Interface.Repa.Generic.RImage
      Data.Array.Repa.Repr.Unboxed.U
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Graphics.Image.Interface.Repa.Generic.RDImage
                   @ Data.Array.Repa.Repr.Unboxed.U
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   Lib.displayGradGrayImage3
                     `cast`
                   (Sym (Data.Array.Repa.Repr.Delayed.D:R:ArrayDsha0[0]) <Data.Array.Repa.Index.DIM2>_N <Graphics.Image.Interface.Pixel
                                                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                                                           GHC.Types.Double>_N)) -}
8405c3ee43c108edbfdeb83330786cc4
  displayGradGrayImage3 ::
    Data.Array.Repa.Repr.Delayed.R:ArrayDsha
      Data.Array.Repa.Index.DIM2
      (Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Array.Repa.Repr.Delayed.ADelayed
                   @ Data.Array.Repa.Index.DIM2
                   @ (Graphics.Image.Interface.Pixel
                        Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                   Lib.displayGradGrayImage5
                   Lib.displayGradGrayImage4) -}
9a8771a0df5b758159cbf3ce2be2f381
  displayGradGrayImage4 ::
    Data.Array.Repa.Index.DIM2
    -> Graphics.Image.Interface.Pixel
         Graphics.Image.ColorSpace.Y.Y GHC.Types.Double
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS(S))S(S)),1*U(U(A,U(U)),U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Array.Repa.Index.DIM2) ->
                 case x of wild1 { Data.Array.Repa.Index.:. sh1' sh2' ->
                 case sh1' of wild2 { Data.Array.Repa.Index.:. sh1'1 sh2'1 ->
                 case sh2'1 of wild4 { GHC.Types.I# y1 ->
                 case sh2' of wild3 { GHC.Types.I# y2 ->
                 let {
                   x1 :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.*# y1 200#) y2
                 } in
                 (GHC.Types.D#
                    (GHC.Prim./##
                       (GHC.Prim.int2Double#
                          (GHC.Prim.*#
                             (GHC.Prim.quotInt# x1 200#)
                             (GHC.Prim.remInt# x1 200#)))
                       40000.0##))
                   `cast`
                 (Sym (Graphics.Image.ColorSpace.Y.N:R:PixelYe[0]
                           <GHC.Types.Double>_N) ; Sym (Graphics.Image.ColorSpace.Y.D:R:PixelYe0[0]) <GHC.Types.Double>_N) } } } }) -}
c9d5ad7b09a9c8d0eba38a99c5d9c352
  displayGradGrayImage5 ::
    (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
    Data.Array.Repa.Index.:. GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Array.Repa.Index.:.
                   @ (Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int)
                   @ GHC.Types.Int
                   Lib.displayGradGrayImage6
                   Lib.displayGradGrayImage_ipv1) -}
c87b314d507807be448f3e6a74909c35
  displayGradGrayImage6 ::
    Data.Array.Repa.Index.Z Data.Array.Repa.Index.:. GHC.Types.Int
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Data.Array.Repa.Index.:.
                   @ Data.Array.Repa.Index.Z
                   @ GHC.Types.Int
                   Data.Array.Repa.Index.Z
                   Lib.displayGradGrayImage_ipv1) -}
ef73e94bd958ab5f2933f6896f12a622
  displayGradGrayImage_ipv1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 200#) -}
"SPEC/Lib $fArrayRPUcse @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.BaseArray
                                                              Graphics.Image.Interface.Repa.Unboxed.RPU
                                                              Graphics.Image.ColorSpace.Y.Y
                                                              GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse @ Graphics.Image.ColorSpace.Y.Y
                                                      @ GHC.Types.Double
                                                      v
  = Lib.$s$fArrayRPUcse
"SPEC/Lib $fArrayRPUcse_$cbackpermute @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                      Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                      GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cbackpermute @ Graphics.Image.ColorSpace.Y.Y
                                                                    @ GHC.Types.Double
                                                                    $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cbackpermute
"SPEC/Lib $fArrayRPUcse_$ccompute @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                  Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$ccompute @ Graphics.Image.ColorSpace.Y.Y
                                                                @ GHC.Types.Double
                                                                $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ccompute
"SPEC/Lib $fArrayRPUcse_$ceq @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                             Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                             GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$ceq @ Graphics.Image.ColorSpace.Y.Y
                                                           @ GHC.Types.Double
                                                           $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ceq
"SPEC/Lib $fArrayRPUcse_$cfold @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                               Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cfold @ Graphics.Image.ColorSpace.Y.Y
                                                             @ GHC.Types.Double
                                                             $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cfold
"SPEC/Lib $fArrayRPUcse_$cfoldIx @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                 Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cfoldIx @ Graphics.Image.ColorSpace.Y.Y
                                                               @ GHC.Types.Double
                                                               $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cfoldIx
"SPEC/Lib $fArrayRPUcse_$cfromVector @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                     Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                     GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cfromVector @ Graphics.Image.ColorSpace.Y.Y
                                                                   @ GHC.Types.Double
                                                                   $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cfromVector
"SPEC/Lib $fArrayRPUcse_$cimap @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                               Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cimap @ Graphics.Image.ColorSpace.Y.Y
                                                             @ GHC.Types.Double
                                                             $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cimap
"SPEC/Lib $fArrayRPUcse_$cindex00 @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                  Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cindex00 @ Graphics.Image.ColorSpace.Y.Y
                                                                @ GHC.Types.Double
                                                                $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cindex00
"SPEC/Lib $fArrayRPUcse_$cizipWith @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                   Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cizipWith @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cizipWith
"SPEC/Lib $fArrayRPUcse_$cmakeImage @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                    Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                    GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cmakeImage @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cmakeImage
"SPEC/Lib $fArrayRPUcse_$cmakeImageWindowed @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                            Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                            GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cmakeImageWindowed @ Graphics.Image.ColorSpace.Y.Y
                                                                          @ GHC.Types.Double
                                                                          $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cmakeImageWindowed
"SPEC/Lib $fArrayRPUcse_$cmap @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                              Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$cmap @ Graphics.Image.ColorSpace.Y.Y
                                                            @ GHC.Types.Double
                                                            $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$cmap
"SPEC/Lib $fArrayRPUcse_$ctoManifest @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                     Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                     GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$ctoManifest @ Graphics.Image.ColorSpace.Y.Y
                                                                   @ GHC.Types.Double
                                                                   $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctoManifest
"SPEC/Lib $fArrayRPUcse_$ctoVector @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                   Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$ctoVector @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctoVector
"SPEC/Lib $fArrayRPUcse_$ctranspose @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                    Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                    GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$ctranspose @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctranspose
"SPEC/Lib $fArrayRPUcse_$ctraverse @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                   Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$ctraverse @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctraverse
"SPEC/Lib $fArrayRPUcse_$ctraverse2 @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                    Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                    GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$ctraverse2 @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$ctraverse2
"SPEC/Lib $fArrayRPUcse_$czipWith @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                  Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$czipWith @ Graphics.Image.ColorSpace.Y.Y
                                                                @ GHC.Types.Double
                                                                $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$czipWith
"SPEC/Lib $fArrayRPUcse_$c|*| @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                              Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fArrayRPUcse_$c|*| @ Graphics.Image.ColorSpace.Y.Y
                                                            @ GHC.Types.Double
                                                            $dBaseArray
  = Lib.$s$fArrayRPUcse_$s$fArrayRPUcse_$c|*|
"SPEC/Lib $fArrayVScse @ Y @ Double" [orphan] forall (v1 :: Graphics.Image.Interface.BaseArray
                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                              Graphics.Image.ColorSpace.Y.Y
                                                              GHC.Types.Double)
                                                     (v :: Graphics.Image.Interface.MArray
                                                             Graphics.Image.Interface.Vector.Storable.VS
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse @ Graphics.Image.ColorSpace.Y.Y
                                                        @ GHC.Types.Double
                                                        v
                                                        v1
  = Lib.$s$fArrayVScse
"SPEC/Lib $fArrayVScse_$cbackpermute @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                     Graphics.Image.Interface.Vector.Storable.VS
                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                     GHC.Types.Double)
                                                                   ($dMArray :: Graphics.Image.Interface.MArray
                                                                                  Graphics.Image.Interface.Vector.Storable.VS
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cbackpermute @ Graphics.Image.ColorSpace.Y.Y
                                                                      @ GHC.Types.Double
                                                                      $dMArray
                                                                      $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cbackpermute
"SPEC/Lib $fArrayVScse_$ccompute @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                 Graphics.Image.Interface.Vector.Storable.VS
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double)
                                                               ($dMArray :: Graphics.Image.Interface.MArray
                                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$ccompute @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dMArray
                                                                  $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$ccompute
"SPEC/Lib $fArrayVScse_$ceq @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                            Graphics.Image.Interface.Vector.Storable.VS
                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                            GHC.Types.Double)
                                                          ($dMArray :: Graphics.Image.Interface.MArray
                                                                         Graphics.Image.Interface.Vector.Storable.VS
                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                         GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$ceq @ Graphics.Image.ColorSpace.Y.Y
                                                             @ GHC.Types.Double
                                                             $dMArray
                                                             $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$ceq
"SPEC/Lib $fArrayVScse_$cfold @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
                                                            ($dMArray :: Graphics.Image.Interface.MArray
                                                                           Graphics.Image.Interface.Vector.Storable.VS
                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                           GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cfold @ Graphics.Image.ColorSpace.Y.Y
                                                               @ GHC.Types.Double
                                                               $dMArray
                                                               $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cfold
"SPEC/Lib $fArrayVScse_$cfoldIx @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
                                                              ($dMArray :: Graphics.Image.Interface.MArray
                                                                             Graphics.Image.Interface.Vector.Storable.VS
                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                             GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cfoldIx @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dMArray
                                                                 $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cfoldIx
"SPEC/Lib $fArrayVScse_$cfromVector @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                    Graphics.Image.Interface.Vector.Storable.VS
                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                    GHC.Types.Double)
                                                                  ($dMArray :: Graphics.Image.Interface.MArray
                                                                                 Graphics.Image.Interface.Vector.Storable.VS
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cfromVector @ Graphics.Image.ColorSpace.Y.Y
                                                                     @ GHC.Types.Double
                                                                     $dMArray
                                                                     $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cfromVector
"SPEC/Lib $fArrayVScse_$cimap @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
                                                            ($dMArray :: Graphics.Image.Interface.MArray
                                                                           Graphics.Image.Interface.Vector.Storable.VS
                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                           GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cimap @ Graphics.Image.ColorSpace.Y.Y
                                                               @ GHC.Types.Double
                                                               $dMArray
                                                               $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cimap
"SPEC/Lib $fArrayVScse_$cindex00 @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                 Graphics.Image.Interface.Vector.Storable.VS
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double)
                                                               ($dMArray :: Graphics.Image.Interface.MArray
                                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cindex00 @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dMArray
                                                                  $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cindex00
"SPEC/Lib $fArrayVScse_$cizipWith @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                  Graphics.Image.Interface.Vector.Storable.VS
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double)
                                                                ($dMArray :: Graphics.Image.Interface.MArray
                                                                               Graphics.Image.Interface.Vector.Storable.VS
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cizipWith @ Graphics.Image.ColorSpace.Y.Y
                                                                   @ GHC.Types.Double
                                                                   $dMArray
                                                                   $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cizipWith
"SPEC/Lib $fArrayVScse_$cmakeImage @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                   Graphics.Image.Interface.Vector.Storable.VS
                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                   GHC.Types.Double)
                                                                 ($dMArray :: Graphics.Image.Interface.MArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cmakeImage @ Graphics.Image.ColorSpace.Y.Y
                                                                    @ GHC.Types.Double
                                                                    $dMArray
                                                                    $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cmakeImage
"SPEC/Lib $fArrayVScse_$cmakeImageWindowed @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                           Graphics.Image.Interface.Vector.Storable.VS
                                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                                           GHC.Types.Double)
                                                                         ($dMArray :: Graphics.Image.Interface.MArray
                                                                                        Graphics.Image.Interface.Vector.Storable.VS
                                                                                        Graphics.Image.ColorSpace.Y.Y
                                                                                        GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cmakeImageWindowed @ Graphics.Image.ColorSpace.Y.Y
                                                                            @ GHC.Types.Double
                                                                            $dMArray
                                                                            $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cmakeImageWindowed
"SPEC/Lib $fArrayVScse_$cmap @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                             Graphics.Image.Interface.Vector.Storable.VS
                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                             GHC.Types.Double)
                                                           ($dMArray :: Graphics.Image.Interface.MArray
                                                                          Graphics.Image.Interface.Vector.Storable.VS
                                                                          Graphics.Image.ColorSpace.Y.Y
                                                                          GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$cmap @ Graphics.Image.ColorSpace.Y.Y
                                                              @ GHC.Types.Double
                                                              $dMArray
                                                              $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$cmap
"SPEC/Lib $fArrayVScse_$ctoVector @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                  Graphics.Image.Interface.Vector.Storable.VS
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double)
                                                                ($dMArray :: Graphics.Image.Interface.MArray
                                                                               Graphics.Image.Interface.Vector.Storable.VS
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$ctoVector @ Graphics.Image.ColorSpace.Y.Y
                                                                   @ GHC.Types.Double
                                                                   $dMArray
                                                                   $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$ctoVector
"SPEC/Lib $fArrayVScse_$ctranspose @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                   Graphics.Image.Interface.Vector.Storable.VS
                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                   GHC.Types.Double)
                                                                 ($dMArray :: Graphics.Image.Interface.MArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$ctranspose @ Graphics.Image.ColorSpace.Y.Y
                                                                    @ GHC.Types.Double
                                                                    $dMArray
                                                                    $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$ctranspose
"SPEC/Lib $fArrayVScse_$ctraverse @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                  Graphics.Image.Interface.Vector.Storable.VS
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double)
                                                                ($dMArray :: Graphics.Image.Interface.MArray
                                                                               Graphics.Image.Interface.Vector.Storable.VS
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$ctraverse @ Graphics.Image.ColorSpace.Y.Y
                                                                   @ GHC.Types.Double
                                                                   $dMArray
                                                                   $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$ctraverse
"SPEC/Lib $fArrayVScse_$ctraverse2 @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                   Graphics.Image.Interface.Vector.Storable.VS
                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                   GHC.Types.Double)
                                                                 ($dMArray :: Graphics.Image.Interface.MArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$ctraverse2 @ Graphics.Image.ColorSpace.Y.Y
                                                                    @ GHC.Types.Double
                                                                    $dMArray
                                                                    $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$ctraverse2
"SPEC/Lib $fArrayVScse_$czipWith @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                 Graphics.Image.Interface.Vector.Storable.VS
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double)
                                                               ($dMArray :: Graphics.Image.Interface.MArray
                                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$czipWith @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dMArray
                                                                  $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$czipWith
"SPEC/Lib $fArrayVScse_$c|*| @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                             Graphics.Image.Interface.Vector.Storable.VS
                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                             GHC.Types.Double)
                                                           ($dMArray :: Graphics.Image.Interface.MArray
                                                                          Graphics.Image.Interface.Vector.Storable.VS
                                                                          Graphics.Image.ColorSpace.Y.Y
                                                                          GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fArrayVScse_$c|*| @ Graphics.Image.ColorSpace.Y.Y
                                                              @ GHC.Types.Double
                                                              $dMArray
                                                              $dBaseArray
  = Lib.$s$fArrayVScse_$s$fArrayVScse_$c|*|
"SPEC/Lib $fBaseArrayRPUcse @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.SuperClass
                                                                  Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                  GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fBaseArrayRPUcse @ Graphics.Image.ColorSpace.Y.Y
                                                          @ GHC.Types.Double
                                                          v
  = Lib.$s$fArrayRPUcse_$s$fBaseArrayRPUcse
"SPEC/Lib $fBaseArrayRPUcse_$cdims @ Y @ Double" [orphan] forall (irred :: Graphics.Image.Interface.SuperClass
                                                                             Graphics.Image.Interface.Repa.Unboxed.RPU
                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                             GHC.Types.Double)
  Graphics.Image.Interface.Repa.Unboxed.$fBaseArrayRPUcse_$cdims @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 irred
  = Lib.$s$fArrayRPUcse_$s$fBaseArrayRPUcse_$cdims
"SPEC/Lib $fBaseArrayVScse @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.SuperClass
                                                                 Graphics.Image.Interface.Vector.Storable.VS
                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fBaseArrayVScse @ Graphics.Image.ColorSpace.Y.Y
                                                            @ GHC.Types.Double
                                                            v
  = Lib.$s$fArrayVScse_$s$fBaseArrayVScse
"SPEC/Lib $fBaseArrayVScse_$cdims @ Y @ Double" [orphan] forall (irred :: Graphics.Image.Interface.SuperClass
                                                                            Graphics.Image.Interface.Vector.Storable.VS
                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                            GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fBaseArrayVScse_$cdims @ Graphics.Image.ColorSpace.Y.Y
                                                                   @ GHC.Types.Double
                                                                   irred
  = Lib.$s$fArrayVScse_$s$fBaseArrayVScse_$cdims
"SPEC/Lib $fColorSpaceYe @ Double" [orphan] forall (v :: Graphics.Image.Interface.Elevator.Elevator
                                                           GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fColorSpaceYe @ GHC.Types.Double v
  = Lib.$s$fArrayRPUcse_$s$fColorSpaceYe
"SPEC/Lib $fColorSpaceYe_$cfoldlPx2 @ Double" [orphan] forall ($dElevator :: Graphics.Image.Interface.Elevator.Elevator
                                                                               GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cfoldlPx2 @ GHC.Types.Double
                                                        $dElevator
  = Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$cfoldlPx2
"SPEC/Lib $fColorSpaceYe_$cgetPxC @ Double" [orphan] forall ($dElevator :: Graphics.Image.Interface.Elevator.Elevator
                                                                             GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cgetPxC @ GHC.Types.Double
                                                      $dElevator
  = Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$cgetPxC
"SPEC/Lib $fColorSpaceYe_$cmapPxC @ Double" [orphan] forall ($dElevator :: Graphics.Image.Interface.Elevator.Elevator
                                                                             GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$cmapPxC @ GHC.Types.Double
                                                      $dElevator
  = Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$cmapPxC
"SPEC/Lib $fColorSpaceYe_$csetPxC @ Double" [orphan] forall ($dElevator :: Graphics.Image.Interface.Elevator.Elevator
                                                                             GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$csetPxC @ GHC.Types.Double
                                                      $dElevator
  = Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$csetPxC
"SPEC/Lib $fColorSpaceYe_$ctoComponents @ Double" [orphan] forall ($dElevator :: Graphics.Image.Interface.Elevator.Elevator
                                                                                   GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$ctoComponents @ GHC.Types.Double
                                                            $dElevator
  = Lib.$s$fArrayRPUcse_$s$fColorSpaceYe_$ctoComponents
"SPEC/Lib $fColorSpaceYe_$ctoListPx @ Double" [orphan] [0] forall (w :: Graphics.Image.Interface.Elevator.Elevator
                                                                          GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fColorSpaceYe_$ctoListPx @ GHC.Types.Double
                                                        w
  = Lib.$s$fColorSpaceYe_$ctoListPx
"SPEC/Lib $fEltPixel @ Y @ Double" [orphan] forall (v2 :: GHC.Num.Num
                                                            (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double))
                                                   (v1 :: Data.Array.Repa.Eval.Elt.Elt
                                                            GHC.Types.Double)
                                                   (v :: Graphics.Image.Interface.ColorSpace
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double)
  Graphics.Image.Interface.Repa.Generic.$fEltPixel @ Graphics.Image.ColorSpace.Y.Y
                                                   @ GHC.Types.Double
                                                   v
                                                   v1
                                                   v2
  = Lib.$s$fArrayRPUcse_$s$fEltPixel
"SPEC/Lib $fEqPixel0 @ Double" [orphan] forall (v :: GHC.Classes.Eq
                                                       GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fEqPixel0 @ GHC.Types.Double v
  = Lib.$s$fArrayRPUcse_$s$fEqPixel0
"SPEC/Lib $fMArrayVScse @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.BaseArray
                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                              Graphics.Image.ColorSpace.Y.Y
                                                              GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse @ Graphics.Image.ColorSpace.Y.Y
                                                         @ GHC.Types.Double
                                                         v
  = Lib.$s$fArrayVScse_$s$fMArrayVScse
"SPEC/Lib $fMArrayVScse_$cdeepSeqImage @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                       Graphics.Image.Interface.Vector.Storable.VS
                                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                                       GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cdeepSeqImage @ Graphics.Image.ColorSpace.Y.Y
                                                                        @ GHC.Types.Double
                                                                        $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cdeepSeqImage
"SPEC/Lib $fMArrayVScse_$cfoldM @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cfoldM @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldM
"SPEC/Lib $fMArrayVScse_$cfoldM_ @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                 Graphics.Image.Interface.Vector.Storable.VS
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cfoldM_ @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldM_
"SPEC/Lib $fMArrayVScse_$cfoldl @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cfoldl @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldl
"SPEC/Lib $fMArrayVScse_$cfoldr @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cfoldr @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfoldr
"SPEC/Lib $fMArrayVScse_$cfreeze @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                 Graphics.Image.Interface.Vector.Storable.VS
                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cfreeze @ Graphics.Image.ColorSpace.Y.Y
                                                                  @ GHC.Types.Double
                                                                  $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cfreeze
"SPEC/Lib $fMArrayVScse_$cmakeImageM @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                     Graphics.Image.Interface.Vector.Storable.VS
                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                     GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cmakeImageM @ Graphics.Image.ColorSpace.Y.Y
                                                                      @ GHC.Types.Double
                                                                      $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmakeImageM
"SPEC/Lib $fMArrayVScse_$cmapM @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                               Graphics.Image.Interface.Vector.Storable.VS
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cmapM @ Graphics.Image.ColorSpace.Y.Y
                                                                @ GHC.Types.Double
                                                                $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmapM
"SPEC/Lib $fMArrayVScse_$cmapM_ @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cmapM_ @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmapM_
"SPEC/Lib $fMArrayVScse_$cmdims @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cmdims @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cmdims
"SPEC/Lib $fMArrayVScse_$cnew @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                              Graphics.Image.Interface.Vector.Storable.VS
                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                              GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cnew @ Graphics.Image.ColorSpace.Y.Y
                                                               @ GHC.Types.Double
                                                               $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cnew
"SPEC/Lib $fMArrayVScse_$cread @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                               Graphics.Image.Interface.Vector.Storable.VS
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cread @ Graphics.Image.ColorSpace.Y.Y
                                                                @ GHC.Types.Double
                                                                $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cread
"SPEC/Lib $fMArrayVScse_$cswap @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                               Graphics.Image.Interface.Vector.Storable.VS
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cswap @ Graphics.Image.ColorSpace.Y.Y
                                                                @ GHC.Types.Double
                                                                $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cswap
"SPEC/Lib $fMArrayVScse_$cthaw @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                               Graphics.Image.Interface.Vector.Storable.VS
                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cthaw @ Graphics.Image.ColorSpace.Y.Y
                                                                @ GHC.Types.Double
                                                                $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cthaw
"SPEC/Lib $fMArrayVScse_$cunsafeIndex @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                      Graphics.Image.Interface.Vector.Storable.VS
                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                      GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cunsafeIndex @ Graphics.Image.ColorSpace.Y.Y
                                                                       @ GHC.Types.Double
                                                                       $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cunsafeIndex
"SPEC/Lib $fMArrayVScse_$cwrite @ Y @ Double" [orphan] forall ($dBaseArray :: Graphics.Image.Interface.BaseArray
                                                                                Graphics.Image.Interface.Vector.Storable.VS
                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                GHC.Types.Double)
  Graphics.Image.Interface.Vector.Storable.$fMArrayVScse_$cwrite @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 $dBaseArray
  = Lib.$s$fArrayVScse_$s$fMArrayVScse_$cwrite
"SPEC/Lib $fMVectorMVector(,) @ Int @ (Pixel Y Double)" [orphan] forall (v1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                 (Graphics.Image.Interface.Pixel
                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                    GHC.Types.Double))
                                                                        (v :: Data.Vector.Unboxed.Base.Unbox
                                                                                GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,) @ GHC.Types.Int
                                               @ (Graphics.Image.Interface.Pixel
                                                    Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                               v
                                               v1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)
"SPEC/Lib $fMVectorMVector(,)_$cbasicClear @ Int @ (Pixel Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                    (Graphics.Image.Interface.Pixel
                                                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                                                       GHC.Types.Double))
                                                                                     ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                   GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicClear @ GHC.Types.Int
                                                            @ (Graphics.Image.Interface.Pixel
                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                 GHC.Types.Double)
                                                            $dUnbox
                                                            $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicClear
"SPEC/Lib $fMVectorMVector(,)_$cbasicInitialize @ Int @ (Pixel
                                                          Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                      GHC.Types.Double))
                                                                                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicInitialize @ GHC.Types.Int
                                                                 @ (Graphics.Image.Interface.Pixel
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
                                                                 $dUnbox
                                                                 $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicInitialize
"SPEC/Lib $fMVectorMVector(,)_$cbasicLength @ Int @ (Pixel Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                     (Graphics.Image.Interface.Pixel
                                                                                                        Graphics.Image.ColorSpace.Y.Y
                                                                                                        GHC.Types.Double))
                                                                                      ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                    GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicLength @ GHC.Types.Int
                                                             @ (Graphics.Image.Interface.Pixel
                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                  GHC.Types.Double)
                                                             $dUnbox
                                                             $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicLength
"SPEC/Lib $fMVectorMVector(,)_$cbasicOverlaps @ Int @ (Pixel
                                                        Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                               (Graphics.Image.Interface.Pixel
                                                                                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                  GHC.Types.Double))
                                                                                                                                                ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                              GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicOverlaps @ GHC.Types.Int
                                                               @ (Graphics.Image.Interface.Pixel
                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                    GHC.Types.Double)
                                                               $dUnbox
                                                               $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicOverlaps
"SPEC/Lib $fMVectorMVector(,)_$cbasicSet @ Int @ (Pixel Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                  (Graphics.Image.Interface.Pixel
                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                     GHC.Types.Double))
                                                                                   ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                 GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicSet @ GHC.Types.Int
                                                          @ (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double)
                                                          $dUnbox
                                                          $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicSet
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeCopy @ Int @ (Pixel
                                                          Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                      GHC.Types.Double))
                                                                                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeCopy @ GHC.Types.Int
                                                                 @ (Graphics.Image.Interface.Pixel
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
                                                                 $dUnbox
                                                                 $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeCopy
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeGrow @ Int @ (Pixel
                                                          Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                      GHC.Types.Double))
                                                                                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeGrow @ GHC.Types.Int
                                                                 @ (Graphics.Image.Interface.Pixel
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
                                                                 $dUnbox
                                                                 $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeGrow
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeMove @ Int @ (Pixel
                                                          Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                      GHC.Types.Double))
                                                                                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeMove @ GHC.Types.Int
                                                                 @ (Graphics.Image.Interface.Pixel
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
                                                                 $dUnbox
                                                                 $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeMove
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeNew @ Int @ (Pixel
                                                         Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                 (Graphics.Image.Interface.Pixel
                                                                                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                    GHC.Types.Double))
                                                                                                                                                  ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeNew @ GHC.Types.Int
                                                                @ (Graphics.Image.Interface.Pixel
                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                     GHC.Types.Double)
                                                                $dUnbox
                                                                $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeNew
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeRead @ Int @ (Pixel
                                                          Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                      GHC.Types.Double))
                                                                                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeRead @ GHC.Types.Int
                                                                 @ (Graphics.Image.Interface.Pixel
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
                                                                 $dUnbox
                                                                 $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeRead
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeReplicate @ Int @ (Pixel
                                                               Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                             (Graphics.Image.Interface.Pixel
                                                                                                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                                GHC.Types.Double))
                                                                                                                                                              ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                            GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeReplicate @ GHC.Types.Int
                                                                      @ (Graphics.Image.Interface.Pixel
                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                           GHC.Types.Double)
                                                                      $dUnbox
                                                                      $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeReplicate
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeSlice @ Int @ (Pixel
                                                           Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                     (Graphics.Image.Interface.Pixel
                                                                                                                                                                        Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                        GHC.Types.Double))
                                                                                                                                                      ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                    GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeSlice @ GHC.Types.Int
                                                                  @ (Graphics.Image.Interface.Pixel
                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                       GHC.Types.Double)
                                                                  $dUnbox
                                                                  $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeSlice
"SPEC/Lib $fMVectorMVector(,)_$cbasicUnsafeWrite @ Int @ (Pixel
                                                           Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                     (Graphics.Image.Interface.Pixel
                                                                                                                                                                        Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                        GHC.Types.Double))
                                                                                                                                                      ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                    GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fMVectorMVector(,)_$cbasicUnsafeWrite @ GHC.Types.Int
                                                                  @ (Graphics.Image.Interface.Pixel
                                                                       Graphics.Image.ColorSpace.Y.Y
                                                                       GHC.Types.Double)
                                                                  $dUnbox
                                                                  $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVector(,)_$cbasicUnsafeWrite
"SPEC/Lib $fMVectorMVectorPixel @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.ColorSpace
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel @ Graphics.Image.ColorSpace.Y.Y
                                                                 @ GHC.Types.Double
                                                                 v
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel
"SPEC/Lib $fMVectorMVectorPixel_$cbasicClear @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                              Graphics.Image.ColorSpace.Y.Y
                                                                                              GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicClear @ Graphics.Image.ColorSpace.Y.Y
                                                                              @ GHC.Types.Double
                                                                              $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicClear
"SPEC/Lib $fMVectorMVectorPixel_$cbasicInitialize @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicInitialize @ Graphics.Image.ColorSpace.Y.Y
                                                                                   @ GHC.Types.Double
                                                                                   $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicInitialize
"SPEC/Lib $fMVectorMVectorPixel_$cbasicLength @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                               Graphics.Image.ColorSpace.Y.Y
                                                                                               GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicLength @ Graphics.Image.ColorSpace.Y.Y
                                                                               @ GHC.Types.Double
                                                                               $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicLength
"SPEC/Lib $fMVectorMVectorPixel_$cbasicOverlaps @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicOverlaps @ Graphics.Image.ColorSpace.Y.Y
                                                                                 @ GHC.Types.Double
                                                                                 $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicOverlaps
"SPEC/Lib $fMVectorMVectorPixel_$cbasicSet @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                            GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicSet @ Graphics.Image.ColorSpace.Y.Y
                                                                            @ GHC.Types.Double
                                                                            $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicSet
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeCopy @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeCopy @ Graphics.Image.ColorSpace.Y.Y
                                                                                   @ GHC.Types.Double
                                                                                   $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeCopy
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeGrow @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeGrow @ Graphics.Image.ColorSpace.Y.Y
                                                                                   @ GHC.Types.Double
                                                                                   $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeGrow
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeMove @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeMove @ Graphics.Image.ColorSpace.Y.Y
                                                                                   @ GHC.Types.Double
                                                                                   $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeMove
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeNew @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                  GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeNew @ Graphics.Image.ColorSpace.Y.Y
                                                                                  @ GHC.Types.Double
                                                                                  $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeNew
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeRead @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeRead @ Graphics.Image.ColorSpace.Y.Y
                                                                                   @ GHC.Types.Double
                                                                                   $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeRead
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeReplicate @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                        Graphics.Image.ColorSpace.Y.Y
                                                                                                        GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeReplicate @ Graphics.Image.ColorSpace.Y.Y
                                                                                        @ GHC.Types.Double
                                                                                        $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeReplicate
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeSlice @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                    GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeSlice @ Graphics.Image.ColorSpace.Y.Y
                                                                                    @ GHC.Types.Double
                                                                                    $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeSlice
"SPEC/Lib $fMVectorMVectorPixel_$cbasicUnsafeWrite @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                    GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fMVectorMVectorPixel_$cbasicUnsafeWrite @ Graphics.Image.ColorSpace.Y.Y
                                                                                    @ GHC.Types.Double
                                                                                    $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fMVectorMVectorPixel_$cbasicUnsafeWrite
"SPEC/Lib $fMVectorMVectora @ (Pixel Y Double)" [orphan] forall (v :: Foreign.Storable.Storable
                                                                        (Graphics.Image.Interface.Pixel
                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                           GHC.Types.Double))
  Data.Vector.Storable.Mutable.$fMVectorMVectora @ (Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y
                                                      GHC.Types.Double)
                                                 v
  = Lib.$s$fArrayVScse_$s$fMVectorMVectora
"SPEC/Lib $fNumPixel @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.ColorSpace
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double)
  Graphics.Image.Interface.$fNumPixel @ Graphics.Image.ColorSpace.Y.Y
                                      @ GHC.Types.Double
                                      v
  = Lib.$s$fArrayRPUcse_$s$fNumPixel
"SPEC/Lib $fSourceUa @ (Pixel Y Double)" [orphan] forall (v :: Data.Vector.Unboxed.Base.Unbox
                                                                 (Graphics.Image.Interface.Pixel
                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                    GHC.Types.Double))
  Data.Array.Repa.Repr.Unboxed.$fSourceUa @ (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                          v
  = Lib.$s$fArrayRPUcse_$s$fSourceUa
"SPEC/Lib $fStorablePixel @ Double" [orphan] forall (v :: Foreign.Storable.Storable
                                                            GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel @ GHC.Types.Double v
  = Lib.$s$fArrayVScse_$s$fStorablePixel
"SPEC/Lib $fStorablePixel1 @ Double" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                      GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel1 @ GHC.Types.Double
                                               $dStorable
  = Lib.$s$fStorablePixel1
"SPEC/Lib $fStorablePixel3 @ Double" [orphan] [0] forall (w :: Foreign.Storable.Storable
                                                                 GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel3 @ GHC.Types.Double w
  = Lib.$s$fStorablePixel3
"SPEC/Lib $fStorablePixel_$calignment @ Double" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                 GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel_$calignment @ GHC.Types.Double
                                                          $dStorable
  = Lib.$s$fArrayVScse_$s$fStorablePixel_$calignment
"SPEC/Lib $fStorablePixel_$cpeek @ Double" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                            GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpeek @ GHC.Types.Double
                                                     $dStorable
  = Lib.$s$fArrayVScse_$s$fStorablePixel_$cpeek
"SPEC/Lib $fStorablePixel_$cpoke @ Double" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                            GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpoke @ GHC.Types.Double
                                                     $dStorable
  = Lib.$s$fArrayVScse_$s$fStorablePixel_$cpoke
"SPEC/Lib $fStorablePixel_$cpokeByteOff @ Double" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                   GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeByteOff @ GHC.Types.Double
                                                            $dStorable
  = Lib.$s$fStorablePixel_$cpokeByteOff
"SPEC/Lib $fStorablePixel_$cpokeElemOff @ Double" [orphan] [0] forall (w :: Foreign.Storable.Storable
                                                                              GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel_$cpokeElemOff @ GHC.Types.Double
                                                            w
  = Lib.$s$fStorablePixel_$cpokeElemOff
"SPEC/Lib $fStorablePixel_$csizeOf @ Double" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                              GHC.Types.Double)
  Graphics.Image.ColorSpace.Y.$fStorablePixel_$csizeOf @ GHC.Types.Double
                                                       $dStorable
  = Lib.$s$fArrayVScse_$s$fStorablePixel_$csizeOf
"SPEC/Lib $fTargetUe @ (Pixel Y Double)" [orphan] forall (v :: Data.Vector.Unboxed.Base.Unbox
                                                                 (Graphics.Image.Interface.Pixel
                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                    GHC.Types.Double))
  Data.Array.Repa.Repr.Unboxed.$fTargetUe @ (Graphics.Image.Interface.Pixel
                                               Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                          v
  = Lib.$s$fArrayRPUcse_$s$fTargetUe
"SPEC/Lib $fUnbox(,) @ Int @ (Pixel Y Double)" [orphan] forall (v1 :: Data.Vector.Unboxed.Base.Unbox
                                                                        (Graphics.Image.Interface.Pixel
                                                                           Graphics.Image.ColorSpace.Y.Y
                                                                           GHC.Types.Double))
                                                               (v :: Data.Vector.Unboxed.Base.Unbox
                                                                       GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fUnbox(,) @ GHC.Types.Int
                                      @ (Graphics.Image.Interface.Pixel
                                           Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                      v
                                      v1
  = Lib.$s$fArrayRPUcse_$s$fUnbox(,)
"SPEC/Lib $fUnboxPixel @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.ColorSpace
                                                             Graphics.Image.ColorSpace.Y.Y
                                                             GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fUnboxPixel @ Graphics.Image.ColorSpace.Y.Y
                                                        @ GHC.Types.Double
                                                        v
  = Lib.$s$fArrayRPUcse_$s$fUnboxPixel
"SPEC/Lib $fVectorVector(,) @ Int @ (Pixel Y Double)" [orphan] forall (v1 :: Data.Vector.Unboxed.Base.Unbox
                                                                               (Graphics.Image.Interface.Pixel
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double))
                                                                      (v :: Data.Vector.Unboxed.Base.Unbox
                                                                              GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,) @ GHC.Types.Int
                                             @ (Graphics.Image.Interface.Pixel
                                                  Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                             v
                                             v1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)
"SPEC/Lib $fVectorVector(,)_$cbasicLength @ Int @ (Pixel Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                      GHC.Types.Double))
                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,)_$cbasicLength @ GHC.Types.Int
                                                           @ (Graphics.Image.Interface.Pixel
                                                                Graphics.Image.ColorSpace.Y.Y
                                                                GHC.Types.Double)
                                                           $dUnbox
                                                           $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicLength
"SPEC/Lib $fVectorVector(,)_$cbasicUnsafeCopy @ Int @ (Pixel
                                                        Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                               (Graphics.Image.Interface.Pixel
                                                                                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                  GHC.Types.Double))
                                                                                                                                                ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                              GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,)_$cbasicUnsafeCopy @ GHC.Types.Int
                                                               @ (Graphics.Image.Interface.Pixel
                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                    GHC.Types.Double)
                                                               $dUnbox
                                                               $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeCopy
"SPEC/Lib $fVectorVector(,)_$cbasicUnsafeFreeze @ Int @ (Pixel
                                                          Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                      GHC.Types.Double))
                                                                                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,)_$cbasicUnsafeFreeze @ GHC.Types.Int
                                                                 @ (Graphics.Image.Interface.Pixel
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
                                                                 $dUnbox
                                                                 $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeFreeze
"SPEC/Lib $fVectorVector(,)_$cbasicUnsafeIndexM @ Int @ (Pixel
                                                          Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                      GHC.Types.Double))
                                                                                                                                                    ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                  GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,)_$cbasicUnsafeIndexM @ GHC.Types.Int
                                                                 @ (Graphics.Image.Interface.Pixel
                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                      GHC.Types.Double)
                                                                 $dUnbox
                                                                 $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeIndexM
"SPEC/Lib $fVectorVector(,)_$cbasicUnsafeSlice @ Int @ (Pixel
                                                         Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                 (Graphics.Image.Interface.Pixel
                                                                                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                    GHC.Types.Double))
                                                                                                                                                  ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                                GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,)_$cbasicUnsafeSlice @ GHC.Types.Int
                                                                @ (Graphics.Image.Interface.Pixel
                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                     GHC.Types.Double)
                                                                $dUnbox
                                                                $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeSlice
"SPEC/Lib $fVectorVector(,)_$cbasicUnsafeThaw @ Int @ (Pixel
                                                        Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                               (Graphics.Image.Interface.Pixel
                                                                                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                                                                                  GHC.Types.Double))
                                                                                                                                                ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                                                                                              GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,)_$cbasicUnsafeThaw @ GHC.Types.Int
                                                               @ (Graphics.Image.Interface.Pixel
                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                    GHC.Types.Double)
                                                               $dUnbox
                                                               $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$cbasicUnsafeThaw
"SPEC/Lib $fVectorVector(,)_$celemseq @ Int @ (Pixel Y Double)" [orphan] forall ($dUnbox1 :: Data.Vector.Unboxed.Base.Unbox
                                                                                               (Graphics.Image.Interface.Pixel
                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                  GHC.Types.Double))
                                                                                ($dUnbox :: Data.Vector.Unboxed.Base.Unbox
                                                                                              GHC.Types.Int)
  Data.Vector.Unboxed.Base.$fVectorVector(,)_$celemseq @ GHC.Types.Int
                                                       @ (Graphics.Image.Interface.Pixel
                                                            Graphics.Image.ColorSpace.Y.Y
                                                            GHC.Types.Double)
                                                       $dUnbox
                                                       $dUnbox1
  = Lib.$s$fArrayRPUcse_$s$fVectorVector(,)_$celemseq
"SPEC/Lib $fVectorVectorPixel @ Y @ Double" [orphan] forall (v :: Graphics.Image.Interface.ColorSpace
                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                    GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel @ Graphics.Image.ColorSpace.Y.Y
                                                               @ GHC.Types.Double
                                                               v
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel
"SPEC/Lib $fVectorVectorPixel_$cbasicLength @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                             Graphics.Image.ColorSpace.Y.Y
                                                                                             GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel_$cbasicLength @ Graphics.Image.ColorSpace.Y.Y
                                                                             @ GHC.Types.Double
                                                                             $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicLength
"SPEC/Lib $fVectorVectorPixel_$cbasicUnsafeCopy @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel_$cbasicUnsafeCopy @ Graphics.Image.ColorSpace.Y.Y
                                                                                 @ GHC.Types.Double
                                                                                 $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeCopy
"SPEC/Lib $fVectorVectorPixel_$cbasicUnsafeFreeze @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel_$cbasicUnsafeFreeze @ Graphics.Image.ColorSpace.Y.Y
                                                                                   @ GHC.Types.Double
                                                                                   $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeFreeze
"SPEC/Lib $fVectorVectorPixel_$cbasicUnsafeIndexM @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                   Graphics.Image.ColorSpace.Y.Y
                                                                                                   GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel_$cbasicUnsafeIndexM @ Graphics.Image.ColorSpace.Y.Y
                                                                                   @ GHC.Types.Double
                                                                                   $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeIndexM
"SPEC/Lib $fVectorVectorPixel_$cbasicUnsafeSlice @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                                  GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel_$cbasicUnsafeSlice @ Graphics.Image.ColorSpace.Y.Y
                                                                                  @ GHC.Types.Double
                                                                                  $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeSlice
"SPEC/Lib $fVectorVectorPixel_$cbasicUnsafeThaw @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                                 Graphics.Image.ColorSpace.Y.Y
                                                                                                 GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel_$cbasicUnsafeThaw @ Graphics.Image.ColorSpace.Y.Y
                                                                                 @ GHC.Types.Double
                                                                                 $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$cbasicUnsafeThaw
"SPEC/Lib $fVectorVectorPixel_$celemseq @ Y @ Double" [orphan] forall ($dColorSpace :: Graphics.Image.Interface.ColorSpace
                                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                                         GHC.Types.Double)
  Graphics.Image.Interface.Vector.Unboxing.$fVectorVectorPixel_$celemseq @ Graphics.Image.ColorSpace.Y.Y
                                                                         @ GHC.Types.Double
                                                                         $dColorSpace
  = Lib.$s$fArrayRPUcse_$s$fVectorVectorPixel_$celemseq
"SPEC/Lib $fVectorVectora @ (Pixel Y Double)" [orphan] forall (v :: Foreign.Storable.Storable
                                                                      (Graphics.Image.Interface.Pixel
                                                                         Graphics.Image.ColorSpace.Y.Y
                                                                         GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora @ (Graphics.Image.Interface.Pixel
                                            Graphics.Image.ColorSpace.Y.Y GHC.Types.Double)
                                       v
  = Lib.$s$fArrayVScse_$s$fVectorVectora
"SPEC/Lib $fVectorVectora_$cbasicLength @ (Pixel Y Double)" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                             (Graphics.Image.Interface.Pixel
                                                                                                Graphics.Image.ColorSpace.Y.Y
                                                                                                GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora_$cbasicLength @ (Graphics.Image.Interface.Pixel
                                                          Graphics.Image.ColorSpace.Y.Y
                                                          GHC.Types.Double)
                                                     $dStorable
  = Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicLength
"SPEC/Lib $fVectorVectora_$cbasicUnsafeCopy @ (Pixel Y Double)" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                                 (Graphics.Image.Interface.Pixel
                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                    GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora_$cbasicUnsafeCopy @ (Graphics.Image.Interface.Pixel
                                                              Graphics.Image.ColorSpace.Y.Y
                                                              GHC.Types.Double)
                                                         $dStorable
  = Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeCopy
"SPEC/Lib $fVectorVectora_$cbasicUnsafeFreeze @ (Pixel Y Double)" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                      GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora_$cbasicUnsafeFreeze @ (Graphics.Image.Interface.Pixel
                                                                Graphics.Image.ColorSpace.Y.Y
                                                                GHC.Types.Double)
                                                           $dStorable
  = Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeFreeze
"SPEC/Lib $fVectorVectora_$cbasicUnsafeIndexM @ (Pixel Y Double)" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                                   (Graphics.Image.Interface.Pixel
                                                                                                      Graphics.Image.ColorSpace.Y.Y
                                                                                                      GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora_$cbasicUnsafeIndexM @ (Graphics.Image.Interface.Pixel
                                                                Graphics.Image.ColorSpace.Y.Y
                                                                GHC.Types.Double)
                                                           $dStorable
  = Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeIndexM
"SPEC/Lib $fVectorVectora_$cbasicUnsafeSlice @ (Pixel Y Double)" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                                  (Graphics.Image.Interface.Pixel
                                                                                                     Graphics.Image.ColorSpace.Y.Y
                                                                                                     GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora_$cbasicUnsafeSlice @ (Graphics.Image.Interface.Pixel
                                                               Graphics.Image.ColorSpace.Y.Y
                                                               GHC.Types.Double)
                                                          $dStorable
  = Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeSlice
"SPEC/Lib $fVectorVectora_$cbasicUnsafeThaw @ (Pixel Y Double)" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                                 (Graphics.Image.Interface.Pixel
                                                                                                    Graphics.Image.ColorSpace.Y.Y
                                                                                                    GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora_$cbasicUnsafeThaw @ (Graphics.Image.Interface.Pixel
                                                              Graphics.Image.ColorSpace.Y.Y
                                                              GHC.Types.Double)
                                                         $dStorable
  = Lib.$s$fArrayVScse_$s$fVectorVectora_$cbasicUnsafeThaw
"SPEC/Lib $fVectorVectora_$celemseq @ (Pixel Y Double)" [orphan] forall ($dStorable :: Foreign.Storable.Storable
                                                                                         (Graphics.Image.Interface.Pixel
                                                                                            Graphics.Image.ColorSpace.Y.Y
                                                                                            GHC.Types.Double))
  Data.Vector.Storable.$fVectorVectora_$celemseq @ (Graphics.Image.Interface.Pixel
                                                      Graphics.Image.ColorSpace.Y.Y
                                                      GHC.Types.Double)
                                                 $dStorable
  = Lib.$s$fArrayVScse_$s$fVectorVectora_$celemseq
"SPEC/Lib fromListsVG @ Vector @ (Pixel Y Double)" [orphan] [0] forall (w :: Data.Vector.Generic.Base.Vector
                                                                               Data.Vector.Storable.Vector
                                                                               (Graphics.Image.Interface.Pixel
                                                                                  Graphics.Image.ColorSpace.Y.Y
                                                                                  GHC.Types.Double))
  Graphics.Image.Interface.Vector.Generic.fromListsVG @ Data.Vector.Storable.Vector
                                                      @ (Graphics.Image.Interface.Pixel
                                                           Graphics.Image.ColorSpace.Y.Y
                                                           GHC.Types.Double)
                                                      w
  = Lib.$sfromListsVG
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

